!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIVE	api.c	/^static const char *ALIVE = "Alive";$/;"	v	file:
ALLCOLON	driver-bflsc.c	/^	ALLCOLON \/\/ Temperature uses this$/;"	e	enum:breakmode	file:
ALLIP4	api.c	4049;"	d	file:
APIGROUPS	api.c	/^struct APIGROUPS {$/;"	s	file:
APIVERSION	api.c	/^static const char *APIVERSION = "2.0";$/;"	v	file:
API_BOOL	miner.h	/^	API_BOOL,$/;"	e	enum:api_data_type
API_CONST	miner.h	/^	API_CONST,$/;"	e	enum:api_data_type
API_DIFF	miner.h	/^	API_DIFF,$/;"	e	enum:api_data_type
API_DOUBLE	miner.h	/^	API_DOUBLE,$/;"	e	enum:api_data_type
API_ELAPSED	miner.h	/^	API_ELAPSED,$/;"	e	enum:api_data_type
API_ESCAPE	miner.h	/^	API_ESCAPE,$/;"	e	enum:api_data_type
API_FREQ	miner.h	/^	API_FREQ,$/;"	e	enum:api_data_type
API_HS	miner.h	/^	API_HS,$/;"	e	enum:api_data_type
API_INT	miner.h	/^	API_INT,$/;"	e	enum:api_data_type
API_MCAST_ADDR	miner.h	928;"	d
API_MCAST_CODE	miner.h	927;"	d
API_MHS	miner.h	/^	API_MHS,$/;"	e	enum:api_data_type
API_MHTOTAL	miner.h	/^	API_MHTOTAL,$/;"	e	enum:api_data_type
API_PERCENT	miner.h	/^	API_PERCENT$/;"	e	enum:api_data_type
API_STRING	miner.h	/^	API_STRING,$/;"	e	enum:api_data_type
API_TEMP	miner.h	/^	API_TEMP,$/;"	e	enum:api_data_type
API_TIME	miner.h	/^	API_TIME,$/;"	e	enum:api_data_type
API_TIMEVAL	miner.h	/^	API_TIMEVAL,$/;"	e	enum:api_data_type
API_UINT	miner.h	/^	API_UINT,$/;"	e	enum:api_data_type
API_UINT16	miner.h	/^	API_UINT16,$/;"	e	enum:api_data_type
API_UINT32	miner.h	/^	API_UINT32,$/;"	e	enum:api_data_type
API_UINT64	miner.h	/^	API_UINT64,$/;"	e	enum:api_data_type
API_UINT8	miner.h	/^	API_UINT8,$/;"	e	enum:api_data_type
API_UTILITY	miner.h	/^	API_UTILITY,$/;"	e	enum:api_data_type
API_VOLTS	miner.h	/^	API_VOLTS,$/;"	e	enum:api_data_type
ARRAY_SIZE	miner.h	204;"	d
ASICMINERUSB_HASH_TIME	driver-icarus.c	100;"	d	file:
ASIC_PARSE_COMMANDS	miner.h	234;"	d
ASSERT1	driver-avalon.h	182;"	d
ASSERT1	driver-icarus.c	62;"	d	file:
AVALON_ARRAY_SIZE	driver-avalon.h	170;"	d
AVALON_AUTO_CYCLE	driver-avalon.h	64;"	d
AVALON_CTS	driver-avalon.c	272;"	d	file:
AVALON_DEFAULT_ASIC_NUM	driver-avalon.h	56;"	d
AVALON_DEFAULT_FAN_MAX	driver-avalon.h	28;"	d
AVALON_DEFAULT_FAN_MAX_PWM	driver-avalon.h	29;"	d
AVALON_DEFAULT_FAN_MIN	driver-avalon.h	27;"	d
AVALON_DEFAULT_FAN_MIN_PWM	driver-avalon.h	30;"	d
AVALON_DEFAULT_FREQUENCY	driver-avalon.h	53;"	d
AVALON_DEFAULT_MINER_NUM	driver-avalon.h	54;"	d
AVALON_DEFAULT_TIMEOUT	driver-avalon.h	49;"	d
AVALON_FAN_FACTOR	driver-avalon.h	25;"	d
AVALON_FTDI_READSIZE	driver-avalon.h	66;"	d
AVALON_H	driver-avalon.h	12;"	d
AVALON_HASH_TIME_FACTOR	driver-avalon.h	22;"	d
AVALON_IO_SPEED	driver-avalon.h	21;"	d
AVALON_LATENCY	driver-avalon.h	69;"	d
AVALON_MAX_FREQUENCY	driver-avalon.h	51;"	d
AVALON_MAX_MINER_NUM	driver-avalon.h	55;"	d
AVALON_MINER_THREADS	driver-avalon.h	19;"	d
AVALON_MIN_FREQUENCY	driver-avalon.h	50;"	d
AVALON_PWM_MAX	driver-avalon.h	26;"	d
AVALON_READBUF_SIZE	driver-avalon.h	67;"	d
AVALON_READ_SIZE	driver-avalon.h	169;"	d
AVALON_READ_TIME	driver-avalon.h	181;"	d
AVALON_RESET_FAULT_DECISECONDS	driver-avalon.h	18;"	d
AVALON_RESET_PITCH	driver-avalon.h	23;"	d
AVALON_TEMP_HYSTERESIS	driver-avalon.h	33;"	d
AVALON_TEMP_OVERHEAT	driver-avalon.h	34;"	d
AVALON_TEMP_TARGET	driver-avalon.h	32;"	d
AVALON_TIMEOUT_FACTOR	driver-avalon.h	52;"	d
AVALON_TIMEOUT_MS	usbutils.c	66;"	d	file:
AVALON_TIMEOUT_MS	usbutils.c	79;"	d	file:
AVALON_WRITE_SIZE	driver-avalon.h	168;"	d
AVA_GETS_ERROR	driver-avalon.h	173;"	d
AVA_GETS_OK	driver-avalon.h	174;"	d
AVA_SEND_ERROR	driver-avalon.h	176;"	d
AVA_SEND_OK	driver-avalon.h	177;"	d
BAB_ADDR	driver-bab.c	42;"	d	file:
BAB_ADD_ASYNC	driver-bab.c	72;"	d	file:
BAB_ADD_BREAK	driver-bab.c	71;"	d	file:
BAB_ADD_MAX	driver-bab.c	77;"	d	file:
BAB_ADD_MIN	driver-bab.c	76;"	d	file:
BAB_ASYNC	driver-bab.c	61;"	d	file:
BAB_AUTO_BIT	driver-bab.c	184;"	d	file:
BAB_AUTO_REG	driver-bab.c	148;"	d	file:
BAB_AUTO_SET	driver-bab.c	176;"	d	file:
BAB_AUTO_VAL	driver-bab.c	149;"	d	file:
BAB_BASEA	driver-bab.c	87;"	d	file:
BAB_BASEB	driver-bab.c	88;"	d	file:
BAB_BREAK	driver-bab.c	60;"	d	file:
BAB_CFGD_SET	driver-bab.c	182;"	d	file:
BAB_CFGD_VAL	driver-bab.c	166;"	d	file:
BAB_CORES	driver-bab.c	56;"	d	file:
BAB_COUNTERS	driver-bab.c	89;"	d	file:
BAB_COUNT_ADDR	driver-bab.c	191;"	d	file:
BAB_DEFCONF	driver-bab.c	168;"	d	file:
BAB_DEFSPEED	driver-bab.c	136;"	d	file:
BAB_DIV2_BIT	driver-bab.c	187;"	d	file:
BAB_DIV2_REG	driver-bab.c	157;"	d	file:
BAB_DIV2_SET	driver-bab.c	179;"	d	file:
BAB_DIV2_VAL	driver-bab.c	158;"	d	file:
BAB_FAST_BIT	driver-bab.c	186;"	d	file:
BAB_FAST_REG	driver-bab.c	154;"	d	file:
BAB_FAST_SET	driver-bab.c	178;"	d	file:
BAB_FAST_VAL	driver-bab.c	155;"	d	file:
BAB_FFL	driver-bab.c	64;"	d	file:
BAB_FFL_HERE	driver-bab.c	65;"	d	file:
BAB_FFL_PASS	driver-bab.c	66;"	d	file:
BAB_GPIO_CLR	driver-bab.c	50;"	d	file:
BAB_GPIO_LEVEL	driver-bab.c	51;"	d	file:
BAB_GPIO_SET	driver-bab.c	49;"	d	file:
BAB_ICLK_BIT	driver-bab.c	185;"	d	file:
BAB_ICLK_REG	driver-bab.c	151;"	d	file:
BAB_ICLK_SET	driver-bab.c	177;"	d	file:
BAB_ICLK_VAL	driver-bab.c	152;"	d	file:
BAB_INP_ADDR	driver-bab.c	195;"	d	file:
BAB_INP_GPIO	driver-bab.c	44;"	d	file:
BAB_LONG_WAIT_SLEEP_uS	driver-bab.c	1241;"	d	file:
BAB_LONG_WAIT_uS	driver-bab.c	1239;"	d	file:
BAB_MAXBANKS	driver-bab.c	55;"	d	file:
BAB_MAXBUF	driver-bab.c	54;"	d	file:
BAB_MAXCHIPS	driver-bab.c	53;"	d	file:
BAB_MAXSPEED	driver-bab.c	135;"	d	file:
BAB_MINSPEED	driver-bab.c	137;"	d	file:
BAB_NONCE_OFFSETS	driver-bab.c	216;"	d	file:
BAB_OCLK_BIT	driver-bab.c	189;"	d	file:
BAB_OCLK_REG	driver-bab.c	163;"	d	file:
BAB_OCLK_SET	driver-bab.c	181;"	d	file:
BAB_OCLK_VAL	driver-bab.c	164;"	d	file:
BAB_OSC	driver-bab.c	209;"	d	file:
BAB_OSC_ADDR	driver-bab.c	196;"	d	file:
BAB_OUT_GPIO	driver-bab.c	45;"	d	file:
BAB_OUT_GPIO_V	driver-bab.c	46;"	d	file:
BAB_REG_ADDR	driver-bab.c	197;"	d	file:
BAB_REG_CLR_FROM	driver-bab.c	173;"	d	file:
BAB_REG_CLR_TO	driver-bab.c	174;"	d	file:
BAB_REPLY_NONCES	driver-bab.c	227;"	d	file:
BAB_SLOW_BIT	driver-bab.c	188;"	d	file:
BAB_SLOW_REG	driver-bab.c	160;"	d	file:
BAB_SLOW_SET	driver-bab.c	180;"	d	file:
BAB_SLOW_VAL	driver-bab.c	161;"	d	file:
BAB_SPI_BUFFERS	driver-bab.c	85;"	d	file:
BAB_SPI_BUFSIZ	driver-bab.c	40;"	d	file:
BAB_SPI_BUS	driver-bab.c	36;"	d	file:
BAB_SPI_CHIP	driver-bab.c	37;"	d	file:
BAB_SPI_SPEED	driver-bab.c	39;"	d	file:
BAB_STATE_DONE	driver-bab.c	79;"	d	file:
BAB_STATE_READING	driver-bab.c	83;"	d	file:
BAB_STATE_READY	driver-bab.c	80;"	d	file:
BAB_STATE_SENDING	driver-bab.c	81;"	d	file:
BAB_STATE_SENT	driver-bab.c	82;"	d	file:
BAB_STD_DELAY_uS	driver-bab.c	1707;"	d	file:
BAB_STD_WAIT_uS	driver-bab.c	1242;"	d	file:
BAB_STD_WORK_uS	driver-bab.c	1705;"	d	file:
BAB_SYNC	driver-bab.c	62;"	d	file:
BAB_TEST_DATA	driver-bab.c	115;"	d	file:
BAB_W1	driver-bab.c	101;"	d	file:
BAB_W1A_ADDR	driver-bab.c	192;"	d	file:
BAB_W1B_ADDR	driver-bab.c	193;"	d	file:
BAB_W2	driver-bab.c	109;"	d	file:
BAB_W2_ADDR	driver-bab.c	194;"	d	file:
BAB_WAIT_MSG_EVERY	driver-bab.c	1240;"	d	file:
BAB_X_COORD	driver-bab.c	57;"	d	file:
BAB_Y_COORD	driver-bab.c	58;"	d	file:
BAJ_LATENCY	driver-bflsc.h	331;"	d
BAJ_SCAN_TIME	driver-bflsc.h	327;"	d
BAJ_WORK_TIME	driver-bflsc.h	319;"	d
BAL_LATENCY	driver-bflsc.h	332;"	d
BAL_SCAN_TIME	driver-bflsc.h	326;"	d
BAL_WORK_TIME	driver-bflsc.h	317;"	d
BAM_LATENCY	driver-bflsc.h	335;"	d
BAM_SCAN_TIME	driver-bflsc.h	324;"	d
BAM_WORK_TIME	driver-bflsc.h	314;"	d
BAS_LATENCY	driver-bflsc.h	333;"	d
BAS_SCAN_TIME	driver-bflsc.h	325;"	d
BAS_WORK_TIME	driver-bflsc.h	315;"	d
BF1INFOSIZE	driver-bitfury.c	19;"	d	file:
BF1MSGSIZE	driver-bitfury.c	18;"	d	file:
BF1WAIT	driver-bitfury.c	17;"	d	file:
BFLSC_ANERR	driver-bflsc.h	259;"	d
BFLSC_ANERR_LEN	driver-bflsc.h	260;"	d
BFLSC_APPLOGSIZ	driver-bflsc.h	50;"	d
BFLSC_BFLSC	driver-bflsc.h	249;"	d
BFLSC_BUFSIZ	driver-bflsc.h	47;"	d
BFLSC_BUSY	driver-bflsc.h	303;"	d
BFLSC_BUSY_LEN	driver-bflsc.h	304;"	d
BFLSC_DETAILS	driver-bflsc.h	210;"	d
BFLSC_DETAILS_LEN	driver-bflsc.h	211;"	d
BFLSC_DI_CHAINPRESENCE	driver-bflsc.h	60;"	d
BFLSC_DI_CHIPS	driver-bflsc.h	61;"	d
BFLSC_DI_CHIPS_PARALLEL	driver-bflsc.h	62;"	d
BFLSC_DI_DEVICESINCHAIN	driver-bflsc.h	59;"	d
BFLSC_DI_ENGINES	driver-bflsc.h	55;"	d
BFLSC_DI_FIRMWARE	driver-bflsc.h	54;"	d
BFLSC_DI_JOBSINQUE	driver-bflsc.h	56;"	d
BFLSC_DI_XLINKMODE	driver-bflsc.h	57;"	d
BFLSC_DI_XLINKPRESENT	driver-bflsc.h	58;"	d
BFLSC_DRV1	driver-bflsc.h	/^	BFLSC_DRV1,$/;"	e	enum:driver_version
BFLSC_DRV2	driver-bflsc.h	/^	BFLSC_DRV2$/;"	e	enum:driver_version
BFLSC_DRVUNDEF	driver-bflsc.h	/^	BFLSC_DRVUNDEF = 0,$/;"	e	enum:driver_version
BFLSC_EMPTYSTR	driver-bflsc.h	281;"	d
BFLSC_EMPTYSTR_LEN	driver-bflsc.h	282;"	d
BFLSC_EOB	driver-bflsc.h	165;"	d
BFLSC_EOW	driver-bflsc.h	188;"	d
BFLSC_ERRSIG	driver-bflsc.h	268;"	d
BFLSC_ERRSIG_LEN	driver-bflsc.h	269;"	d
BFLSC_FAN0	driver-bflsc.h	226;"	d
BFLSC_FAN0_LEN	driver-bflsc.h	227;"	d
BFLSC_FAN1	driver-bflsc.h	228;"	d
BFLSC_FAN1_LEN	driver-bflsc.h	229;"	d
BFLSC_FAN2	driver-bflsc.h	230;"	d
BFLSC_FAN2_LEN	driver-bflsc.h	231;"	d
BFLSC_FAN3	driver-bflsc.h	232;"	d
BFLSC_FAN3_LEN	driver-bflsc.h	233;"	d
BFLSC_FAN4	driver-bflsc.h	234;"	d
BFLSC_FAN4_LEN	driver-bflsc.h	235;"	d
BFLSC_FANAUTO	driver-bflsc.h	224;"	d
BFLSC_FANOUT_LEN	driver-bflsc.h	225;"	d
BFLSC_FIRMWARE	driver-bflsc.h	212;"	d
BFLSC_FIRMWARE_LEN	driver-bflsc.h	213;"	d
BFLSC_FLASH	driver-bflsc.h	214;"	d
BFLSC_FLASH_LEN	driver-bflsc.h	215;"	d
BFLSC_H	driver-bflsc.h	12;"	d
BFLSC_HITEMP	driver-bflsc.h	279;"	d
BFLSC_HITEMP_LEN	driver-bflsc.h	280;"	d
BFLSC_IDENTIFY	driver-bflsc.h	208;"	d
BFLSC_IDENTIFY_LEN	driver-bflsc.h	209;"	d
BFLSC_IDENTITY	driver-bflsc.h	248;"	d
BFLSC_IDLE	driver-bflsc.h	301;"	d
BFLSC_IDLE_LEN	driver-bflsc.h	302;"	d
BFLSC_INFO_TIMEOUT	driver-bflsc.h	52;"	d
BFLSC_INPROCESS	driver-bflsc.h	272;"	d
BFLSC_INPROCESS_LEN	driver-bflsc.h	273;"	d
BFLSC_INVALID	driver-bflsc.h	266;"	d
BFLSC_INVALID_LEN	driver-bflsc.h	267;"	d
BFLSC_JALAPENO	driver-bflsc.h	309;"	d
BFLSC_JOBSIZ	driver-bflsc.h	286;"	d
BFLSC_LITTLESINGLE	driver-bflsc.h	308;"	d
BFLSC_LOADSTR	driver-bflsc.h	236;"	d
BFLSC_LOADSTR_LEN	driver-bflsc.h	237;"	d
BFLSC_MAXPAYLOAD	driver-bflsc.h	150;"	d
BFLSC_MAX_SLEEP	driver-bflsc.h	329;"	d
BFLSC_MINIRIG	driver-bflsc.h	306;"	d
BFLSC_NONCE	driver-bflsc.h	297;"	d
BFLSC_NONCE_LEN	driver-bflsc.h	298;"	d
BFLSC_NO_NONCE	driver-bflsc.h	299;"	d
BFLSC_NO_NONCE_LEN	driver-bflsc.h	300;"	d
BFLSC_OK	driver-bflsc.h	251;"	d
BFLSC_OKQ	driver-bflsc.h	270;"	d
BFLSC_OKQN	driver-bflsc.h	275;"	d
BFLSC_OKQN_LEN	driver-bflsc.h	276;"	d
BFLSC_OKQ_LEN	driver-bflsc.h	271;"	d
BFLSC_OK_LEN	driver-bflsc.h	252;"	d
BFLSC_OVER_TEMP	driver-bflsc.c	1834;"	d	file:
BFLSC_QFLUSH	driver-bflsc.h	222;"	d
BFLSC_QFLUSH_LEN	driver-bflsc.h	223;"	d
BFLSC_QFULL	driver-bflsc.h	277;"	d
BFLSC_QFULL_LEN	driver-bflsc.h	278;"	d
BFLSC_QJOB	driver-bflsc.h	240;"	d
BFLSC_QJOBS	driver-bflsc.h	242;"	d
BFLSC_QJOBSIZ	driver-bflsc.h	164;"	d
BFLSC_QJOBS_LEN	driver-bflsc.h	243;"	d
BFLSC_QJOB_LEN	driver-bflsc.h	241;"	d
BFLSC_QRES	driver-bflsc.h	220;"	d
BFLSC_QRES_LEN	driver-bflsc.h	221;"	d
BFLSC_QUE_FULL_ENOUGH_V1	driver-bflsc.h	340;"	d
BFLSC_QUE_FULL_ENOUGH_V2	driver-bflsc.h	347;"	d
BFLSC_QUE_LOW_V1	driver-bflsc.h	342;"	d
BFLSC_QUE_LOW_V2	driver-bflsc.h	349;"	d
BFLSC_QUE_SIZE_V1	driver-bflsc.h	339;"	d
BFLSC_QUE_SIZE_V2	driver-bflsc.h	346;"	d
BFLSC_QUE_WATERMARK_V1	driver-bflsc.h	341;"	d
BFLSC_QUE_WATERMARK_V2	driver-bflsc.h	348;"	d
BFLSC_RESULT	driver-bflsc.h	256;"	d
BFLSC_RESULT_LEN	driver-bflsc.h	257;"	d
BFLSC_RES_TIME	driver-bflsc.h	328;"	d
BFLSC_SAVESTR	driver-bflsc.h	244;"	d
BFLSC_SAVESTR_LEN	driver-bflsc.h	245;"	d
BFLSC_SENDRANGE	driver-bflsc.h	293;"	d
BFLSC_SENDRANGE_LEN	driver-bflsc.h	294;"	d
BFLSC_SENDWORK	driver-bflsc.h	289;"	d
BFLSC_SENDWORK_LEN	driver-bflsc.h	290;"	d
BFLSC_SIGNATURE	driver-bflsc.h	187;"	d
BFLSC_SINGLE	driver-bflsc.h	307;"	d
BFLSC_SUCCESS	driver-bflsc.h	253;"	d
BFLSC_SUCCESS_LEN	driver-bflsc.h	254;"	d
BFLSC_TEMPERATURE	driver-bflsc.h	218;"	d
BFLSC_TEMPERATURE_LEN	driver-bflsc.h	219;"	d
BFLSC_TEMP_OVERHEAT	driver-bflsc.h	351;"	d
BFLSC_TEMP_RECOVER	driver-bflsc.h	355;"	d
BFLSC_TEMP_SLEEPMS	driver-bflsc.h	337;"	d
BFLSC_TEMP_THROTTLE	driver-bflsc.h	353;"	d
BFLSC_TIMEOUT	driver-bflsc.h	261;"	d
BFLSC_TIMEOUT_LEN	driver-bflsc.h	262;"	d
BFLSC_TIMEOUT_MS	usbutils.c	63;"	d	file:
BFLSC_TIMEOUT_MS	usbutils.c	76;"	d	file:
BFLSC_VOLTAGE	driver-bflsc.h	216;"	d
BFLSC_VOLTAGE_LEN	driver-bflsc.h	217;"	d
BFLSC_WORKSTATUS	driver-bflsc.h	291;"	d
BFLSC_WORKSTATUS_LEN	driver-bflsc.h	292;"	d
BFLSC_XLINKHDR	driver-bflsc.h	149;"	d
BFLSC_XTIMEOUT	driver-bflsc.h	264;"	d
BFLSC_XTIMEOUT_LEN	driver-bflsc.h	265;"	d
BFL_FILE_MAGIC	bitforce-firmware-flash.c	18;"	d	file:
BFL_UPLOAD_MAGIC	bitforce-firmware-flash.c	19;"	d	file:
BISTREAM_USER_ID	driver-modminer.c	25;"	d	file:
BITBURNER_ARRAY_SIZE	driver-avalon.h	171;"	d
BITBURNER_DEFAULT_CORE_VOLTAGE	driver-avalon.h	37;"	d
BITBURNER_FURY_DEFAULT_CORE_VOLTAGE	driver-avalon.h	43;"	d
BITBURNER_FURY_DEFAULT_FREQUENCY	driver-avalon.h	61;"	d
BITBURNER_FURY_DEFAULT_MINER_NUM	driver-avalon.h	60;"	d
BITBURNER_FURY_DEFAULT_TIMEOUT	driver-avalon.h	62;"	d
BITBURNER_FURY_MAX_COREMV	driver-avalon.h	46;"	d
BITBURNER_FURY_MIN_COREMV	driver-avalon.h	44;"	d
BITBURNER_INDEX_GET_VERSION	usbutils.h	58;"	d
BITBURNER_INDEX_GET_VOLTAGE	usbutils.h	57;"	d
BITBURNER_INDEX_SET_VOLTAGE	usbutils.h	56;"	d
BITBURNER_MAX_COREMV	driver-avalon.h	40;"	d
BITBURNER_MIN_COREMV	driver-avalon.h	38;"	d
BITBURNER_REQUEST	usbutils.h	54;"	d
BITBURNER_VALUE	usbutils.h	55;"	d
BITBURNER_VERSION1	driver-avalon.h	164;"	d
BITBURNER_VERSION2	driver-avalon.h	165;"	d
BITBURNER_VERSION3	driver-avalon.h	166;"	d
BITFORCE_BUFSIZ	driver-bitforce.c	68;"	d	file:
BITFORCE_CHECK_INTERVAL_MS	driver-bitforce.c	59;"	d	file:
BITFORCE_EITHER	driver-bitforce.c	45;"	d	file:
BITFORCE_EITHER_LEN	driver-bitforce.c	46;"	d	file:
BITFORCE_FLASH	driver-bitforce.c	33;"	d	file:
BITFORCE_FLASH_LEN	driver-bitforce.c	34;"	d	file:
BITFORCE_IDENTIFY	driver-bitforce.c	31;"	d	file:
BITFORCE_IDENTIFY_LEN	driver-bitforce.c	32;"	d	file:
BITFORCE_IDLE	driver-bitforce.c	51;"	d	file:
BITFORCE_IDLE_MATCH	driver-bitforce.c	52;"	d	file:
BITFORCE_LONG_TIMEOUT_MS	driver-bitforce.c	58;"	d	file:
BITFORCE_LONG_TIMEOUT_S	driver-bitforce.c	57;"	d	file:
BITFORCE_NONCE	driver-bitforce.c	47;"	d	file:
BITFORCE_NONCE_LEN	driver-bitforce.c	48;"	d	file:
BITFORCE_NO_NONCE	driver-bitforce.c	49;"	d	file:
BITFORCE_NO_NONCE_MATCH	driver-bitforce.c	50;"	d	file:
BITFORCE_SENDRANGE	driver-bitforce.c	37;"	d	file:
BITFORCE_SENDRANGE_LEN	driver-bitforce.c	38;"	d	file:
BITFORCE_SENDWORK	driver-bitforce.c	39;"	d	file:
BITFORCE_SENDWORK_LEN	driver-bitforce.c	40;"	d	file:
BITFORCE_SLEEP_MS	driver-bitforce.c	54;"	d	file:
BITFORCE_TEMPERATURE	driver-bitforce.c	35;"	d	file:
BITFORCE_TEMPERATURE_LEN	driver-bitforce.c	36;"	d	file:
BITFORCE_TIMEOUT_MS	driver-bitforce.c	56;"	d	file:
BITFORCE_TIMEOUT_MS	usbutils.c	64;"	d	file:
BITFORCE_TIMEOUT_MS	usbutils.c	77;"	d	file:
BITFORCE_TIMEOUT_S	driver-bitforce.c	55;"	d	file:
BITFORCE_WORKSTATUS	driver-bitforce.c	41;"	d	file:
BITFORCE_WORKSTATUS_LEN	driver-bitforce.c	42;"	d	file:
BITFURY_H	driver-bitfury.h	11;"	d
BITFURY_TIMEOUT_MS	usbutils.c	59;"	d	file:
BITSNOTSET	fpgautils.c	159;"	d	file:
BITSSET	fpgautils.c	158;"	d	file:
BITSTREAM_FILENAME	driver-modminer.c	24;"	d	file:
BITSTREAM_MAGIC_0	driver-modminer.c	27;"	d	file:
BITSTREAM_MAGIC_1	driver-modminer.c	28;"	d	file:
BLANK	api.c	/^static const char *BLANK = "";$/;"	v	file:
BLANK	driver-bflsc.h	13;"	d
BLANK	usbutils.c	/^static const char *BLANK = "";$/;"	v	file:
BLIST	driver-bab.c	/^} BLIST;$/;"	t	typeref:struct:blist	file:
BLOCK_HEADER_BYTES	driver-bab.c	142;"	d	file:
BT_OFFSETS	driver-bitfury.c	507;"	d	file:
BULK	usbutils.c	/^static const char *BULK = "Bulk";$/;"	v	file:
BYTES_PER_LINE	hexdump.c	28;"	d	file:
CAIRNSMORE1_HASH_TIME	driver-icarus.c	102;"	d	file:
CAIRNSMORE2_HASH_TIME	driver-icarus.c	104;"	d	file:
CAIRNSMORE2_INTS	driver-icarus.c	107;"	d	file:
CGLOCK_MUTEX	miner.h	/^	CGLOCK_MUTEX,$/;"	e	enum:cglock_typ
CGLOCK_RW	miner.h	/^	CGLOCK_RW,$/;"	e	enum:cglock_typ
CGLOCK_UNKNOWN	miner.h	/^	CGLOCK_UNKNOWN$/;"	e	enum:cglock_typ
CGMINER_BENCHMARK_BLOCK	bench_block.h	5;"	d
CGMINER_MAJOR_VERSION	config.h	20;"	d
CGMINER_MINOR_SUBVERSION	config.h	23;"	d
CGMINER_MINOR_VERSION	config.h	26;"	d
CGMINER_PREFIX	config.h	29;"	d
CH	sha2.h	46;"	d
CHIPS_PER_STAT	driver-bab.c	1744;"	d	file:
CLOSESOCKET	api-example.c	37;"	d	file:
CLOSESOCKET	api-example.c	50;"	d	file:
CLOSESOCKET	util.h	16;"	d
CLOSESOCKET	util.h	35;"	d
CMDS	api.c	/^struct CMDS {$/;"	s	file:
CMD_CMD	usbutils.c	687;"	d	file:
CMD_ERROR	usbutils.c	689;"	d	file:
CMD_FLUSH_QUEUE	driver-knc-spi-fpga.c	62;"	d	file:
CMD_GET_VERSION	driver-knc-spi-fpga.c	60;"	d	file:
CMD_NOP	driver-knc-spi-fpga.c	59;"	d	file:
CMD_REPLY_RETRIES	driver-klondike.c	59;"	d	file:
CMD_SUBMIT_WORK	driver-knc-spi-fpga.c	61;"	d	file:
CMD_TIMEOUT	usbutils.c	688;"	d	file:
CMR2_INT_TO_SPEED	driver-icarus.c	233;"	d	file:
CODES	api.c	/^struct CODES {$/;"	s	file:
COMMA	api-example.c	/^static const char COMMA = ',';$/;"	v	file:
COMMA	api.c	/^static const char *COMMA = ",";$/;"	v	file:
COMMANDS	api.c	595;"	d	file:
COMSTR	api.c	130;"	d	file:
CONTROL	usbutils.c	/^static const char *CONTROL = "Control";$/;"	v	file:
CORE_DISA_PERIOD_US	driver-knc-spi-fpga.c	48;"	d	file:
CP210X_DATA_BAUD	usbutils.h	86;"	d
CP210X_REQUEST_BAUD	usbutils.h	82;"	d
CP210X_REQUEST_DATA	usbutils.h	81;"	d
CP210X_REQUEST_IFC_ENABLE	usbutils.h	80;"	d
CP210X_TYPE_OUT	usbutils.h	78;"	d
CP210X_VALUE_DATA	usbutils.h	85;"	d
CP210X_VALUE_UART_ENABLE	usbutils.h	84;"	d
CURBUFSIZ	cgminer.c	2147;"	d	file:
CURL	miner.h	/^typedef char CURL;$/;"	t
CURL_GLOBAL_ALL	miner.h	19;"	d
C_MAX	usbutils.h	/^	C_MAX$/;"	e	enum:usb_cmds
C_NULL	driver-hashfast.c	62;"	d	file:
DATAFORWARDSIZE	driver-bflsc.h	159;"	d
DATA_BITS	driver-bab.c	1364;"	d	file:
DATA_MERKLE7	driver-bab.c	1362;"	d	file:
DATA_NONCE	driver-bab.c	1365;"	d	file:
DATA_NTIME	driver-bab.c	1363;"	d	file:
DATA_UINTS	driver-bab.c	145;"	d	file:
DEAD	api.c	/^static const char *DEAD = "Dead";$/;"	v	file:
DECLTYPE	uthash.h	37;"	d
DECLTYPE	uthash.h	40;"	d
DECLTYPE	uthash.h	43;"	d
DECLTYPE_ASSIGN	uthash.h	47;"	d
DECLTYPE_ASSIGN	uthash.h	53;"	d
DEFAULT_EP_IN	usbutils.h	117;"	d
DEFAULT_EP_OUT	usbutils.h	118;"	d
DEFAULT_INTINFO	usbutils.h	113;"	d
DEFAULT_SOCKWAIT	util.c	47;"	d	file:
DEFINEDGROUP	api.c	596;"	d	file:
DESCON	usbutils.c	/^static const char *DESCON = "Config";$/;"	v	file:
DESDEV	usbutils.c	/^static const char *DESDEV = "Device";$/;"	v	file:
DESEP	usbutils.c	/^static const char *DESEP = "Endpoint";$/;"	v	file:
DESHID	usbutils.c	/^static const char *DESHID = "HID";$/;"	v	file:
DESHUB	usbutils.c	/^static const char *DESHUB = "Hub";$/;"	v	file:
DESINT	usbutils.c	/^static const char *DESINT = "Interface";$/;"	v	file:
DESPHY	usbutils.c	/^static const char *DESPHY = "Physical";$/;"	v	file:
DESRPT	usbutils.c	/^static const char *DESRPT = "Report";$/;"	v	file:
DESSTR	usbutils.c	/^static const char *DESSTR = "String";$/;"	v	file:
DEVICECODE	api.c	/^static const char *DEVICECODE = ""$/;"	v	file:
DEVINFO	driver-klondike.c	/^} DEVINFO;$/;"	t	typeref:struct:device_info	file:
DEVRLOCK	usbutils.c	47;"	d	file:
DEVRUNLOCK	usbutils.c	52;"	d	file:
DEVTIMEOUT	usbutils.h	110;"	d
DEVWLOCK	usbutils.c	37;"	d	file:
DEVWUNLOCK	usbutils.c	42;"	d	file:
DEV_DISABLED	miner.h	/^	DEV_DISABLED,$/;"	e	enum:dev_enable
DEV_ENABLED	miner.h	/^	DEV_ENABLED,$/;"	e	enum:dev_enable
DEV_RECOVER	miner.h	/^	DEV_RECOVER,$/;"	e	enum:dev_enable
DI8	driver-hashfast.c	25;"	d	file:
DIDLOCK	miner.h	699;"	d
DIDLOCK	miner.h	706;"	d
DISABLED	api.c	/^static const char *DISABLED = "Disabled";$/;"	v	file:
DISA_ERR_LIMIT	driver-knc-spi-fpga.c	38;"	d	file:
DO_USB_STATS	usbutils.c	664;"	d	file:
DRIVER_COUNT_DRV	api.c	1173;"	d	file:
DRIVER_COUNT_FOUND	usbutils.c	3227;"	d	file:
DRIVER_DRV_DETECT_ALL	cgminer.c	7755;"	d	file:
DRIVER_DRV_DETECT_HOTPLUG	cgminer.c	7703;"	d	file:
DRIVER_ENUM	miner.h	248;"	d
DRIVER_FILL_DEVICE_DRV	cgminer.c	7754;"	d	file:
DRIVER_MAX	miner.h	/^	DRIVER_MAX$/;"	e	enum:drv_driver
DRIVER_PARSE_COMMANDS	miner.h	/^	DRIVER_PARSE_COMMANDS(DRIVER_ENUM)$/;"	e	enum:drv_driver
DRIVER_PARSE_COMMANDS	miner.h	244;"	d
DRIVER_PROTOTYPE	miner.h	249;"	d
DRIVER_USB_CHECK_EACH	usbutils.c	2034;"	d	file:
DataForwardToChain	driver-bflsc.h	/^struct DataForwardToChain {$/;"	s
ELMT_FROM_HH	uthash.h	92;"	d
END_CONDITION	driver-icarus.c	259;"	d	file:
ENUMERATION	usbutils.h	266;"	d
EOL	usbutils.c	729;"	d	file:
EOL	usbutils.c	731;"	d	file:
EPI	usbutils.h	18;"	d
EPIN	usbutils.c	/^static const char *EPIN = "In: ";$/;"	v	file:
EPO	usbutils.h	19;"	d
EPOCHFILETIME	util.c	938;"	d	file:
EPOUT	usbutils.c	/^static const char *EPOUT = "Out: ";$/;"	v	file:
EPX	usbutils.c	/^static const char *EPX = "?: ";$/;"	v	file:
EQ	api-example.c	/^static const char EQ = '=';$/;"	v	file:
ERRRESP	bitforce-firmware-flash.c	29;"	d	file:
EWOULDBLOCK	miner.h	77;"	d
EXECV_2ND_ARG_TYPE	config.h	43;"	d
E_ADDRESS_TIMEOUT	hf_protocol.h	94;"	d
E_BOARD_1	hf_protocol.h	104;"	d
E_BOARD_2	hf_protocol.h	105;"	d
E_BOARD_3	hf_protocol.h	106;"	d
E_BOARD_4	hf_protocol.h	107;"	d
E_BOARD_5	hf_protocol.h	108;"	d
E_CLOCKGATE_TIMEOUT	hf_protocol.h	95;"	d
E_CONFIG_TIMEOUT	hf_protocol.h	96;"	d
E_EXCESS_CORE_FAILURES	hf_protocol.h	97;"	d
E_MAIN_POWER_BAD	hf_protocol.h	102;"	d
E_NO_SLAVES	hf_protocol.h	100;"	d
E_RESET_TIMEOUT	hf_protocol.h	93;"	d
E_SECONDARY_POWER_BAD	hf_protocol.h	103;"	d
E_SLAVE_COMM	hf_protocol.h	101;"	d
E_TOO_MANY_GROUPS	hf_protocol.h	99;"	d
E_TOTAL_CORE_FAILURES	hf_protocol.h	98;"	d
FAILURE_INTERVAL	cgminer.c	/^	FAILURE_INTERVAL		= 30,$/;"	e	enum:__anon1	file:
FALSESTR	api.c	/^static const char *FALSESTR = "false";$/;"	v	file:
FPGAID_ALL	driver-modminer.c	78;"	d	file:
FPGAUTILS_H	fpgautils.h	11;"	d
FPGA_PARSE_COMMANDS	miner.h	229;"	d
FTDI_INDEX_BAUD_AVA	usbutils.h	49;"	d
FTDI_INDEX_BAUD_BAS	usbutils.h	42;"	d
FTDI_INDEX_BAUD_BFL	usbutils.h	40;"	d
FTDI_INDEX_BAUD_BLT	usbutils.h	45;"	d
FTDI_INDEX_BAUD_CMR_115	usbutils.h	62;"	d
FTDI_INDEX_BAUD_CMR_57	usbutils.h	65;"	d
FTDI_REQUEST_BAUD	usbutils.h	29;"	d
FTDI_REQUEST_DATA	usbutils.h	30;"	d
FTDI_REQUEST_FLOW	usbutils.h	28;"	d
FTDI_REQUEST_LATENCY	usbutils.h	31;"	d
FTDI_REQUEST_MODEM	usbutils.h	27;"	d
FTDI_REQUEST_RESET	usbutils.h	26;"	d
FTDI_RS0_CTS	usbutils.c	3015;"	d	file:
FTDI_RS0_DSR	usbutils.c	3016;"	d	file:
FTDI_RS0_RI	usbutils.c	3017;"	d	file:
FTDI_RS0_RLSD	usbutils.c	3018;"	d	file:
FTDI_STATUS_B0_MASK	usbutils.c	3014;"	d	file:
FTDI_TYPE_IN	usbutils.h	24;"	d
FTDI_TYPE_OUT	usbutils.h	23;"	d
FTDI_VALUE_BAUD_AVA	usbutils.h	48;"	d
FTDI_VALUE_BAUD_BAS	usbutils.h	41;"	d
FTDI_VALUE_BAUD_BFL	usbutils.h	39;"	d
FTDI_VALUE_BAUD_BLT	usbutils.h	44;"	d
FTDI_VALUE_BAUD_CMR_115	usbutils.h	61;"	d
FTDI_VALUE_BAUD_CMR_57	usbutils.h	64;"	d
FTDI_VALUE_DATA_AVA	usbutils.h	51;"	d
FTDI_VALUE_DATA_BAS	usbutils.h	69;"	d
FTDI_VALUE_DATA_BFL	usbutils.h	68;"	d
FTDI_VALUE_DATA_BLT	usbutils.h	71;"	d
FTDI_VALUE_FLOW	usbutils.h	73;"	d
FTDI_VALUE_LATENCY	usbutils.h	36;"	d
FTDI_VALUE_MODEM	usbutils.h	74;"	d
FTDI_VALUE_PURGE_RX	usbutils.h	34;"	d
FTDI_VALUE_PURGE_TX	usbutils.h	35;"	d
FTDI_VALUE_RESET	usbutils.h	33;"	d
FULLNONCE	driver-bflsc.h	64;"	d
FullNonceRangeJob	driver-bflsc.h	285;"	d
GETLOCK	miner.h	696;"	d
GETLOCK	miner.h	703;"	d
GETWORK_MODE_BENCHMARK	miner.h	1238;"	d
GETWORK_MODE_GBT	miner.h	1240;"	d
GETWORK_MODE_LP	miner.h	1237;"	d
GETWORK_MODE_POOL	miner.h	1236;"	d
GETWORK_MODE_STRATUM	miner.h	1239;"	d
GETWORK_MODE_TESTPOOL	miner.h	1235;"	d
GNULIB_TEST_MEMCHR	config.h	46;"	d
GNULIB_TEST_MEMMEM	config.h	49;"	d
GNULIB_TEST_SIGACTION	config.h	52;"	d
GNULIB_TEST_SIGPROCMASK	config.h	55;"	d
GN_CORE_VOLTAGE	hf_protocol.h	45;"	d
GN_DIE_TEMPERATURE	hf_protocol.h	46;"	d
GN_THERMAL_CUTOFF	hf_protocol.h	49;"	d
GOTLOCK	miner.h	697;"	d
GOTLOCK	miner.h	704;"	d
GP8	driver-hashfast.c	24;"	d	file:
GRIDSEED_COMMAND_DELAY	driver-gridseed.h	17;"	d
GRIDSEED_DEFAULT_BAUD	driver-gridseed.h	11;"	d
GRIDSEED_DEFAULT_CHIPS	driver-gridseed.h	13;"	d
GRIDSEED_DEFAULT_FREQUENCY	driver-gridseed.h	12;"	d
GRIDSEED_DEFAULT_MODULES	driver-gridseed.h	14;"	d
GRIDSEED_DEFAULT_USEFIFO	driver-gridseed.h	15;"	d
GRIDSEED_INFO	driver-gridseed.c	/^} GRIDSEED_INFO;$/;"	t	typeref:struct:s_gridseed_info	file:
GRIDSEED_LATENCY	driver-gridseed.h	9;"	d
GRIDSEED_MCU_QUEUE_LEN	driver-gridseed.h	19;"	d
GRIDSEED_MINER_THREADS	driver-gridseed.h	8;"	d
GRIDSEED_PROXY_PORT	driver-gridseed.h	23;"	d
GRIDSEED_READBUF_SIZE	driver-gridseed.h	21;"	d
GRIDSEED_READ_SIZE	driver-gridseed.h	18;"	d
GRIDSEED_SOFT_QUEUE_LEN	driver-gridseed.h	20;"	d
GRIDSEED_TIMEOUT_MS	usbutils.c	69;"	d	file:
GRIDSEED_TIMEOUT_MS	usbutils.c	82;"	d	file:
GROUP	api.c	589;"	d	file:
GROUPOFFSET	api.c	593;"	d	file:
GUNLOCK	miner.h	700;"	d
GUNLOCK	miner.h	707;"	d
GetReply	driver-klondike.c	/^static KLIST *GetReply(struct cgpu_info *klncgpu, uint8_t cmd, uint8_t dev)$/;"	f	file:
HASHFAST_H	driver-hashfast.h	12;"	d
HASHFAST_MINER_THREADS	driver-hashfast.h	24;"	d
HASHFAST_TIMEOUT_MS	usbutils.c	68;"	d	file:
HASHFAST_TIMEOUT_MS	usbutils.c	81;"	d	file:
HASH_ADD	uthash.h	160;"	d
HASH_ADD_INT	uthash.h	260;"	d
HASH_ADD_KEYPTR	uthash.h	173;"	d
HASH_ADD_PTR	uthash.h	266;"	d
HASH_ADD_STR	uthash.h	254;"	d
HASH_ADD_TO_BKT	uthash.h	611;"	d
HASH_BER	uthash.h	355;"	d
HASH_BKT_CAPACITY_THRESH	uthash.h	89;"	d
HASH_BLOOM_ADD	uthash.h	127;"	d
HASH_BLOOM_ADD	uthash.h	136;"	d
HASH_BLOOM_BITLEN	uthash.h	108;"	d
HASH_BLOOM_BITSET	uthash.h	124;"	d
HASH_BLOOM_BITTEST	uthash.h	125;"	d
HASH_BLOOM_BYTELEN	uthash.h	109;"	d
HASH_BLOOM_BYTELEN	uthash.h	138;"	d
HASH_BLOOM_FREE	uthash.h	119;"	d
HASH_BLOOM_FREE	uthash.h	135;"	d
HASH_BLOOM_MAKE	uthash.h	110;"	d
HASH_BLOOM_MAKE	uthash.h	134;"	d
HASH_BLOOM_SIGNATURE	uthash.h	902;"	d
HASH_BLOOM_TEST	uthash.h	130;"	d
HASH_BLOOM_TEST	uthash.h	137;"	d
HASH_CLEAR	uthash.h	849;"	d
HASH_CNT	uthash.h	878;"	d
HASH_COUNT	uthash.h	877;"	d
HASH_DEL	uthash.h	270;"	d
HASH_DELETE	uthash.h	215;"	d
HASH_DEL_IN_BKT	uthash.h	625;"	d
HASH_EMIT_KEY	uthash.h	337;"	d
HASH_EMIT_KEY	uthash.h	344;"	d
HASH_EXPAND_BUCKETS	uthash.h	666;"	d
HASH_FCN	uthash.h	349;"	d
HASH_FCN	uthash.h	351;"	d
HASH_FIND	uthash.h	94;"	d
HASH_FIND_INT	uthash.h	258;"	d
HASH_FIND_IN_BKT	uthash.h	597;"	d
HASH_FIND_PTR	uthash.h	264;"	d
HASH_FIND_STR	uthash.h	252;"	d
HASH_FNV	uthash.h	377;"	d
HASH_FSCK	uthash.h	278;"	d
HASH_FSCK	uthash.h	330;"	d
HASH_INITIAL_NUM_BUCKETS	uthash.h	87;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	uthash.h	88;"	d
HASH_ITER	uthash.h	867;"	d
HASH_ITER	uthash.h	871;"	d
HASH_JEN	uthash.h	416;"	d
HASH_JEN_MIX	uthash.h	403;"	d
HASH_KEYCMP	uthash.h	594;"	d
HASH_MAKE_TABLE	uthash.h	141;"	d
HASH_MUR	uthash.h	554;"	d
HASH_OAT	uthash.h	387;"	d
HASH_OOPS	uthash.h	277;"	d
HASH_OVERHEAD	uthash.h	860;"	d
HASH_REPLACE	uthash.h	163;"	d
HASH_REPLACE_INT	uthash.h	262;"	d
HASH_REPLACE_PTR	uthash.h	268;"	d
HASH_REPLACE_STR	uthash.h	256;"	d
HASH_SAX	uthash.h	367;"	d
HASH_SELECT	uthash.h	811;"	d
HASH_SFH	uthash.h	468;"	d
HASH_SIGNATURE	uthash.h	901;"	d
HASH_SORT	uthash.h	718;"	d
HASH_SRT	uthash.h	719;"	d
HASH_TO_BKT	uthash.h	198;"	d
HAVE_ALLOCA	config.h	58;"	d
HAVE_ALLOCA_H	config.h	62;"	d
HAVE_AN_ASIC	api.c	29;"	d	file:
HAVE_AN_FPGA	api.c	33;"	d	file:
HAVE_ATTRIBUTE_COLD	config.h	65;"	d
HAVE_ATTRIBUTE_CONST	config.h	68;"	d
HAVE_ATTRIBUTE_NORETURN	config.h	71;"	d
HAVE_ATTRIBUTE_PRINTF	config.h	74;"	d
HAVE_ATTRIBUTE_UNUSED	config.h	77;"	d
HAVE_ATTRIBUTE_USED	config.h	80;"	d
HAVE_BUILTIN_CONSTANT_P	config.h	86;"	d
HAVE_BUILTIN_TYPES_COMPATIBLE_P	config.h	89;"	d
HAVE_DECL_MEMMEM	config.h	96;"	d
HAVE_DLFCN_H	config.h	99;"	d
HAVE_INTTYPES_H	config.h	102;"	d
HAVE_LIBCURL	config.h	105;"	d
HAVE_LIBPTHREAD	config.h	108;"	d
HAVE_LONG_LONG_INT	config.h	117;"	d
HAVE_MAP_ANONYMOUS	config.h	121;"	d
HAVE_MEMMEM	config.h	124;"	d
HAVE_MEMORY_H	config.h	127;"	d
HAVE_MPROTECT	config.h	130;"	d
HAVE_RAW_DECL_MEMMEM	config.h	133;"	d
HAVE_RAW_DECL_MEMPCPY	config.h	136;"	d
HAVE_RAW_DECL_MEMRCHR	config.h	139;"	d
HAVE_RAW_DECL_RAWMEMCHR	config.h	142;"	d
HAVE_RAW_DECL_SIGACTION	config.h	145;"	d
HAVE_RAW_DECL_SIGADDSET	config.h	148;"	d
HAVE_RAW_DECL_SIGDELSET	config.h	151;"	d
HAVE_RAW_DECL_SIGEMPTYSET	config.h	154;"	d
HAVE_RAW_DECL_SIGFILLSET	config.h	157;"	d
HAVE_RAW_DECL_SIGISMEMBER	config.h	160;"	d
HAVE_RAW_DECL_SIGPENDING	config.h	163;"	d
HAVE_RAW_DECL_SIGPROCMASK	config.h	166;"	d
HAVE_RAW_DECL_STPCPY	config.h	169;"	d
HAVE_RAW_DECL_STPNCPY	config.h	172;"	d
HAVE_RAW_DECL_STRCASESTR	config.h	175;"	d
HAVE_RAW_DECL_STRCHRNUL	config.h	178;"	d
HAVE_RAW_DECL_STRDUP	config.h	181;"	d
HAVE_RAW_DECL_STRERROR_R	config.h	184;"	d
HAVE_RAW_DECL_STRNCAT	config.h	187;"	d
HAVE_RAW_DECL_STRNDUP	config.h	190;"	d
HAVE_RAW_DECL_STRNLEN	config.h	193;"	d
HAVE_RAW_DECL_STRPBRK	config.h	196;"	d
HAVE_RAW_DECL_STRSEP	config.h	199;"	d
HAVE_RAW_DECL_STRSIGNAL	config.h	202;"	d
HAVE_RAW_DECL_STRTOK_R	config.h	205;"	d
HAVE_RAW_DECL_STRVERSCMP	config.h	208;"	d
HAVE_SIGACTION	config.h	211;"	d
HAVE_SIGALTSTACK	config.h	214;"	d
HAVE_SIGINTERRUPT	config.h	220;"	d
HAVE_STDINT_H	config.h	235;"	d
HAVE_STDLIB_H	config.h	238;"	d
HAVE_STRINGS_H	config.h	241;"	d
HAVE_STRING_H	config.h	244;"	d
HAVE_STRUCT_SIGACTION_SA_SIGACTION	config.h	247;"	d
HAVE_SYSLOG_H	config.h	250;"	d
HAVE_SYS_MMAN_H	config.h	259;"	d
HAVE_SYS_STAT_H	config.h	262;"	d
HAVE_SYS_TYPES_H	config.h	265;"	d
HAVE_UNISTD_H	config.h	268;"	d
HAVE_UNSIGNED_LONG_LONG_INT	config.h	271;"	d
HAVE_WARN_UNUSED_RESULT	config.h	274;"	d
HAVE_WCHAR_H	config.h	277;"	d
HAVE_WCHAR_T	config.h	280;"	d
HEADER	driver-klondike.c	/^} HEADER;$/;"	t	typeref:struct:klondike_header	file:
HFD_ExpressAGX	hf_protocol.h	65;"	d
HFD_G1	hf_protocol.h	63;"	d
HFD_VC709	hf_protocol.h	64;"	d
HF_BROADCAST_ADDRESS	hf_protocol.h	20;"	d
HF_GWQ_ADDRESS	hf_protocol.h	21;"	d
HF_NONCE_SEARCH	hf_protocol.h	88;"	d
HF_NTIME_MASK	hf_protocol.h	87;"	d
HF_PREAMBLE	hf_protocol.h	19;"	d
HF_PROTOCOL_VERSION	hf_protocol.h	17;"	d
HF_SEQUENCE_DISTANCE	hf_protocol.h	52;"	d
HF_USB_CMD	driver-hashfast.c	98;"	d	file:
HF_USB_CMD_OFFSET	driver-hashfast.c	97;"	d	file:
HF_USB_PRODUCT_ID_G1	hf_protocol.h	84;"	d
HF_USB_VENDOR_ID	hf_protocol.h	83;"	d
HISTORY_SEC	driver-icarus.c	143;"	d	file:
HW_ERR_LIMIT	driver-knc-spi-fpga.c	37;"	d	file:
Hs	driver-icarus.c	/^	double Hs;$/;"	m	struct:ICARUS_INFO	file:
ICARUS_CMR2_CHECK	driver-icarus.c	246;"	d	file:
ICARUS_CMR2_CMD_FLASH	driver-icarus.c	243;"	d	file:
ICARUS_CMR2_CMD_SPEED	driver-icarus.c	242;"	d	file:
ICARUS_CMR2_DATA_FLASH_OFF	driver-icarus.c	244;"	d	file:
ICARUS_CMR2_DATA_FLASH_ON	driver-icarus.c	245;"	d	file:
ICARUS_CMR2_PREFIX	driver-icarus.c	241;"	d	file:
ICARUS_CMR2_SPEED_DEC	driver-icarus.c	238;"	d	file:
ICARUS_CMR2_SPEED_DEF	driver-icarus.c	235;"	d	file:
ICARUS_CMR2_SPEED_DEF_INT	driver-icarus.c	231;"	d	file:
ICARUS_CMR2_SPEED_FACTOR	driver-icarus.c	229;"	d	file:
ICARUS_CMR2_SPEED_FAIL	driver-icarus.c	239;"	d	file:
ICARUS_CMR2_SPEED_INC	driver-icarus.c	237;"	d	file:
ICARUS_CMR2_SPEED_MAX	driver-icarus.c	236;"	d	file:
ICARUS_CMR2_SPEED_MAX_INT	driver-icarus.c	232;"	d	file:
ICARUS_CMR2_SPEED_MIN	driver-icarus.c	234;"	d	file:
ICARUS_CMR2_SPEED_MIN_INT	driver-icarus.c	230;"	d	file:
ICARUS_CMR2_TIMEOUT	driver-icarus.c	73;"	d	file:
ICARUS_HISTORY	driver-icarus.c	/^struct ICARUS_HISTORY {$/;"	s	file:
ICARUS_INFO	driver-icarus.c	/^struct ICARUS_INFO {$/;"	s	file:
ICARUS_IO_SPEED	driver-icarus.c	53;"	d	file:
ICARUS_MIDSTATE_SIZE	driver-icarus.c	223;"	d	file:
ICARUS_READ_COUNT_MIN	driver-icarus.c	86;"	d	file:
ICARUS_READ_COUNT_TIMING	driver-icarus.c	85;"	d	file:
ICARUS_READ_REDUCE	driver-icarus.c	90;"	d	file:
ICARUS_READ_SIZE	driver-icarus.c	56;"	d	file:
ICARUS_READ_TIME	driver-icarus.c	69;"	d	file:
ICARUS_READ_TIME_LIMIT_MAX	driver-icarus.c	81;"	d	file:
ICARUS_REV3_HASH_TIME	driver-icarus.c	98;"	d	file:
ICARUS_TIMEOUT_MS	usbutils.c	60;"	d	file:
ICARUS_UNUSED_SIZE	driver-icarus.c	224;"	d	file:
ICARUS_WAIT_TIMEOUT	driver-icarus.c	72;"	d	file:
ICARUS_WORK	driver-icarus.c	/^struct ICARUS_WORK {$/;"	s	file:
ICARUS_WORK_DATA_OFFSET	driver-icarus.c	227;"	d	file:
ICARUS_WORK_SIZE	driver-icarus.c	225;"	d	file:
ICA_NONCE_ERROR	driver-icarus.c	456;"	d	file:
ICA_NONCE_OK	driver-icarus.c	457;"	d	file:
ICA_NONCE_RESTART	driver-icarus.c	458;"	d	file:
ICA_NONCE_TIMEOUT	driver-icarus.c	459;"	d	file:
IDENTITY	driver-klondike.c	/^} IDENTITY;$/;"	t	typeref:struct:klondike_id	file:
IDENT_AMU	usbutils.h	/^	IDENT_AMU,$/;"	e	enum:sub_ident
IDENT_AVA	usbutils.h	/^	IDENT_AVA,$/;"	e	enum:sub_ident
IDENT_BAJ	usbutils.h	/^	IDENT_BAJ,$/;"	e	enum:sub_ident
IDENT_BAL	usbutils.h	/^	IDENT_BAL,$/;"	e	enum:sub_ident
IDENT_BAM	usbutils.h	/^	IDENT_BAM,$/;"	e	enum:sub_ident
IDENT_BAS	usbutils.h	/^	IDENT_BAS,$/;"	e	enum:sub_ident
IDENT_BBF	usbutils.h	/^	IDENT_BBF,$/;"	e	enum:sub_ident
IDENT_BF1	usbutils.h	/^	IDENT_BF1,$/;"	e	enum:sub_ident
IDENT_BFL	usbutils.h	/^	IDENT_BFL,$/;"	e	enum:sub_ident
IDENT_BLT	usbutils.h	/^	IDENT_BLT,$/;"	e	enum:sub_ident
IDENT_BTB	usbutils.h	/^	IDENT_BTB,$/;"	e	enum:sub_ident
IDENT_BXF	usbutils.h	/^	IDENT_BXF,$/;"	e	enum:sub_ident
IDENT_CMR1	usbutils.h	/^	IDENT_CMR1,$/;"	e	enum:sub_ident
IDENT_CMR2	usbutils.h	/^	IDENT_CMR2,$/;"	e	enum:sub_ident
IDENT_GSD	usbutils.h	/^	IDENT_GSD,$/;"	e	enum:sub_ident
IDENT_GSD1	usbutils.h	/^	IDENT_GSD1,$/;"	e	enum:sub_ident
IDENT_GSD2	usbutils.h	/^	IDENT_GSD2$/;"	e	enum:sub_ident
IDENT_HFA	usbutils.h	/^	IDENT_HFA,$/;"	e	enum:sub_ident
IDENT_ICA	usbutils.h	/^	IDENT_ICA,$/;"	e	enum:sub_ident
IDENT_KLN	usbutils.h	/^	IDENT_KLN,$/;"	e	enum:sub_ident
IDENT_LLT	usbutils.h	/^	IDENT_LLT,$/;"	e	enum:sub_ident
IDENT_MMQ	usbutils.h	/^	IDENT_MMQ,$/;"	e	enum:sub_ident
IDENT_UNK	usbutils.h	/^	IDENT_UNK = 0,$/;"	e	enum:sub_ident
IDENT_ZTX	usbutils.h	/^	IDENT_ZTX,$/;"	e	enum:sub_ident
IDVENDOR_FTDI	usbutils.c	318;"	d	file:
INCLUDE_DRIVER_GRIDSEED_H	driver-gridseed.h	2;"	d
INFO_HISTORY	driver-icarus.c	155;"	d	file:
INIT	api.c	/^static const char *INIT = "Initialising";$/;"	v	file:
INITLOCK	miner.h	701;"	d
INITLOCK	miner.h	708;"	d
INIT_LIST_HEAD	elist.h	23;"	d
INTERRUPT	usbutils.c	/^static const char *INTERRUPT = "Interrupt";$/;"	v	file:
INTINFO	usbutils.c	320;"	d	file:
INVINETADDR	util.h	15;"	d
INVINETADDR	util.h	34;"	d
INVSOCK	api-example.c	36;"	d	file:
INVSOCK	api-example.c	49;"	d	file:
INVSOCK	util.h	14;"	d
INVSOCK	util.h	33;"	d
IN_FMT_FFL	logging.h	33;"	d
IOERR_CHECK	usbutils.c	583;"	d	file:
IP4ACCESS	api.c	/^struct IP4ACCESS {$/;"	s	file:
ISJSON	api.c	/^static const char ISJSON = '{';$/;"	v	file:
ISOCHRONOUS_A_D	usbutils.c	/^static const char *ISOCHRONOUS_A_D = "Isochronous+Async+Data";$/;"	v	file:
ISOCHRONOUS_A_F	usbutils.c	/^static const char *ISOCHRONOUS_A_F = "Isochronous+Async+Feedback";$/;"	v	file:
ISOCHRONOUS_A_I	usbutils.c	/^static const char *ISOCHRONOUS_A_I = "Isochronous+Async+Implicit";$/;"	v	file:
ISOCHRONOUS_A_X	usbutils.c	/^static const char *ISOCHRONOUS_A_X = "Isochronous+Async+?";$/;"	v	file:
ISOCHRONOUS_D_D	usbutils.c	/^static const char *ISOCHRONOUS_D_D = "Isochronous+Adaptive+Data";$/;"	v	file:
ISOCHRONOUS_D_F	usbutils.c	/^static const char *ISOCHRONOUS_D_F = "Isochronous+Adaptive+Feedback";$/;"	v	file:
ISOCHRONOUS_D_I	usbutils.c	/^static const char *ISOCHRONOUS_D_I = "Isochronous+Adaptive+Implicit";$/;"	v	file:
ISOCHRONOUS_D_X	usbutils.c	/^static const char *ISOCHRONOUS_D_X = "Isochronous+Adaptive+?";$/;"	v	file:
ISOCHRONOUS_N_D	usbutils.c	/^static const char *ISOCHRONOUS_N_D = "Isochronous+None+Data";$/;"	v	file:
ISOCHRONOUS_N_F	usbutils.c	/^static const char *ISOCHRONOUS_N_F = "Isochronous+None+Feedback";$/;"	v	file:
ISOCHRONOUS_N_I	usbutils.c	/^static const char *ISOCHRONOUS_N_I = "Isochronous+None+Implicit";$/;"	v	file:
ISOCHRONOUS_N_X	usbutils.c	/^static const char *ISOCHRONOUS_N_X = "Isochronous+None+?";$/;"	v	file:
ISOCHRONOUS_S_D	usbutils.c	/^static const char *ISOCHRONOUS_S_D = "Isochronous+Sync+Data";$/;"	v	file:
ISOCHRONOUS_S_F	usbutils.c	/^static const char *ISOCHRONOUS_S_F = "Isochronous+Sync+Feedback";$/;"	v	file:
ISOCHRONOUS_S_I	usbutils.c	/^static const char *ISOCHRONOUS_S_I = "Isochronous+Sync+Implicit";$/;"	v	file:
ISOCHRONOUS_S_X	usbutils.c	/^static const char *ISOCHRONOUS_S_X = "Isochronous+Sync+?";$/;"	v	file:
ISOCHRONOUS_X	usbutils.c	/^static const char *ISOCHRONOUS_X = "Isochronous+?";$/;"	v	file:
ISPRIVGROUP	api.c	592;"	d	file:
ISSETC	fpgautils.c	253;"	d	file:
ISSETI	fpgautils.c	236;"	d	file:
ISSETL	fpgautils.c	268;"	d	file:
ISSETO	fpgautils.c	244;"	d	file:
ITS_DEAD_JIM	driver-modminer.c	40;"	d	file:
JE	cgminer.c	/^static struct JE {$/;"	s	file:
JOBQUE	driver-klondike.c	/^} JOBQUE;$/;"	t	typeref:struct:jobque	file:
JSON0	api.c	236;"	d	file:
JSON1	api.c	237;"	d	file:
JSON2	api.c	238;"	d	file:
JSON3	api.c	239;"	d	file:
JSON4	api.c	240;"	d	file:
JSON4_TRUNCATED	api.c	242;"	d	file:
JSON5	api.c	243;"	d	file:
JSON_ASC	api.c	258;"	d	file:
JSON_ASCS	api.c	262;"	d	file:
JSON_BYE	api.c	265;"	d	file:
JSON_CHECK	api.c	269;"	d	file:
JSON_CLOSE	api.c	267;"	d	file:
JSON_COMMAND	api.c	/^static const char *JSON_COMMAND = "command";$/;"	v	file:
JSON_DEBUGSET	api.c	271;"	d	file:
JSON_DEVDETAILS	api.c	264;"	d	file:
JSON_DEVS	api.c	246;"	d	file:
JSON_END	api.c	274;"	d	file:
JSON_END_TRUNCATED	api.c	275;"	d	file:
JSON_INCLUDE_CONF	cgminer.c	308;"	d	file:
JSON_LOADS	util.h	58;"	d
JSON_LOADS	util.h	60;"	d
JSON_LOAD_ERROR	cgminer.c	309;"	d	file:
JSON_LOAD_ERROR_LEN	cgminer.c	310;"	d	file:
JSON_MAX_DEPTH	cgminer.c	311;"	d	file:
JSON_MAX_DEPTH_ERR	cgminer.c	312;"	d	file:
JSON_MINECOIN	api.c	270;"	d	file:
JSON_MINECONFIG	api.c	251;"	d	file:
JSON_MINESTATS	api.c	268;"	d	file:
JSON_NOTIFY	api.c	263;"	d	file:
JSON_PARAMETER	api.c	/^static const char *JSON_PARAMETER = "parameter";$/;"	v	file:
JSON_PGA	api.c	254;"	d	file:
JSON_PGAS	api.c	261;"	d	file:
JSON_POOLS	api.c	247;"	d	file:
JSON_RESTART	api.c	266;"	d	file:
JSON_SETCONFIG	api.c	272;"	d	file:
JSON_START	api.c	245;"	d	file:
JSON_STATUS	api.c	249;"	d	file:
JSON_SUMMARY	api.c	248;"	d	file:
JSON_USBSTATS	api.c	273;"	d	file:
JSON_VERSION	api.c	250;"	d	file:
JUMPTABLE	usbutils.h	267;"	d
K1	driver-klondike.c	32;"	d	file:
K16	driver-klondike.c	33;"	d	file:
K64	driver-klondike.c	34;"	d	file:
KLINE	driver-klondike.c	/^} KLINE;$/;"	t	typeref:struct:kline	file:
KLIST	driver-klondike.c	/^} KLIST;$/;"	t	typeref:struct:klist	file:
KLN_CMD_ABORT	driver-klondike.c	41;"	d	file:
KLN_CMD_CONFIG	driver-klondike.c	42;"	d	file:
KLN_CMD_ENABLE	driver-klondike.c	43;"	d	file:
KLN_CMD_ENABLE_OFF	driver-klondike.c	49;"	d	file:
KLN_CMD_ENABLE_ON	driver-klondike.c	50;"	d	file:
KLN_CMD_IDENT	driver-klondike.c	44;"	d	file:
KLN_CMD_NONCE	driver-klondike.c	45;"	d	file:
KLN_CMD_STATUS	driver-klondike.c	46;"	d	file:
KLN_CMD_WORK	driver-klondike.c	47;"	d	file:
KLN_COOLED_DOWN	driver-klondike.c	64;"	d	file:
KLN_ISS_IGNORE	driver-klondike.c	80;"	d	file:
KLN_KILLWORK_TEMP	driver-klondike.c	63;"	d	file:
KLONDIKE_TIMEOUT_MS	usbutils.c	67;"	d	file:
KLONDIKE_TIMEOUT_MS	usbutils.c	80;"	d	file:
KNAME_RANGE	driver-bitforce.c	66;"	d	file:
KNAME_WORK	driver-bitforce.c	65;"	d	file:
KNC_ACTIVE_BUFFER_SIZE	driver-knc-spi-fpga.c	159;"	d	file:
KNC_DISA_CORES_SIZE	driver-knc-spi-fpga.c	166;"	d	file:
KNC_QUEUED_BUFFER_SIZE	driver-knc-spi-fpga.c	155;"	d	file:
KSENDHD	driver-klondike.c	124;"	d	file:
K_2	driver-klondike.c	105;"	d	file:
K_4	driver-klondike.c	108;"	d	file:
K_HASHCLOCK	driver-klondike.c	117;"	d	file:
K_HASHCOUNT	driver-klondike.c	114;"	d	file:
K_MAXCOUNT	driver-klondike.c	115;"	d	file:
K_NONCE	driver-klondike.c	116;"	d	file:
K_SERIAL	driver-klondike.c	113;"	d	file:
LANCELOT_HASH_TIME	driver-icarus.c	99;"	d	file:
LATENCY_STD	usbutils.h	181;"	d
LATENCY_UNUSED	usbutils.h	180;"	d
LATE_UPDATE_LIMIT	driver-klondike.c	89;"	d	file:
LATE_UPDATE_MS	driver-klondike.c	86;"	d	file:
LATE_UPDATE_NODEV_MS	driver-klondike.c	95;"	d	file:
LATE_UPDATE_SLEEP_MS	driver-klondike.c	92;"	d	file:
LFSTR	driver-bflsc.h	14;"	d
LIFE_DEAD	miner.h	/^	LIFE_DEAD,$/;"	e	enum:alive
LIFE_INIT	miner.h	/^	LIFE_INIT,$/;"	e	enum:alive
LIFE_NOSTART	miner.h	/^	LIFE_NOSTART,$/;"	e	enum:alive
LIFE_SICK	miner.h	/^	LIFE_SICK,$/;"	e	enum:alive
LIFE_WELL	miner.h	/^	LIFE_WELL,$/;"	e	enum:alive
LINUX	miner.h	87;"	d
LIST_HEAD	elist.h	20;"	d
LIST_HEAD_INIT	elist.h	18;"	d
LOCKINFO	api.c	/^} LOCKINFO;$/;"	t	typeref:struct:lockinfo	file:
LOCKLINE	api.c	/^} LOCKLINE;$/;"	t	typeref:struct:lockline	file:
LOCKLIST	api.c	/^} LOCKLIST;$/;"	t	typeref:struct:locklist	file:
LOCKMSG	api.c	1386;"	d	file:
LOCKMSGFFL	api.c	1388;"	d	file:
LOCKMSGFLUSH	api.c	1389;"	d	file:
LOCKMSGMORE	api.c	1387;"	d	file:
LOCKSTAT	api.c	/^} LOCKSTAT;$/;"	t	typeref:struct:lockstat	file:
LOCK_FMT_FFL	api.c	1384;"	d	file:
LOCK_TRACKING	miner.h	680;"	d
LOGBUFSIZ	logging.h	29;"	d
LOG_DEBUG	logging.h	/^	LOG_DEBUG,$/;"	e	enum:__anon6
LOG_ERR	logging.h	/^	LOG_ERR,$/;"	e	enum:__anon6
LOG_INFO	logging.h	/^	LOG_INFO,$/;"	e	enum:__anon6
LOG_NOTICE	logging.h	/^	LOG_NOTICE,$/;"	e	enum:__anon6
LOG_WARNING	logging.h	/^	LOG_WARNING,$/;"	e	enum:__anon6
LT_OBJDIR	config.h	284;"	d
MAJ	sha2.h	47;"	d
MAX	miner.h	222;"	d
MAX_ACTIVE_WORKS	driver-knc-spi-fpga.c	40;"	d	file:
MAX_ASICS	driver-knc-spi-fpga.c	34;"	d	file:
MAX_BLISTS	driver-bab.c	233;"	d	file:
MAX_BYTES_IN_SPI_XSFER	driver-knc-spi-fpga.c	26;"	d	file:
MAX_DEVICES	miner.h	1039;"	d
MAX_KLINES	driver-klondike.c	57;"	d	file:
MAX_MIN_DATA_COUNT	driver-icarus.c	147;"	d	file:
MAX_REQUESTS_IN_BATCH	driver-knc-spi-fpga.c	100;"	d	file:
MAX_RESPONSES_IN_BATCH	driver-knc-spi-fpga.c	106;"	d	file:
MAX_RLISTS	driver-bab.c	242;"	d	file:
MAX_SPIS	driver-knc-spi-fpga.c	25;"	d	file:
MAX_START_DELAY_MS	driver-bitforce.c	61;"	d	file:
MAX_WORK_COUNT	driver-klondike.c	60;"	d	file:
MERKLE_BYTES	driver-bab.c	141;"	d	file:
MERKLE_BYTES	driver-bflsc.h	163;"	d
MERKLE_BYTES	driver-klondike.c	54;"	d	file:
MERKLE_OFFSET	driver-bab.c	140;"	d	file:
MERKLE_OFFSET	driver-bflsc.h	162;"	d
MERKLE_OFFSET	driver-klondike.c	53;"	d	file:
MIDSTATE_BYTES	driver-bab.c	139;"	d	file:
MIDSTATE_BYTES	driver-bflsc.h	161;"	d
MIDSTATE_BYTES	driver-klondike.c	52;"	d	file:
MIDSTATE_UINTS	driver-bab.c	144;"	d	file:
MIN	miner.h	219;"	d
MIN_DATA_COUNT	driver-icarus.c	145;"	d	file:
MIN_SEC_UNSET	miner.h	378;"	d
MODE_BULK_READ	usbutils.c	660;"	d	file:
MODE_BULK_READ_STR	usbutils.c	674;"	d	file:
MODE_BULK_WRITE	usbutils.c	661;"	d	file:
MODE_BULK_WRITE_STR	usbutils.c	675;"	d	file:
MODE_CTRL_READ	usbutils.c	658;"	d	file:
MODE_CTRL_READ_STR	usbutils.c	672;"	d	file:
MODE_CTRL_WRITE	usbutils.c	659;"	d	file:
MODE_CTRL_WRITE_STR	usbutils.c	673;"	d	file:
MODE_DEFAULT	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_DEFAULT_STR	driver-icarus.c	/^static const char *MODE_DEFAULT_STR = "default";$/;"	v	file:
MODE_LONG	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_LONG_STR	driver-icarus.c	/^static const char *MODE_LONG_STR = "long";$/;"	v	file:
MODE_LONG_STREQ	driver-icarus.c	/^static const char *MODE_LONG_STREQ = "long=";$/;"	v	file:
MODE_NONE	usbutils.c	657;"	d	file:
MODE_NONE_STR	usbutils.c	671;"	d	file:
MODE_SEP_STR	usbutils.c	670;"	d	file:
MODE_SHORT	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_SHORT_STR	driver-icarus.c	/^static const char *MODE_SHORT_STR = "short";$/;"	v	file:
MODE_SHORT_STREQ	driver-icarus.c	/^static const char *MODE_SHORT_STREQ = "short=";$/;"	v	file:
MODE_UNKNOWN_STR	driver-icarus.c	/^static const char *MODE_UNKNOWN_STR = "unknown";$/;"	v	file:
MODE_VALUE	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_VALUE_STR	driver-icarus.c	/^static const char *MODE_VALUE_STR = "value";$/;"	v	file:
MODMINER_CHECK_WORK	driver-modminer.c	67;"	d	file:
MODMINER_CLOCK_CUTOFF	driver-modminer.c	54;"	d	file:
MODMINER_CLOCK_DEAD	driver-modminer.c	53;"	d	file:
MODMINER_CLOCK_DOWN	driver-modminer.c	50;"	d	file:
MODMINER_CLOCK_OVERHEAT	driver-modminer.c	52;"	d	file:
MODMINER_CLOCK_SET	driver-modminer.c	49;"	d	file:
MODMINER_CLOCK_UP	driver-modminer.c	48;"	d	file:
MODMINER_CUTOFF_TEMP	driver-modminer.c	30;"	d	file:
MODMINER_DEF_CLOCK	driver-modminer.c	45;"	d	file:
MODMINER_EARLY_UP	driver-modminer.c	86;"	d	file:
MODMINER_FPGA_COUNT	driver-modminer.c	59;"	d	file:
MODMINER_GET_IDCODE	driver-modminer.c	61;"	d	file:
MODMINER_GET_REG	driver-modminer.c	76;"	d	file:
MODMINER_GET_USERCODE	driver-modminer.c	62;"	d	file:
MODMINER_GET_VERSION	driver-modminer.c	58;"	d	file:
MODMINER_HW_ERROR_PERCENT	driver-modminer.c	35;"	d	file:
MODMINER_MAX_CLOCK	driver-modminer.c	44;"	d	file:
MODMINER_MIN_BACK	driver-modminer.c	88;"	d	file:
MODMINER_MIN_CLOCK	driver-modminer.c	46;"	d	file:
MODMINER_OVERHEAT_TEMP	driver-modminer.c	31;"	d	file:
MODMINER_PING	driver-modminer.c	57;"	d	file:
MODMINER_PROGRAM	driver-modminer.c	63;"	d	file:
MODMINER_READ_CLOCK	driver-modminer.c	65;"	d	file:
MODMINER_RECOVER_TEMP	driver-modminer.c	32;"	d	file:
MODMINER_SEND_WORK	driver-modminer.c	66;"	d	file:
MODMINER_SET_CLOCK	driver-modminer.c	64;"	d	file:
MODMINER_SET_REG	driver-modminer.c	74;"	d	file:
MODMINER_TEMP1	driver-modminer.c	69;"	d	file:
MODMINER_TEMP2	driver-modminer.c	71;"	d	file:
MODMINER_TEMP_UP_LIMIT	driver-modminer.c	33;"	d	file:
MODMINER_TIMEOUT_MS	usbutils.c	65;"	d	file:
MODMINER_TIMEOUT_MS	usbutils.c	78;"	d	file:
MODMINER_TRY_UP	driver-modminer.c	82;"	d	file:
MSG_ACCDENY	api.c	301;"	d	file:
MSG_ACCOK	api.c	302;"	d	file:
MSG_ACTPOOL	api.c	331;"	d	file:
MSG_ADDPOOL	api.c	311;"	d	file:
MSG_ALRDISP	api.c	306;"	d	file:
MSG_ALRENAP	api.c	305;"	d	file:
MSG_ASCDEV	api.c	376;"	d	file:
MSG_ASCDIS	api.c	381;"	d	file:
MSG_ASCENA	api.c	380;"	d	file:
MSG_ASCHELP	api.c	391;"	d	file:
MSG_ASCIDENT	api.c	383;"	d	file:
MSG_ASCLRDIS	api.c	379;"	d	file:
MSG_ASCLRENA	api.c	378;"	d	file:
MSG_ASCNOID	api.c	384;"	d	file:
MSG_ASCNON	api.c	375;"	d	file:
MSG_ASCNOSET	api.c	390;"	d	file:
MSG_ASCSETERR	api.c	393;"	d	file:
MSG_ASCSETOK	api.c	392;"	d	file:
MSG_ASCUNW	api.c	382;"	d	file:
MSG_ASCUSBNODEV	api.c	386;"	d	file:
MSG_BADFN	api.c	299;"	d	file:
MSG_CHECK	api.c	336;"	d	file:
MSG_CONPAR	api.c	349;"	d	file:
MSG_CONVAL	api.c	350;"	d	file:
MSG_DEBUGSET	api.c	343;"	d	file:
MSG_DEVDETAILS	api.c	333;"	d	file:
MSG_DEVS	api.c	282;"	d	file:
MSG_DISHPLG	api.c	369;"	d	file:
MSG_DISLASTP	api.c	307;"	d	file:
MSG_DISPOOL	api.c	304;"	d	file:
MSG_DONTWAIT	miner.h	81;"	d
MSG_DUPPID	api.c	338;"	d	file:
MSG_ENAPOOL	api.c	303;"	d	file:
MSG_FOO	api.c	341;"	d	file:
MSG_HOTPLUG	api.c	368;"	d	file:
MSG_INVASC	api.c	377;"	d	file:
MSG_INVBOOL	api.c	340;"	d	file:
MSG_INVCMD	api.c	285;"	d	file:
MSG_INVHPLG	api.c	367;"	d	file:
MSG_INVINT	api.c	296;"	d	file:
MSG_INVJSON	api.c	289;"	d	file:
MSG_INVNEG	api.c	396;"	d	file:
MSG_INVNUM	api.c	348;"	d	file:
MSG_INVPDP	api.c	309;"	d	file:
MSG_INVPGA	api.c	316;"	d	file:
MSG_INVPID	api.c	292;"	d	file:
MSG_LOCKDIS	api.c	399;"	d	file:
MSG_LOCKOK	api.c	398;"	d	file:
MSG_MINECOIN	api.c	342;"	d	file:
MSG_MINECONFIG	api.c	297;"	d	file:
MSG_MINESTATS	api.c	334;"	d	file:
MSG_MISASCOPT	api.c	389;"	d	file:
MSG_MISBOOL	api.c	339;"	d	file:
MSG_MISCHK	api.c	335;"	d	file:
MSG_MISCMD	api.c	290;"	d	file:
MSG_MISFN	api.c	298;"	d	file:
MSG_MISHPLG	api.c	371;"	d	file:
MSG_MISID	api.c	286;"	d	file:
MSG_MISPDP	api.c	308;"	d	file:
MSG_MISPGAOPT	api.c	355;"	d	file:
MSG_MISPID	api.c	291;"	d	file:
MSG_MISVAL	api.c	294;"	d	file:
MSG_NOADL	api.c	295;"	d	file:
MSG_NODEVS	api.c	283;"	d	file:
MSG_NOHPLG	api.c	370;"	d	file:
MSG_NOPOOL	api.c	281;"	d	file:
MSG_NOTIFY	api.c	320;"	d	file:
MSG_NOUSTA	api.c	352;"	d	file:
MSG_NUMASC	api.c	373;"	d	file:
MSG_NUMPGA	api.c	319;"	d	file:
MSG_PGADEV	api.c	315;"	d	file:
MSG_PGADIS	api.c	326;"	d	file:
MSG_PGAENA	api.c	325;"	d	file:
MSG_PGAHELP	api.c	357;"	d	file:
MSG_PGAIDENT	api.c	344;"	d	file:
MSG_PGALRDIS	api.c	324;"	d	file:
MSG_PGALRENA	api.c	323;"	d	file:
MSG_PGANOID	api.c	345;"	d	file:
MSG_PGANON	api.c	314;"	d	file:
MSG_PGANOSET	api.c	356;"	d	file:
MSG_PGASETERR	api.c	359;"	d	file:
MSG_PGASETOK	api.c	358;"	d	file:
MSG_PGAUNW	api.c	327;"	d	file:
MSG_PGAUSBNODEV	api.c	366;"	d	file:
MSG_POOL	api.c	280;"	d	file:
MSG_POOLPRIO	api.c	337;"	d	file:
MSG_REMLASTP	api.c	330;"	d	file:
MSG_REMPOOL	api.c	332;"	d	file:
MSG_SAVED	api.c	300;"	d	file:
MSG_SETCONFIG	api.c	346;"	d	file:
MSG_SETQUOTA	api.c	397;"	d	file:
MSG_SUMM	api.c	284;"	d	file:
MSG_SWITCHP	api.c	293;"	d	file:
MSG_TOOMANYP	api.c	310;"	d	file:
MSG_UNKCON	api.c	347;"	d	file:
MSG_USBSTA	api.c	351;"	d	file:
MSG_VERSION	api.c	288;"	d	file:
MSG_ZERINV	api.c	363;"	d	file:
MSG_ZERMIS	api.c	362;"	d	file:
MSG_ZERNOSUM	api.c	365;"	d	file:
MSG_ZERSUM	api.c	364;"	d	file:
MUNAVAILABLE	api.c	/^static const char *MUNAVAILABLE = " - API multicast listener will not be available";$/;"	v	file:
MUR_FMIX	uthash.h	545;"	d
MUR_GETBLOCK	uthash.h	523;"	d
MUR_GETBLOCK	uthash.h	539;"	d
MUR_ONE_THREE	uthash.h	533;"	d
MUR_ONE_THREE	uthash.h	537;"	d
MUR_PLUS0_ALIGNED	uthash.h	525;"	d
MUR_PLUS1_ALIGNED	uthash.h	526;"	d
MUR_PLUS2_ALIGNED	uthash.h	527;"	d
MUR_PLUS3_ALIGNED	uthash.h	528;"	d
MUR_ROTL32	uthash.h	544;"	d
MUR_THREE_ONE	uthash.h	531;"	d
MUR_THREE_ONE	uthash.h	535;"	d
MUR_TWO_TWO	uthash.h	532;"	d
MUR_TWO_TWO	uthash.h	536;"	d
M_PHASE_CURRENT	hf_protocol.h	60;"	d
M_VOLTAGE	hf_protocol.h	59;"	d
NANOSEC	driver-icarus.c	105;"	d	file:
NO	api.c	/^static const char *NO = "N";$/;"	v	file:
NOCOLON	driver-bflsc.c	/^	NOCOLON,$/;"	e	enum:breakmode	file:
NOCONTROLDEV	usbutils.c	28;"	d	file:
NODEV	usbutils.c	26;"	d	file:
NONE	api.c	/^static __maybe_unused const char *NONE = "None";$/;"	v	file:
NOOP	driver-modminer.c	/^static const char NOOP[] = MODMINER_PING "\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff";$/;"	v	file:
NOPRIVGROUP	api.c	591;"	d	file:
NOSTART	api.c	/^static const char *NOSTART = "NoStart";$/;"	v	file:
NO_DECLTYPE	uthash.h	39;"	d
NULLSTR	api.c	/^static const char *NULLSTR = "(null)";$/;"	v	file:
OLD_WORK_MS	driver-klondike.c	72;"	d	file:
ONECOLON	driver-bflsc.c	/^	ONECOLON,$/;"	e	enum:breakmode	file:
ONLY	api-example.c	/^static int ONLY;$/;"	v	file:
OP_ABORT	hf_protocol.h	36;"	d
OP_ADDRESS	hf_protocol.h	28;"	d
OP_BAUD	hf_protocol.h	31;"	d
OP_CLOCKGATE	hf_protocol.h	42;"	d
OP_CONFIG	hf_protocol.h	39;"	d
OP_DFU	hf_protocol.h	72;"	d
OP_DIE_STATUS	hf_protocol.h	74;"	d
OP_GET_TRACE	hf_protocol.h	69;"	d
OP_GPIO	hf_protocol.h	38;"	d
OP_GROUP	hf_protocol.h	41;"	d
OP_GWQ_STATUS	hf_protocol.h	75;"	d
OP_HASH	hf_protocol.h	34;"	d
OP_HIGHEST	hf_protocol.h	30;"	d
OP_LOOPBACK_UART	hf_protocol.h	71;"	d
OP_LOOPBACK_USB	hf_protocol.h	70;"	d
OP_NONCE	hf_protocol.h	35;"	d
OP_NULL	hf_protocol.h	24;"	d
OP_PLL_CONFIG	hf_protocol.h	27;"	d
OP_READDRESS	hf_protocol.h	29;"	d
OP_RESET	hf_protocol.h	26;"	d
OP_ROOT	hf_protocol.h	25;"	d
OP_STATISTICS	hf_protocol.h	40;"	d
OP_STATUS	hf_protocol.h	37;"	d
OP_UNROOT	hf_protocol.h	32;"	d
OP_USB_DEBUG	hf_protocol.h	80;"	d
OP_USB_GWQSTATS	hf_protocol.h	78;"	d
OP_USB_INIT	hf_protocol.h	68;"	d
OP_USB_NOTICE	hf_protocol.h	79;"	d
OP_USB_SHUTDOWN	hf_protocol.h	73;"	d
OP_USB_STATS1	hf_protocol.h	77;"	d
OP_WORK_RESTART	hf_protocol.h	76;"	d
OSINFO	api.c	/^static const char *OSINFO =$/;"	v	file:
O_CLOEXEC	driver-avalon.c	30;"	d	file:
O_CLOEXEC	fpgautils.c	28;"	d	file:
PACK32	sha2.c	47;"	d	file:
PACKAGE	config.h	293;"	d
PACKAGE_BUGREPORT	config.h	296;"	d
PACKAGE_NAME	config.h	299;"	d
PACKAGE_STRING	config.h	302;"	d
PACKAGE_TARNAME	config.h	305;"	d
PACKAGE_URL	config.h	308;"	d
PACKAGE_VERSION	config.h	311;"	d
PARAM_ASC	api.c	/^	PARAM_ASC,$/;"	e	enum:code_parameters	file:
PARAM_ASCMAX	api.c	/^	PARAM_ASCMAX,$/;"	e	enum:code_parameters	file:
PARAM_BOOL	api.c	/^	PARAM_BOOL,$/;"	e	enum:code_parameters	file:
PARAM_BOTH	api.c	/^	PARAM_BOTH,$/;"	e	enum:code_parameters	file:
PARAM_CMD	api.c	/^	PARAM_CMD,$/;"	e	enum:code_parameters	file:
PARAM_DMAX	api.c	/^	PARAM_DMAX,$/;"	e	enum:code_parameters	file:
PARAM_INT	api.c	/^	PARAM_INT,$/;"	e	enum:code_parameters	file:
PARAM_NONE	api.c	/^	PARAM_NONE$/;"	e	enum:code_parameters	file:
PARAM_PGA	api.c	/^	PARAM_PGA,$/;"	e	enum:code_parameters	file:
PARAM_PGAMAX	api.c	/^	PARAM_PGAMAX,$/;"	e	enum:code_parameters	file:
PARAM_PID	api.c	/^	PARAM_PID,$/;"	e	enum:code_parameters	file:
PARAM_PMAX	api.c	/^	PARAM_PMAX,$/;"	e	enum:code_parameters	file:
PARAM_POOL	api.c	/^	PARAM_POOL,$/;"	e	enum:code_parameters	file:
PARAM_POOLMAX	api.c	/^	PARAM_POOLMAX,$/;"	e	enum:code_parameters	file:
PARAM_SET	api.c	/^	PARAM_SET,$/;"	e	enum:code_parameters	file:
PARAM_STR	api.c	/^	PARAM_STR,$/;"	e	enum:code_parameters	file:
PL2303_CTRL_DTR	usbutils.h	90;"	d
PL2303_CTRL_OUT	usbutils.h	93;"	d
PL2303_CTRL_RTS	usbutils.h	91;"	d
PL2303_REPLY_CTRL	usbutils.h	100;"	d
PL2303_REQUEST_CTRL	usbutils.h	96;"	d
PL2303_REQUEST_LINE	usbutils.h	97;"	d
PL2303_REQUEST_VENDOR	usbutils.h	98;"	d
PL2303_VALUE_CTRL	usbutils.h	102;"	d
PL2303_VALUE_LINE	usbutils.h	103;"	d
PL2303_VALUE_LINE0	usbutils.h	104;"	d
PL2303_VALUE_LINE1	usbutils.h	105;"	d
PL2303_VALUE_LINE_SIZE	usbutils.h	106;"	d
PL2303_VALUE_VENDOR	usbutils.h	107;"	d
PL2303_VENDOR_OUT	usbutils.h	94;"	d
POOL_BALANCE	miner.h	/^	POOL_BALANCE,$/;"	e	enum:pool_strategy
POOL_DISABLED	miner.h	/^	POOL_DISABLED,$/;"	e	enum:pool_enable
POOL_ENABLED	miner.h	/^	POOL_ENABLED,$/;"	e	enum:pool_enable
POOL_FAILOVER	miner.h	/^	POOL_FAILOVER,$/;"	e	enum:pool_strategy
POOL_LOADBALANCE	miner.h	/^	POOL_LOADBALANCE,$/;"	e	enum:pool_strategy
POOL_REJECTING	miner.h	/^	POOL_REJECTING,$/;"	e	enum:pool_enable
POOL_ROTATE	miner.h	/^	POOL_ROTATE,$/;"	e	enum:pool_strategy
POOL_ROUNDROBIN	miner.h	/^	POOL_ROUNDROBIN,$/;"	e	enum:pool_strategy
PRIO_PROCESS	compat.h	/^	PRIO_PROCESS		= 0,$/;"	e	enum:__anon5
PRIVGROUP	api.c	590;"	d	file:
PROTOCOL_GLOBAL_WORK_QUEUE	hf_protocol.h	56;"	d
PROTOCOL_USB_MAPPED_SERIAL	hf_protocol.h	55;"	d
PROXY_HTTP	util.c	519;"	d	file:
PROXY_HTTP	util.c	526;"	d	file:
PROXY_HTTP_1_0	util.c	520;"	d	file:
PROXY_HTTP_1_0	util.c	527;"	d	file:
PROXY_SOCKS4	util.c	521;"	d	file:
PROXY_SOCKS4	util.c	528;"	d	file:
PROXY_SOCKS4A	util.c	523;"	d	file:
PROXY_SOCKS4A	util.c	530;"	d	file:
PROXY_SOCKS5	util.c	522;"	d	file:
PROXY_SOCKS5	util.c	529;"	d	file:
PROXY_SOCKS5H	util.c	524;"	d	file:
PROXY_SOCKS5H	util.c	531;"	d	file:
PTH	compat.h	79;"	d
PTH	compat.h	81;"	d
PTH	compat.h	85;"	d
QUEUE	api.c	48;"	d	file:
QUE_BLOCKDATA	driver-bflsc.h	176;"	d
QUE_CHIP_V2	driver-bflsc.h	182;"	d
QUE_FLD_MAX_V1	driver-bflsc.h	180;"	d
QUE_FLD_MAX_V2	driver-bflsc.h	185;"	d
QUE_FLD_MIN_V1	driver-bflsc.h	179;"	d
QUE_FLD_MIN_V2	driver-bflsc.h	184;"	d
QUE_MAX_RESULTS	driver-bflsc.h	117;"	d
QUE_MIDSTATE	driver-bflsc.h	175;"	d
QUE_NONCECOUNT_V1	driver-bflsc.h	178;"	d
QUE_NONCECOUNT_V2	driver-bflsc.h	183;"	d
QUE_RES_LINES_MIN	driver-bflsc.h	174;"	d
QUIET	cgminer.c	188;"	d	file:
QueueJobPackStructure	driver-bflsc.h	/^struct QueueJobPackStructure {$/;"	s
QueueJobStructure	driver-bflsc.h	/^struct QueueJobStructure {$/;"	s
RBUFSIZE	miner.h	1108;"	d
READ_DEBUG	driver-klondike.c	404;"	d	file:
READ_NL	driver-bflsc.c	308;"	d	file:
READ_OK	driver-bflsc.c	307;"	d	file:
REASON_DEV_COMMS_ERROR	miner.h	/^	REASON_DEV_COMMS_ERROR,$/;"	e	enum:dev_reason
REASON_DEV_COMMS_ERROR_STR	miner.h	374;"	d
REASON_DEV_DEAD_IDLE_600	miner.h	/^	REASON_DEV_DEAD_IDLE_600,$/;"	e	enum:dev_reason
REASON_DEV_DEAD_IDLE_600_STR	miner.h	370;"	d
REASON_DEV_NOSTART	miner.h	/^	REASON_DEV_NOSTART,$/;"	e	enum:dev_reason
REASON_DEV_NOSTART_STR	miner.h	371;"	d
REASON_DEV_OVER_HEAT	miner.h	/^	REASON_DEV_OVER_HEAT,$/;"	e	enum:dev_reason
REASON_DEV_OVER_HEAT_STR	miner.h	372;"	d
REASON_DEV_SICK_IDLE_60	miner.h	/^	REASON_DEV_SICK_IDLE_60,$/;"	e	enum:dev_reason
REASON_DEV_SICK_IDLE_60_STR	miner.h	369;"	d
REASON_DEV_THERMAL_CUTOFF	miner.h	/^	REASON_DEV_THERMAL_CUTOFF,$/;"	e	enum:dev_reason
REASON_DEV_THERMAL_CUTOFF_STR	miner.h	373;"	d
REASON_DEV_THROTTLE	miner.h	/^	REASON_DEV_THROTTLE,$/;"	e	enum:dev_reason
REASON_DEV_THROTTLE_STR	miner.h	375;"	d
REASON_NONE	miner.h	365;"	d
REASON_THREAD_FAIL_INIT	miner.h	/^	REASON_THREAD_FAIL_INIT,$/;"	e	enum:dev_reason
REASON_THREAD_FAIL_INIT_STR	miner.h	366;"	d
REASON_THREAD_FAIL_QUEUE	miner.h	/^	REASON_THREAD_FAIL_QUEUE,$/;"	e	enum:dev_reason
REASON_THREAD_FAIL_QUEUE_STR	miner.h	368;"	d
REASON_THREAD_ZERO_HASH	miner.h	/^	REASON_THREAD_ZERO_HASH,$/;"	e	enum:dev_reason
REASON_THREAD_ZERO_HASH_STR	miner.h	367;"	d
REASON_UNKNOWN_STR	miner.h	376;"	d
RECVSIZE	miner.h	1109;"	d
REINIT_TIME_FIRST_MS	driver-bflsc.h	359;"	d
REINIT_TIME_FIRST_MS	driver-bitforce.c	72;"	d	file:
REINIT_TIME_MAX	driver-bflsc.h	363;"	d
REINIT_TIME_MAX	driver-bitforce.c	76;"	d	file:
REINIT_TIME_MAX_MS	driver-bflsc.h	361;"	d
REINIT_TIME_MAX_MS	driver-bitforce.c	74;"	d	file:
REJECTING	api.c	/^static const char *REJECTING = "Rejecting";$/;"	v	file:
REPLY_SIZE	driver-klondike.c	56;"	d	file:
REPLY_WAIT_TIME	driver-klondike.c	58;"	d	file:
RESPONSE_TYPE_NONCE_FOUND	driver-knc-spi-fpga.c	83;"	d	file:
RESPONSE_TYPE_NOP	driver-knc-spi-fpga.c	82;"	d	file:
RESPONSE_TYPE_WORK_DONE	driver-knc-spi-fpga.c	84;"	d	file:
RLIST	driver-bab.c	/^} RLIST;$/;"	t	typeref:struct:rlist	file:
ROTR	sha2.h	45;"	d
RenameThread	util.c	/^void RenameThread(const char* name)$/;"	f
SECTOMS	driver-icarus.c	87;"	d	file:
SECTOMS	usbutils.c	708;"	d	file:
SEND_INACTIVE	util.c	/^	SEND_INACTIVE$/;"	e	enum:send_ret	file:
SEND_OK	util.c	/^	SEND_OK,$/;"	e	enum:send_ret	file:
SEND_SELECTFAIL	util.c	/^	SEND_SELECTFAIL,$/;"	e	enum:send_ret	file:
SEND_SENDFAIL	util.c	/^	SEND_SENDFAIL,$/;"	e	enum:send_ret	file:
SEPARATOR	api-example.c	/^static const char SEPARATOR = '|';$/;"	v	file:
SEPARATOR	api.c	/^static const char SEPARATOR = '|';$/;"	v	file:
SEPSTR	api.c	132;"	d	file:
SEQ0	usbutils.c	653;"	d	file:
SEQ1	usbutils.c	654;"	d	file:
SET_HASHCLOCK	driver-klondike.c	119;"	d	file:
SEVERITY_ERR	api.c	/^	SEVERITY_ERR,$/;"	e	enum:code_severity	file:
SEVERITY_FAIL	api.c	/^	SEVERITY_FAIL$/;"	e	enum:code_severity	file:
SEVERITY_INFO	api.c	/^	SEVERITY_INFO,$/;"	e	enum:code_severity	file:
SEVERITY_SUCC	api.c	/^	SEVERITY_SUCC,$/;"	e	enum:code_severity	file:
SEVERITY_WARN	api.c	/^	SEVERITY_WARN,$/;"	e	enum:code_severity	file:
SHA256STR	api.c	/^static const char *SHA256STR = "sha256";$/;"	v	file:
SHA256_BLOCK_SIZE	sha2.h	42;"	d
SHA256_DIGEST_SIZE	sha2.h	41;"	d
SHA256_F1	sha2.h	49;"	d
SHA256_F2	sha2.h	50;"	d
SHA256_F3	sha2.h	51;"	d
SHA256_F4	sha2.h	52;"	d
SHA256_SCR	sha2.c	55;"	d	file:
SHA2_H	sha2.h	39;"	d
SHFR	sha2.h	44;"	d
SHUT_RDWR	api-example.c	138;"	d	file:
SHUT_RDWR	util.h	49;"	d
SICK	api.c	/^static const char *SICK = "Sick";$/;"	v	file:
SOCKBUFSIZ	api.c	41;"	d	file:
SOCKERRMSG	api-example.c	127;"	d	file:
SOCKERRMSG	api-example.c	41;"	d	file:
SOCKERRMSG	util.h	18;"	d
SOCKERRMSG	util.h	38;"	d
SOCKETFAIL	api-example.c	35;"	d	file:
SOCKETFAIL	api-example.c	48;"	d	file:
SOCKETFAIL	util.h	13;"	d
SOCKETFAIL	util.h	32;"	d
SOCKETINIT	api-example.c	131;"	d	file:
SOCKETINIT	api-example.c	39;"	d	file:
SOCKETTYPE	api-example.c	47;"	d	file:
SOCKETTYPE	util.h	12;"	d
SOCKETTYPE	util.h	31;"	d
SPI_BITS_PER_WORD	driver-knc-spi-fpga.c	30;"	d	file:
SPI_DELAY_USECS	driver-knc-spi-fpga.c	32;"	d	file:
SPI_DEVICE_TEMPLATE	driver-knc-spi-fpga.c	28;"	d	file:
SPI_MAX_SPEED	driver-knc-spi-fpga.c	31;"	d	file:
SPI_MODE	driver-knc-spi-fpga.c	29;"	d	file:
STATS_TIMEVAL	usbutils.c	712;"	d	file:
STATS_TIMEVAL	usbutils.c	717;"	d	file:
STAT_CTR_INTERVAL	cgminer.c	/^	STAT_CTR_INTERVAL		= 10000000,$/;"	e	enum:__anon1	file:
STAT_SLEEP_INTERVAL	cgminer.c	/^	STAT_SLEEP_INTERVAL		= 1,$/;"	e	enum:__anon1	file:
STDC_HEADERS	config.h	334;"	d
STRBUFLEN	usbutils.c	577;"	d	file:
SaveString	driver-bflsc.h	/^struct SaveString {$/;"	s
SendCmd	driver-klondike.c	/^static bool SendCmd(struct cgpu_info *klncgpu, KLINE *kline, int datalen)$/;"	f	file:
SendCmdGetReply	driver-klondike.c	/^static KLIST *SendCmdGetReply(struct cgpu_info *klncgpu, KLINE *kline, int datalen)$/;"	f	file:
TACH_FACTOR	driver-klondike.c	61;"	d	file:
TAILBUFSIZ	miner.h	1331;"	d
THISIF	usbutils.c	325;"	d	file:
TIME_AVG_CONSTANT	driver-bitforce.c	63;"	d	file:
TMPBUFSIZ	api.c	44;"	d	file:
TOP_STRATEGY	miner.h	277;"	d
TRUESTR	api.c	/^static const char *TRUESTR = "true";$/;"	v	file:
TRYLOCK	miner.h	698;"	d
TRYLOCK	miner.h	705;"	d
TVF	driver-bflsc.c	1457;"	d	file:
TVFMS	driver-bflsc.c	1458;"	d	file:
U32SIZE	hf_protocol.h	110;"	d
UNAVAILABLE	api.c	/^static const char *UNAVAILABLE = " - API will not be available";$/;"	v	file:
UNKNOWN	api.c	/^static const char *UNKNOWN = "Unknown";$/;"	v	file:
UNKNOWN	usbutils.c	/^static const char *UNKNOWN = "Unknown";$/;"	v	file:
UNPACK32	sha2.c	39;"	d	file:
USBDEBUG	usbutils.c	599;"	d	file:
USBEP	usbutils.c	324;"	d	file:
USBIF	usbutils.c	326;"	d	file:
USBUTILS_H	usbutils.h	12;"	d
USB_CONFIG	usbutils.c	57;"	d	file:
USB_EPS	usbutils.c	85;"	d	file:
USB_EPS_CTRL	usbutils.c	92;"	d	file:
USB_INIT_FAIL	usbutils.c	1591;"	d	file:
USB_INIT_IGNORE	usbutils.c	1593;"	d	file:
USB_INIT_OK	usbutils.c	1592;"	d	file:
USB_MAX_READ	usbutils.h	188;"	d
USB_NOSTAT	usbutils.h	214;"	d
USB_PARSE_COMMANDS	usbutils.h	/^	USB_PARSE_COMMANDS(ENUMERATION)$/;"	e	enum:usb_cmds
USB_PARSE_COMMANDS	usbutils.h	269;"	d
USB_READ_BUFSIZE	usbutils.h	194;"	d
USB_REJECT	usbutils.c	713;"	d	file:
USB_REJECT	usbutils.c	718;"	d	file:
USB_RETRY_MAX	usbutils.c	2363;"	d	file:
USB_STATS	usbutils.c	710;"	d	file:
USB_STATS	usbutils.c	716;"	d	file:
USB_TMOS	usbutils.h	219;"	d
USB_TMO_0	usbutils.h	216;"	d
USB_TMO_1	usbutils.h	217;"	d
USB_TMO_2	usbutils.h	218;"	d
USB_TYPE_FTDI	usbutils.h	/^	USB_TYPE_FTDI$/;"	e	enum:usb_types
USB_TYPE_STD	usbutils.h	/^	USB_TYPE_STD = 0,$/;"	e	enum:usb_types
USE_DEFAULT_TIMEOUT	driver-modminer.c	291;"	d	file:
USE_FPGA	cgminer.c	84;"	d	file:
USE_GRIDSEED	config.h	352;"	d
USE_USBUTILS	config.h	370;"	d
UTHASH_H	uthash.h	25;"	d
UTHASH_VERSION	uthash.h	67;"	d
UT_hash_bucket	uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_handle	uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_table	uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
VALC	fpgautils.c	254;"	d	file:
VALCC	fpgautils.c	284;"	d	file:
VALIDGROUP	api.c	594;"	d	file:
VALO	fpgautils.c	245;"	d	file:
VERSION	config.h	373;"	d
W	driver-icarus.c	/^	double W;$/;"	m	struct:ICARUS_INFO	file:
WAITFOROK	bitforce-firmware-flash.c	31;"	d	file:
WANT_CRYPTOPP_ASM32	miner.h	200;"	d
WATCHDOG_DEAD_COUNT	cgminer.c	6936;"	d	file:
WATCHDOG_DEAD_TIME	cgminer.c	6934;"	d	file:
WATCHDOG_INTERVAL	cgminer.c	6932;"	d	file:
WATCHDOG_SICK_COUNT	cgminer.c	6935;"	d	file:
WATCHDOG_SICK_TIME	cgminer.c	6933;"	d	file:
WIN_CALLBACK_EXTRA	usbutils.c	73;"	d	file:
WIN_WRITE_CBEXTRA	usbutils.c	74;"	d	file:
WORKCFG	driver-klondike.c	/^} WORKCFG;$/;"	t	typeref:struct:klondike_cfg	file:
WORKRESULT	driver-klondike.c	/^} WORKRESULT;$/;"	t	typeref:struct:_workresult	file:
WORKSTATUS	driver-klondike.c	/^} WORKSTATUS;$/;"	t	typeref:struct:klondike_status	file:
WORKTASK	driver-klondike.c	/^} WORKTASK;$/;"	t	typeref:struct:_worktask	file:
WORK_BITS	driver-bab.c	1369;"	d	file:
WORK_CHECK_INTERVAL_MS	driver-bitforce.c	60;"	d	file:
WORK_DATA_WORDS	driver-knc-spi-fpga.c	43;"	d	file:
WORK_ID_MASK	driver-knc-spi-fpga.c	64;"	d	file:
WORK_MERKLE7	driver-bab.c	1367;"	d	file:
WORK_MIDSTATE_WORDS	driver-knc-spi-fpga.c	42;"	d	file:
WORK_NONCE	driver-bab.c	1370;"	d	file:
WORK_NTIME	driver-bab.c	1368;"	d	file:
WORK_STALE_US	driver-knc-spi-fpga.c	45;"	d	file:
WP	uthash.h	529;"	d
WRITE_SIZE	driver-modminer.c	488;"	d	file:
WSAERRORS	api-example.c	/^	struct WSAERRORS {$/;"	s	file:
WSAERRORS	api.c	/^struct WSAERRORS {$/;"	s	file:
WSAErrorMsg	api-example.c	/^	static char *WSAErrorMsg()$/;"	f	file:
WSAErrorMsg	api.c	/^char *WSAErrorMsg(void) {$/;"	f
WSAErrors	api-example.c	/^	} WSAErrors[] = {$/;"	v	typeref:struct:WSAERRORS
WSAErrors	api.c	/^} WSAErrors[] = {$/;"	v	typeref:struct:WSAERRORS
WSA_Data	api-example.c	/^	static WSADATA WSA_Data;$/;"	v	file:
WSAbuf	api-example.c	/^	static char WSAbuf[1024];$/;"	v	file:
WSAbuf	api.c	/^static char WSAbuf[1024];$/;"	v	file:
YES	api.c	/^static const char *YES = "Y";$/;"	v	file:
_ALL_SOURCE	config.h	401;"	d
_ASC	api.c	219;"	d	file:
_ASCS	api.c	223;"	d	file:
_BSD_SOURCE	bitforce-firmware-flash.c	10;"	d	file:
_BYE	api.c	226;"	d	file:
_CHECK	api.c	229;"	d	file:
_DEBUGSET	api.c	231;"	d	file:
_DEVDETAILS	api.c	225;"	d	file:
_DEVS	api.c	207;"	d	file:
_GL_ARG_NONNULL	arg-nonnull.h	22;"	d
_GL_ARG_NONNULL	arg-nonnull.h	24;"	d
_GL_ATTRIBUTE_CONST	config.h	481;"	d
_GL_ATTRIBUTE_CONST	config.h	483;"	d
_GL_ATTRIBUTE_PURE	config.h	474;"	d
_GL_ATTRIBUTE_PURE	config.h	476;"	d
_GL_CXXALIASWARN	c++defs.h	220;"	d
_GL_CXXALIASWARN	c++defs.h	239;"	d
_GL_CXXALIASWARN1	c++defs.h	247;"	d
_GL_CXXALIASWARN1	c++defs.h	267;"	d
_GL_CXXALIASWARN1_1	c++defs.h	250;"	d
_GL_CXXALIASWARN1_2	c++defs.h	255;"	d
_GL_CXXALIASWARN1_2	c++defs.h	260;"	d
_GL_CXXALIASWARN1_2	c++defs.h	263;"	d
_GL_CXXALIASWARN_1	c++defs.h	222;"	d
_GL_CXXALIASWARN_2	c++defs.h	227;"	d
_GL_CXXALIASWARN_2	c++defs.h	232;"	d
_GL_CXXALIASWARN_2	c++defs.h	235;"	d
_GL_CXXALIAS_RPL	c++defs.h	115;"	d
_GL_CXXALIAS_RPL_1	c++defs.h	118;"	d
_GL_CXXALIAS_RPL_1	c++defs.h	125;"	d
_GL_CXXALIAS_RPL_CAST_1	c++defs.h	135;"	d
_GL_CXXALIAS_RPL_CAST_1	c++defs.h	143;"	d
_GL_CXXALIAS_SYS	c++defs.h	161;"	d
_GL_CXXALIAS_SYS	c++defs.h	168;"	d
_GL_CXXALIAS_SYS_CAST	c++defs.h	178;"	d
_GL_CXXALIAS_SYS_CAST	c++defs.h	186;"	d
_GL_CXXALIAS_SYS_CAST2	c++defs.h	202;"	d
_GL_CXXALIAS_SYS_CAST2	c++defs.h	211;"	d
_GL_CXXDEFS_H	c++defs.h	18;"	d
_GL_EXTERN_C	c++defs.h	82;"	d
_GL_EXTERN_C	c++defs.h	84;"	d
_GL_FUNCDECL_RPL	c++defs.h	94;"	d
_GL_FUNCDECL_RPL_1	c++defs.h	96;"	d
_GL_FUNCDECL_SYS	c++defs.h	106;"	d
_GL_UNUSED	config.h	464;"	d
_GL_UNUSED	config.h	466;"	d
_GL_WARN_EXTERN_C	warn-on-use.h	105;"	d
_GL_WARN_EXTERN_C	warn-on-use.h	107;"	d
_GL_WARN_ON_USE	warn-on-use.h	68;"	d
_GL_WARN_ON_USE	warn-on-use.h	72;"	d
_GL_WARN_ON_USE	warn-on-use.h	75;"	d
_GL_WARN_ON_USE_CXX	warn-on-use.h	88;"	d
_GL_WARN_ON_USE_CXX	warn-on-use.h	93;"	d
_GL_WARN_ON_USE_CXX	warn-on-use.h	96;"	d
_GNU_SOURCE	config.h	405;"	d
_HF_PROTOCOL_BE_H_	hf_protocol_be.h	15;"	d
_HF_PROTOCOL_H_	hf_protocol.h	15;"	d
_LINUX_LIST_H	elist.h	2;"	d
_MEMORY_DEBUG_MASTER	api.c	10;"	d	file:
_MINECOIN	api.c	230;"	d	file:
_MINECONFIG	api.c	212;"	d	file:
_MINESTATS	api.c	228;"	d	file:
_NOTIFY	api.c	224;"	d	file:
_PGA	api.c	215;"	d	file:
_PGAS	api.c	222;"	d	file:
_POOLS	api.c	208;"	d	file:
_POSIX_PTHREAD_SEMANTICS	config.h	409;"	d
_RESTART	api.c	227;"	d	file:
_Restrict	config.h	450;"	d
_SETCONFIG	api.c	232;"	d	file:
_STATUS	api.c	210;"	d	file:
_SUMMARY	api.c	209;"	d	file:
_TANDEM_SOURCE	config.h	413;"	d
_UNUSED_PARAMETER_	config.h	470;"	d
_USBSTATS	api.c	233;"	d	file:
_VERSION	api.c	211;"	d	file:
__BENCH_BLOCK_H__	bench_block.h	2;"	d
__COMPAT_H__	compat.h	2;"	d
__EXTENSIONS__	config.h	417;"	d
__GNUC_STDC_INLINE__	config.h	437;"	d
__LOGGING_H__	logging.h	2;"	d
__MINER_H__	miner.h	2;"	d
__UTIL_H__	util.h	2;"	d
__add_queued	cgminer.c	/^void __add_queued(struct cgpu_info *cgpu, struct work *work)$/;"	f
__bflsc_initialise	driver-bflsc.c	/^static void __bflsc_initialise(struct cgpu_info *bflsc)$/;"	f	file:
__bin2hex	util.c	/^void __bin2hex(char *s, const unsigned char *p, size_t len)$/;"	f
__buf	usbutils.c	/^	struct seminfo *__buf;$/;"	m	union:semun	typeref:struct:semun::seminfo	file:
__build_gbt_txns	cgminer.c	/^static bool __build_gbt_txns(struct pool *pool, json_t *res_val)$/;"	f	file:
__find_work_bymidstate	cgminer.c	/^struct work *__find_work_bymidstate(struct work *que, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)$/;"	f
__gbt_merkleroot	cgminer.c	/^static unsigned char *__gbt_merkleroot(struct pool *pool)$/;"	f	file:
__get_thread	cgminer.c	/^static struct thr_info *__get_thread(int thr_id)$/;"	f	file:
__is_in_use	usbutils.c	/^static bool __is_in_use(uint8_t bus_number, uint8_t device_address)$/;"	f	file:
__json_array_string	util.c	/^static char *__json_array_string(json_t *val, unsigned int entry)$/;"	f	file:
__kill_work	cgminer.c	/^static void __kill_work(void)$/;"	f	file:
__list_add	elist.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	elist.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
__list_splice	elist.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
__maybe_unused	miner.h	195;"	d
__restrict__	config.h	451;"	d
__stratum_send	util.c	/^static enum send_ret __stratum_send(struct pool *pool, char *s, ssize_t len)$/;"	f	file:
__total_staged	cgminer.c	/^static int __total_staged(void)$/;"	f	file:
__usb_transfer	usbutils.c	/^int __usb_transfer(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, unsigned int timeout, __maybe_unused enum usb_cmds cmd)$/;"	f
__work_completed	cgminer.c	/^void __work_completed(struct cgpu_info *cgpu, struct work *work)$/;"	f
_applog	logging.c	/^void _applog(int prio, const char *str, bool force)$/;"	f
_bab_add_buf	driver-bab.c	/^static void _bab_add_buf(__maybe_unused struct cgpu_info *babcgpu, struct bab_info *babinfo, const uint8_t *data, size_t siz, const char *file, const char *func, const int line)$/;"	f	file:
_bab_add_buf_rev	driver-bab.c	/^static void _bab_add_buf_rev(__maybe_unused struct cgpu_info *babcgpu, struct bab_info *babinfo, const uint8_t *data, uint32_t siz, const char *file, const char *func, const int line)$/;"	f	file:
_bab_add_data	driver-bab.c	/^static void _bab_add_data(struct cgpu_info *babcgpu, struct bab_info *babinfo, uint32_t addr, const uint8_t *data, size_t siz, const char *file, const char *func, const int line)$/;"	f	file:
_bab_config_reg	driver-bab.c	/^static void _bab_config_reg(struct cgpu_info *babcgpu, struct bab_info *babinfo, uint32_t reg, bool enable, const char *file, const char *func, const int line)$/;"	f	file:
_bab_reset	driver-bab.c	/^static void _bab_reset(__maybe_unused struct cgpu_info *babcgpu, struct bab_info *babinfo, int bank, int times)$/;"	f	file:
_bab_txrx	driver-bab.c	/^static bool _bab_txrx(struct cgpu_info *babcgpu, struct bab_info *babinfo, int buf, uint32_t siz, bool detect_ignore, const char *file, const char *func, const int line)$/;"	f	file:
_cg_dlock	miner.h	/^static inline void _cg_dlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cg_dwilock	miner.h	/^static inline void _cg_dwilock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cg_dwlock	miner.h	/^static inline void _cg_dwlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cg_ilock	miner.h	/^static inline void _cg_ilock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cg_rlock	miner.h	/^static inline void _cg_rlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cg_runlock	miner.h	/^static inline void _cg_runlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cg_ruwlock	miner.h	/^static inline void _cg_ruwlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cg_ulock	miner.h	/^static inline void _cg_ulock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cg_wlock	miner.h	/^static inline void _cg_wlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cg_wunlock	miner.h	/^static inline void _cg_wunlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cglock_init	miner.h	/^static inline void _cglock_init(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f
_cgpu_devid_counter	cgminer.c	/^struct _cgpu_devid_counter {$/;"	s	file:
_cgsem_init	util.c	/^void _cgsem_init(cgsem_t *cgsem, const char *file, const char *func, const int line)$/;"	f
_cgsem_mswait	util.c	/^int _cgsem_mswait(cgsem_t *cgsem, int ms, const char *file, const char *func, const int line)$/;"	f
_cgsem_post	util.c	/^void _cgsem_post(cgsem_t *cgsem, const char *file, const char *func, const int line)$/;"	f
_cgsem_wait	util.c	/^void _cgsem_wait(cgsem_t *cgsem, const char *file, const char *func, const int line)$/;"	f
_copy_work	cgminer.c	/^static void _copy_work(struct work *work, const struct work *base_work, int noffset)$/;"	f	file:
_internal_knc_flush_fpga	driver-knc-spi-fpga.c	/^static int _internal_knc_flush_fpga(struct knc_state *knc)$/;"	f	file:
_io_new	api.c	/^static struct io_data *_io_new(size_t initial, bool socket_buf)$/;"	f	file:
_mutex_init	miner.h	/^static inline void _mutex_init(pthread_mutex_t *lock, const char *file, const char *func, const int line)$/;"	f
_mutex_lock	miner.h	/^static inline void _mutex_lock(pthread_mutex_t *lock, const char *file, const char *func, const int line)$/;"	f
_mutex_trylock	miner.h	/^static inline int _mutex_trylock(pthread_mutex_t *lock, __maybe_unused const char *file, __maybe_unused const char *func, __maybe_unused const int line)$/;"	f
_mutex_unlock	miner.h	/^static inline void _mutex_unlock(pthread_mutex_t *lock, const char *file, const char *func, const int line)$/;"	f
_mutex_unlock_noyield	miner.h	/^static inline void _mutex_unlock_noyield(pthread_mutex_t *lock, const char *file, const char *func, const int line)$/;"	f
_open_bitstream	fpgautils.c	/^static FILE *_open_bitstream(const char *path, const char *subdir, const char *filename)$/;"	f	file:
_open_bitstream	fpgautils.c	471;"	d	file:
_open_bitstream3	fpgautils.c	477;"	d	file:
_pad0	driver-avalon.h	/^	uint8_t _pad0			:4;$/;"	m	struct:avalon_task
_pad0	driver-avalon.h	/^	uint8_t _pad0[2];$/;"	m	struct:avalon_result
_pad1	driver-avalon.h	/^	uint8_t _pad1[3];$/;"	m	struct:avalon_task
_pad2	driver-avalon.h	/^	uint32_t _pad2;$/;"	m	struct:avalon_task
_quit	cgminer.c	/^void _quit(int status)$/;"	f
_rd_lock	miner.h	/^static inline void _rd_lock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f
_rd_unlock	miner.h	/^static inline void _rd_unlock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f
_rd_unlock_noyield	miner.h	/^static inline void _rd_unlock_noyield(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f
_rw_unlock	miner.h	/^static inline void _rw_unlock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f
_rwlock_init	miner.h	/^static inline void _rwlock_init(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f
_select_read	fpgautils.c	/^size_t _select_read(int fd, char *buf, size_t bufsiz, struct timeval *timeout, struct timeval *char_timeout, int finished)$/;"	f
_select_wait_read	fpgautils.c	/^static bool _select_wait_read(int fd, struct timeval *timeout)$/;"	f	file:
_select_write	fpgautils.c	/^size_t _select_write(int fd, char *buf, size_t siz, struct timeval *timeout)$/;"	f
_serial_detect	fpgautils.c	/^int _serial_detect(struct device_drv *drv, detectone_func_t detectone, autoscan_func_t autoscan, bool forceauto)$/;"	f
_serial_read	fpgautils.c	/^ssize_t _serial_read(int fd, char *buf, size_t bufsiz, char *eol)$/;"	f
_transfer	driver-gridseed.c	/^static void _transfer(struct cgpu_info *gridseed, uint8_t request_type, uint8_t bRequest,$/;"	f	file:
_transfer	driver-icarus.c	/^static void _transfer(struct cgpu_info *icarus, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, enum usb_cmds cmd)$/;"	f	file:
_usb_ftdi_set_latency	usbutils.c	/^int _usb_ftdi_set_latency(struct cgpu_info *cgpu, int intinfo)$/;"	f
_usb_init	usbutils.c	/^static int _usb_init(struct cgpu_info *cgpu, struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
_usb_interface	usbutils.c	/^int _usb_interface(struct cgpu_info *cgpu, int intinfo)$/;"	f
_usb_read	usbutils.c	/^int _usb_read(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz, int *processed, int timeout, const char *end, enum usb_cmds cmd, bool readonce, bool cancellable)$/;"	f
_usb_transfer	usbutils.c	/^int _usb_transfer(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, unsigned int timeout, enum usb_cmds cmd)$/;"	f
_usb_transfer_read	usbutils.c	/^int _usb_transfer_read(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, char *buf, int bufsiz, int *amount, unsigned int timeout, __maybe_unused enum usb_cmds cmd)$/;"	f
_usb_uninit	usbutils.c	/^static void _usb_uninit(struct cgpu_info *cgpu)$/;"	f	file:
_usb_write	usbutils.c	/^int _usb_write(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz, int *processed, int timeout, enum usb_cmds cmd)$/;"	f
_wlog	cgminer.c	/^void _wlog(const char *str)$/;"	f
_wlogprint	cgminer.c	/^void _wlogprint(const char *str)$/;"	f
_workresult	driver-klondike.c	/^typedef struct _workresult {$/;"	s	file:
_worktask	driver-klondike.c	/^typedef struct _worktask {$/;"	s	file:
_wr_lock	miner.h	/^static inline void _wr_lock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f
_wr_trylock	miner.h	/^static inline int _wr_trylock(pthread_rwlock_t *lock, __maybe_unused const char *file, __maybe_unused const char *func, __maybe_unused const int line)$/;"	f
_wr_unlock	miner.h	/^static inline void _wr_unlock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f
_wr_unlock_noyield	miner.h	/^static inline void _wr_unlock_noyield(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f
abandon_work	cgminer.c	/^static inline bool abandon_work(struct work *work, struct timeval *wdiff, uint64_t hashes)$/;"	f	file:
accepted	miner.h	/^	int accepted, rejected;$/;"	m	struct:pool
accepted	miner.h	/^	int accepted;$/;"	m	struct:cgpu_info
active_fifo	driver-knc-spi-fpga.c	/^	struct active_work active_fifo[KNC_ACTIVE_BUFFER_SIZE];$/;"	m	struct:knc_state	typeref:struct:knc_state::active_work	file:
active_work	driver-knc-spi-fpga.c	/^struct active_work {$/;"	s	file:
add_cgpu	cgminer.c	/^bool add_cgpu(struct cgpu_info *cgpu)$/;"	f
add_in_use	usbutils.c	/^static void add_in_use(uint8_t bus_number, uint8_t device_address)$/;"	f	file:
add_pool	cgminer.c	/^struct pool *add_pool(void)$/;"	f
add_pool_details	cgminer.c	/^bool add_pool_details(struct pool *pool, bool live, char *url, char *user, char *pass)$/;"	f
add_queued	cgminer.c	/^void add_queued(struct cgpu_info *cgpu, struct work *work)$/;"	f
add_serial	cgminer.c	/^static char *add_serial(char *arg)$/;"	f	file:
add_url	cgminer.c	/^static struct pool *add_url(void)$/;"	f	file:
addgettry	api.c	/^static void addgettry(LOCKINFO *info, uint64_t id, const char *file, const char *func, const int linenum, bool get)$/;"	f	file:
addpool	api.c	/^static void addpool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
addtime	util.c	/^void addtime(struct timeval *a, struct timeval *b)$/;"	f
adj_fwidth	cgminer.c	/^static void adj_fwidth(float var, int *length)$/;"	f	file:
adj_width	cgminer.c	/^static void adj_width(int var, int *length)$/;"	f	file:
adjust_fan	driver-avalon.c	/^static inline void adjust_fan(struct avalon_info *info)$/;"	f	file:
adjust_mostdevs	cgminer.c	/^static void adjust_mostdevs(void)$/;"	f	file:
adjust_quota_gcd	cgminer.c	/^void adjust_quota_gcd(void)$/;"	f
age_queued_work	cgminer.c	/^int age_queued_work(struct cgpu_info *cgpu, double secs)$/;"	f
align_len	util.h	/^static inline void align_len(size_t *len)$/;"	f
alive	miner.h	/^enum alive {$/;"	g
all_data_cb	util.c	/^static size_t all_data_cb(const void *ptr, size_t size, size_t nmemb,$/;"	f	file:
alloca	miner.h	50;"	d
alloca	miner.h	55;"	d
alloca	miner.h	58;"	d
allocate_kitem	driver-klondike.c	/^static KLIST *allocate_kitem(struct cgpu_info *klncgpu)$/;"	f	file:
amu_epinfos	usbutils.c	/^static struct usb_epinfo amu_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
amu_ints	usbutils.c	/^static struct usb_intinfo amu_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
api	api.c	/^void api(int api_thr_id)$/;"	f
api_add_bool	api.c	/^struct api_data *api_add_bool(struct api_data *root, char *name, bool *data, bool copy_data)$/;"	f
api_add_const	api.c	/^struct api_data *api_add_const(struct api_data *root, char *name, const char *data, bool copy_data)$/;"	f
api_add_data_full	api.c	/^static struct api_data *api_add_data_full(struct api_data *root, char *name, enum api_data_type type, void *data, bool copy_data)$/;"	f	file:
api_add_diff	api.c	/^struct api_data *api_add_diff(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f
api_add_double	api.c	/^struct api_data *api_add_double(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f
api_add_elapsed	api.c	/^struct api_data *api_add_elapsed(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f
api_add_escape	api.c	/^struct api_data *api_add_escape(struct api_data *root, char *name, char *data, bool copy_data)$/;"	f
api_add_extra	api.c	/^static struct api_data *api_add_extra(struct api_data *root, struct api_data *extra)$/;"	f	file:
api_add_freq	api.c	/^struct api_data *api_add_freq(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f
api_add_hs	api.c	/^struct api_data *api_add_hs(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f
api_add_int	api.c	/^struct api_data *api_add_int(struct api_data *root, char *name, int *data, bool copy_data)$/;"	f
api_add_mhs	api.c	/^struct api_data *api_add_mhs(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f
api_add_mhtotal	api.c	/^struct api_data *api_add_mhtotal(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f
api_add_percent	api.c	/^struct api_data *api_add_percent(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f
api_add_string	api.c	/^struct api_data *api_add_string(struct api_data *root, char *name, char *data, bool copy_data)$/;"	f
api_add_temp	api.c	/^struct api_data *api_add_temp(struct api_data *root, char *name, float *data, bool copy_data)$/;"	f
api_add_time	api.c	/^struct api_data *api_add_time(struct api_data *root, char *name, time_t *data, bool copy_data)$/;"	f
api_add_timeval	api.c	/^struct api_data *api_add_timeval(struct api_data *root, char *name, struct timeval *data, bool copy_data)$/;"	f
api_add_uint	api.c	/^struct api_data *api_add_uint(struct api_data *root, char *name, unsigned int *data, bool copy_data)$/;"	f
api_add_uint16	api.c	/^struct api_data *api_add_uint16(struct api_data *root, char *name, uint16_t *data, bool copy_data)$/;"	f
api_add_uint32	api.c	/^struct api_data *api_add_uint32(struct api_data *root, char *name, uint32_t *data, bool copy_data)$/;"	f
api_add_uint64	api.c	/^struct api_data *api_add_uint64(struct api_data *root, char *name, uint64_t *data, bool copy_data)$/;"	f
api_add_uint8	api.c	/^struct api_data *api_add_uint8(struct api_data *root, char *name, uint8_t *data, bool copy_data)$/;"	f
api_add_utility	api.c	/^struct api_data *api_add_utility(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f
api_add_volts	api.c	/^struct api_data *api_add_volts(struct api_data *root, char *name, float *data, bool copy_data)$/;"	f
api_data	miner.h	/^struct api_data {$/;"	s
api_data_type	miner.h	/^enum api_data_type {$/;"	g
api_didlock	api.c	/^void api_didlock(uint64_t id, int ret, void *lock, const char *file, const char *func, const int linenum)$/;"	f
api_getlock	api.c	/^uint64_t api_getlock(void *lock, const char *file, const char *func, const int linenum)$/;"	f
api_gotlock	api.c	/^void api_gotlock(uint64_t id, void *lock, const char *file, const char *func, const int linenum)$/;"	f
api_gunlock	api.c	/^void api_gunlock(void *lock, const char *file, const char *func, const int linenum)$/;"	f
api_initlock	api.c	/^void api_initlock(void *lock, enum cglock_typ typ, const char *file, const char *func, const int linenum)$/;"	f
api_thr_id	cgminer.c	/^static int api_thr_id;$/;"	v	file:
api_thread	cgminer.c	/^static void *api_thread(void *userdata)$/;"	f	file:
api_trylock	api.c	/^uint64_t api_trylock(void *lock, const char *file, const char *func, const int linenum)$/;"	f
api_usb_stats	usbutils.c	/^struct api_data *api_usb_stats(__maybe_unused int *count)$/;"	f
apigroups	api.c	/^} apigroups['Z' - 'A' + 1]; \/\/ only A=0 to Z=25 (R: noprivs, W: allprivs)$/;"	v	typeref:struct:APIGROUPS
apiversion	api.c	/^static void apiversion(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
app_restart	cgminer.c	/^void app_restart(void)$/;"	f
append	usbutils.c	/^static void append(char **buf, char *append, size_t *off, size_t *len)$/;"	f	file:
applog	logging.h	35;"	d
applog_and_exit	cgminer.c	/^static void applog_and_exit(const char *fmt, ...)$/;"	f	file:
applogsiz	logging.h	45;"	d
array	usbutils.c	/^	unsigned short *array;$/;"	m	union:semun	file:
array_nonce_fifo_full	driver-hashfast.h	/^	uint64_t array_nonce_fifo_full;             \/\/ System nonce Q overrun events$/;"	m	struct:hf_long_statistics
array_nonce_fifo_full	hf_protocol.h	/^	uint8_t array_nonce_fifo_full;              \/\/ System nonce Q overrun events$/;"	m	struct:hf_statistics
array_nonce_fifo_full	hf_protocol_be.h	/^	uint8_t array_nonce_fifo_full;              \/\/ System nonce Q overrun events$/;"	m	struct:hf_statistics
asccount	api.c	/^static void asccount(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
ascdev	api.c	/^static void ascdev(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
ascdevice	api.c	/^static int ascdevice(int ascid)$/;"	f	file:
ascdisable	api.c	/^static void ascdisable(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
ascenable	api.c	/^static void ascenable(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
ascidentify	api.c	/^static void ascidentify(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
ascset	api.c	/^static void ascset(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
ascstatus	api.c	/^static void ascstatus(struct io_data *io_data, int asc, bool isjson, bool precom)$/;"	f	file:
asic	driver-knc-spi-fpga.c	/^	uint32_t asic		:3;$/;"	m	struct:spi_response	file:
asic	driver-knc-spi-fpga.c	/^	uint8_t asic;$/;"	m	struct:core_disa_data	file:
asic_count	driver-avalon.h	/^	int asic_count;$/;"	m	struct:avalon_info
asic_count	driver-hashfast.h	/^	int asic_count;                             \/\/ # of chips in the chain$/;"	m	struct:hashfast_info
asic_num	driver-avalon.h	/^	uint8_t asic_num	:4;$/;"	m	struct:avalon_task
asic_pll	driver-avalon.h	/^	uint8_t asic_pll		:1;$/;"	m	struct:avalon_task
async_usb_transfers	usbutils.c	/^bool async_usb_transfers(void)$/;"	f
att	usbutils.h	/^	uint8_t att;$/;"	m	struct:usb_epinfo
auth_stratum	util.c	/^bool auth_stratum(struct pool *pool)$/;"	f
auto_hw	driver-avalon.h	/^	int auto_hw;$/;"	m	struct:avalon_info
auto_nonces	driver-avalon.h	/^	int auto_nonces;$/;"	m	struct:avalon_info
auto_queued	driver-avalon.h	/^	int auto_queued;$/;"	m	struct:avalon_info
autoscan_func_t	fpgautils.h	/^typedef int(*autoscan_func_t)();$/;"	t
ava_epinfos	usbutils.c	/^static struct usb_epinfo ava_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
ava_ints	usbutils.c	/^static struct usb_intinfo ava_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
avalon_adjust_freq	driver-avalon.c	/^static void avalon_adjust_freq(struct avalon_info *info, struct cgpu_info *avalon)$/;"	f	file:
avalon_api_stats	driver-avalon.c	/^static struct api_data *avalon_api_stats(struct cgpu_info *cgpu)$/;"	f	file:
avalon_buffer_full	driver-avalon.h	179;"	d
avalon_calc_timeout	driver-avalon.c	/^static int avalon_calc_timeout(int frequency)$/;"	f	file:
avalon_create_task	driver-avalon.c	/^static inline void avalon_create_task(struct avalon_task *at,$/;"	f	file:
avalon_cts	driver-avalon.c	/^static inline bool avalon_cts(char c)$/;"	f	file:
avalon_dec_freq	driver-avalon.c	/^static void avalon_dec_freq(struct avalon_info *info)$/;"	f	file:
avalon_decode_nonce	driver-avalon.c	/^static bool avalon_decode_nonce(struct thr_info *thr, struct cgpu_info *avalon,$/;"	f	file:
avalon_detect	driver-avalon.c	/^static void avalon_detect(bool __maybe_unused hotplug)$/;"	f	file:
avalon_detect_one	driver-avalon.c	/^static struct cgpu_info *avalon_detect_one(libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
avalon_drv	driver-avalon.c	/^struct device_drv avalon_drv = {$/;"	v	typeref:struct:device_drv
avalon_fill	driver-avalon.c	/^static bool avalon_fill(struct cgpu_info *avalon)$/;"	f	file:
avalon_flush_work	driver-avalon.c	/^static void avalon_flush_work(struct cgpu_info *avalon)$/;"	f	file:
avalon_get_results	driver-avalon.c	/^static void *avalon_get_results(void *userdata)$/;"	f	file:
avalon_idle	driver-avalon.c	/^static void avalon_idle(struct cgpu_info *avalon, struct avalon_info *info)$/;"	f	file:
avalon_inc_freq	driver-avalon.c	/^static void avalon_inc_freq(struct avalon_info *info)$/;"	f	file:
avalon_inc_nvw	driver-avalon.c	/^static void avalon_inc_nvw(struct avalon_info *info, struct thr_info *thr)$/;"	f	file:
avalon_info	driver-avalon.h	/^struct avalon_info {$/;"	s
avalon_init	driver-avalon.c	/^static void avalon_init(struct cgpu_info *avalon)$/;"	f	file:
avalon_init_task	driver-avalon.c	/^static int avalon_init_task(struct avalon_task *at,$/;"	f	file:
avalon_initialise	driver-avalon.c	/^static void avalon_initialise(struct cgpu_info *avalon)$/;"	f	file:
avalon_parse_results	driver-avalon.c	/^static void avalon_parse_results(struct cgpu_info *avalon, struct avalon_info *info,$/;"	f	file:
avalon_prepare	driver-avalon.c	/^static bool avalon_prepare(struct thr_info *thr)$/;"	f	file:
avalon_read	driver-avalon.c	/^static int avalon_read(struct cgpu_info *avalon, char *buf, size_t bufsize, int ep)$/;"	f	file:
avalon_reset	driver-avalon.c	/^static int avalon_reset(struct cgpu_info *avalon, bool initial)$/;"	f	file:
avalon_reset_auto	driver-avalon.c	/^static void avalon_reset_auto(struct avalon_info *info)$/;"	f	file:
avalon_result	driver-avalon.h	/^struct avalon_result {$/;"	s
avalon_rotate_array	driver-avalon.c	/^static void avalon_rotate_array(struct cgpu_info *avalon, struct avalon_info *info)$/;"	f	file:
avalon_running_reset	driver-avalon.c	/^static void avalon_running_reset(struct cgpu_info *avalon,$/;"	f	file:
avalon_scanhash	driver-avalon.c	/^static int64_t avalon_scanhash(struct thr_info *thr)$/;"	f	file:
avalon_send_task	driver-avalon.c	/^static int avalon_send_task(const struct avalon_task *at, struct cgpu_info *avalon)$/;"	f	file:
avalon_send_tasks	driver-avalon.c	/^static void *avalon_send_tasks(void *userdata)$/;"	f	file:
avalon_set_device	driver-avalon.c	/^static char *avalon_set_device(struct cgpu_info *avalon, char *option, char *setting, char *replybuf)$/;"	f	file:
avalon_set_freq	driver-avalon.c	/^static void avalon_set_freq(struct cgpu_info *avalon, int frequency)$/;"	f	file:
avalon_set_timeout	driver-avalon.c	/^static void avalon_set_timeout(struct avalon_info *info)$/;"	f	file:
avalon_shutdown	driver-avalon.c	/^static void avalon_shutdown(struct thr_info *thr)$/;"	f	file:
avalon_task	driver-avalon.h	/^struct avalon_task {$/;"	s
avalon_update_temps	driver-avalon.c	/^static void avalon_update_temps(struct cgpu_info *avalon, struct avalon_info *info,$/;"	f	file:
avalon_valid_result	driver-avalon.c	/^static struct work *avalon_valid_result(struct cgpu_info *avalon, struct avalon_result *ar)$/;"	f	file:
avalon_write	driver-avalon.c	/^static int avalon_write(struct cgpu_info *avalon, char *buf, ssize_t len, int ep)$/;"	f	file:
avg_wait_d	miner.h	/^	unsigned int avg_wait_d;$/;"	m	struct:cgpu_info
avg_wait_f	miner.h	/^	double avg_wait_f;$/;"	m	struct:cgpu_info
bab_add_buf	driver-bab.c	70;"	d	file:
bab_add_data	driver-bab.c	74;"	d	file:
bab_api_stats	driver-bab.c	/^static struct api_data *bab_api_stats(struct cgpu_info *babcgpu)$/;"	f	file:
bab_config_reg	driver-bab.c	73;"	d	file:
bab_counters	driver-bab.c	/^static const uint8_t bab_counters[BAB_COUNTERS] = {$/;"	v	file:
bab_detect	driver-bab.c	/^static void bab_detect(__maybe_unused bool hotplug)$/;"	f	file:
bab_detect	driver-bab.c	/^static void bab_detect(bool hotplug)$/;"	f	file:
bab_detect_chips	driver-bab.c	/^void bab_detect_chips(struct cgpu_info *babcgpu, struct bab_info *babinfo, int bank, int first, int last)$/;"	f
bab_do_work	driver-bab.c	/^static bool bab_do_work(struct cgpu_info *babcgpu)$/;"	f	file:
bab_drv	driver-bab.c	/^struct device_drv bab_drv = {$/;"	v	typeref:struct:device_drv
bab_flush_work	driver-bab.c	/^static void bab_flush_work(struct cgpu_info *babcgpu)$/;"	f	file:
bab_get	driver-bab.c	/^static bool bab_get(__maybe_unused struct cgpu_info *babcgpu, struct bab_info *babinfo)$/;"	f	file:
bab_identify	driver-bab.c	/^static void bab_identify(__maybe_unused struct cgpu_info *babcgpu)$/;"	f	file:
bab_info	driver-bab.c	/^struct bab_info {$/;"	s	file:
bab_init_chips	driver-bab.c	/^static void bab_init_chips(struct cgpu_info *babcgpu, struct bab_info *babinfo)$/;"	f	file:
bab_init_gpio	driver-bab.c	/^static bool bab_init_gpio(struct cgpu_info *babcgpu, struct bab_info *babinfo, int bus, int chip)$/;"	f	file:
bab_ioc	driver-bab.c	/^} bab_ioc[] = {$/;"	v	typeref:struct:__anon2	file:
bab_memory	driver-bab.c	/^static const char *bab_memory = "\/dev\/mem";$/;"	v	file:
bab_memory_addr	driver-bab.c	/^static int bab_memory_addr = 0x20200000;$/;"	v	file:
bab_modules	driver-bab.c	/^static const char *bab_modules[] = {$/;"	v	file:
bab_nonce_offsets	driver-bab.c	/^static const uint32_t bab_nonce_offsets[] = {-0x800000, 0, -0x400000};$/;"	v	file:
bab_osc_bits	driver-bab.c	/^static const uint8_t bab_osc_bits[BAB_OSC] =$/;"	v	file:
bab_put	driver-bab.c	/^static bool bab_put(struct cgpu_info *babcgpu, struct bab_info *babinfo)$/;"	f	file:
bab_queue_full	driver-bab.c	/^static bool bab_queue_full(struct cgpu_info *babcgpu)$/;"	f	file:
bab_reg_dis	driver-bab.c	/^static const uint8_t bab_reg_dis[4] = { 0x00, 0x00, 0x00, 0x00 };$/;"	v	file:
bab_reg_ena	driver-bab.c	/^static const uint8_t bab_reg_ena[4] = { 0xc1, 0x6a, 0x59, 0xe3 };$/;"	v	file:
bab_res	driver-bab.c	/^static void *bab_res(void *userdata)$/;"	f	file:
bab_reset	driver-bab.c	68;"	d	file:
bab_scanwork	driver-bab.c	/^static int64_t bab_scanwork(__maybe_unused struct thr_info *thr)$/;"	f	file:
bab_set_osc	driver-bab.c	/^static void bab_set_osc(struct bab_info *babinfo, int chip)$/;"	f	file:
bab_shutdown	driver-bab.c	/^static void bab_shutdown(struct thr_info *thr)$/;"	f	file:
bab_spi	driver-bab.c	/^static void *bab_spi(void *userdata)$/;"	f	file:
bab_test_data	driver-bab.c	/^static const uint32_t bab_test_data[BAB_TEST_DATA] = {$/;"	v	file:
bab_thread_prepare	driver-bab.c	/^static bool bab_thread_prepare(struct thr_info *thr)$/;"	f	file:
bab_txrx	driver-bab.c	69;"	d	file:
bab_w1	driver-bab.c	/^static const uint32_t bab_w1[BAB_W1] = {$/;"	v	file:
bab_w2	driver-bab.c	/^static const uint32_t bab_w2[BAB_W2] = {$/;"	v	file:
bab_work_reply	driver-bab.c	/^struct bab_work_reply {$/;"	s	file:
bab_work_send	driver-bab.c	/^struct bab_work_send {$/;"	s	file:
bank_off	driver-bab.c	/^	uint32_t bank_off[BAB_SPI_BUFFERS][BAB_MAXBANKS+2];$/;"	m	struct:bab_info	file:
bas_epinfos	usbutils.c	/^static struct usb_epinfo bas_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bas_ints	usbutils.c	/^static struct usb_intinfo bas_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
base_cgpu	driver-bitfury.h	/^	struct cgpu_info *base_cgpu;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::cgpu_info
baud	driver-avalon.h	/^	int baud;$/;"	m	struct:avalon_info
baud	driver-gridseed.c	/^	int				baud;$/;"	m	struct:s_gridseed_info	file:
baud	driver-icarus.c	/^	int baud;$/;"	m	struct:ICARUS_INFO	file:
bbf_option_offset	driver-avalon.c	/^static int bbf_option_offset = -1;$/;"	v	file:
bbversion	miner.h	/^	char *bbversion;$/;"	m	struct:stratum_work
be32toh	miner.h	167;"	d
be32toh	miner.h	177;"	d
be64toh	miner.h	168;"	d
be64toh	miner.h	178;"	d
begin	driver-knc-spi-fpga.c	/^	struct timeval begin;$/;"	m	struct:active_work	typeref:struct:active_work::timeval	file:
best_diff	cgminer.c	/^uint64_t best_diff = 0;$/;"	v
best_diff	miner.h	/^	uint64_t best_diff;$/;"	m	struct:pool
best_share	cgminer.c	/^static char best_share[8] = "0";$/;"	v	file:
bf1_api_stats	driver-bitfury.c	/^static struct api_data *bf1_api_stats(struct bitfury_info *info)$/;"	f	file:
bf1_close	driver-bitfury.c	/^static void bf1_close(struct cgpu_info *bitfury)$/;"	f	file:
bf1_detect_one	driver-bitfury.c	/^static bool bf1_detect_one(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:
bf1_empty_buffer	driver-bitfury.c	/^static void bf1_empty_buffer(struct cgpu_info *bitfury)$/;"	f	file:
bf1_getinfo	driver-bitfury.c	/^static bool bf1_getinfo(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:
bf1_identify	driver-bitfury.c	/^static void bf1_identify(struct cgpu_info *bitfury)$/;"	f	file:
bf1_init	driver-bitfury.c	/^static void bf1_init(struct cgpu_info *bitfury)$/;"	f	file:
bf1_open	driver-bitfury.c	/^static bool bf1_open(struct cgpu_info *bitfury)$/;"	f	file:
bf1_reset	driver-bitfury.c	/^static bool bf1_reset(struct cgpu_info *bitfury)$/;"	f	file:
bf1_scan	driver-bitfury.c	/^static int64_t bf1_scan(struct thr_info *thr, struct cgpu_info *bitfury,$/;"	f	file:
bf_offsets	driver-bitfury.c	/^const uint32_t bf_offsets[] = {-0x800000, 0, -0x400000};$/;"	v
bfl_epinfos	usbutils.c	/^static struct usb_epinfo bfl_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bfl_ints	usbutils.c	/^static struct usb_intinfo bfl_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
bflsc_api_stats	driver-bflsc.c	/^static struct api_data *bflsc_api_stats(struct cgpu_info *bflsc)$/;"	f	file:
bflsc_applog	driver-bflsc.c	/^static void bflsc_applog(struct cgpu_info *bflsc, int dev, enum usb_cmds cmd, int amount, int err)$/;"	f	file:
bflsc_detect	driver-bflsc.c	/^static void bflsc_detect(bool __maybe_unused hotplug)$/;"	f	file:
bflsc_detect_one	driver-bflsc.c	/^static struct cgpu_info *bflsc_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
bflsc_dev	driver-bflsc.h	/^struct bflsc_dev {$/;"	s
bflsc_drv	driver-bflsc.c	/^struct device_drv bflsc_drv = {$/;"	v	typeref:struct:device_drv
bflsc_flash_led	driver-bflsc.c	/^static void bflsc_flash_led(struct cgpu_info *bflsc, int dev)$/;"	f	file:
bflsc_flush_work	driver-bflsc.c	/^static void bflsc_flush_work(struct cgpu_info *bflsc)$/;"	f	file:
bflsc_get_results	driver-bflsc.c	/^static void *bflsc_get_results(void *userdata)$/;"	f	file:
bflsc_get_stats	driver-bflsc.c	/^static bool bflsc_get_stats(struct cgpu_info *bflsc)$/;"	f	file:
bflsc_get_temp	driver-bflsc.c	/^static bool bflsc_get_temp(struct cgpu_info *bflsc, int dev)$/;"	f	file:
bflsc_identify	driver-bflsc.c	/^static void bflsc_identify(struct cgpu_info *bflsc)$/;"	f	file:
bflsc_info	driver-bflsc.h	/^struct bflsc_info {$/;"	s
bflsc_initialise	driver-bflsc.c	/^static void bflsc_initialise(struct cgpu_info *bflsc)$/;"	f	file:
bflsc_manage_temp	driver-bflsc.c	/^static void bflsc_manage_temp(struct cgpu_info *bflsc, struct bflsc_dev *sc_dev,$/;"	f	file:
bflsc_qres	driver-bflsc.c	/^static bool bflsc_qres(struct cgpu_info *bflsc, char *buf, size_t bufsiz, int dev, int *err, int *amount, bool ignore)$/;"	f	file:
bflsc_queue_full	driver-bflsc.c	/^static bool bflsc_queue_full(struct cgpu_info *bflsc)$/;"	f	file:
bflsc_scanwork	driver-bflsc.c	/^static int64_t bflsc_scanwork(struct thr_info *thr)$/;"	f	file:
bflsc_send_flush_work	driver-bflsc.c	/^static void bflsc_send_flush_work(struct cgpu_info *bflsc, int dev)$/;"	f	file:
bflsc_send_work	driver-bflsc.c	/^static bool bflsc_send_work(struct cgpu_info *bflsc, int dev, bool mandatory)$/;"	f	file:
bflsc_set_fanspeed	driver-bflsc.c	/^static void bflsc_set_fanspeed(struct cgpu_info *bflsc)$/;"	f	file:
bflsc_shutdown	driver-bflsc.c	/^static void bflsc_shutdown(struct thr_info *thr)$/;"	f	file:
bflsc_thread_enable	driver-bflsc.c	/^static void bflsc_thread_enable(struct thr_info *thr)$/;"	f	file:
bflsc_thread_init	driver-bflsc.c	/^static bool bflsc_thread_init(struct thr_info *thr)$/;"	f	file:
bflsc_thread_prepare	driver-bflsc.c	/^static bool bflsc_thread_prepare(struct thr_info *thr)$/;"	f	file:
bfree_count	driver-bab.c	/^	int bfree_count;$/;"	m	struct:bab_info	file:
bfree_list	driver-bab.c	/^	BLIST *bfree_list;$/;"	m	struct:bab_info	file:
bfu0_epinfos	usbutils.c	/^static struct usb_epinfo bfu0_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bfu1_epinfos	usbutils.c	/^static struct usb_epinfo bfu1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bfu_ints	usbutils.c	/^static struct usb_intinfo bfu_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
biforce_thread_enable	driver-bitforce.c	/^static void biforce_thread_enable(struct thr_info *thr)$/;"	f	file:
bin2hex	util.c	/^char *bin2hex(const unsigned char *p, size_t len)$/;"	f
bitburner_get_core_voltage	driver-avalon.c	/^static int bitburner_get_core_voltage(struct cgpu_info *avalon)$/;"	f	file:
bitburner_get_version	driver-avalon.c	/^static void bitburner_get_version(struct cgpu_info *avalon)$/;"	f	file:
bitburner_rotate_array	driver-avalon.c	/^static void bitburner_rotate_array(struct cgpu_info *avalon)$/;"	f	file:
bitburner_send_task	driver-avalon.c	/^static int bitburner_send_task(const struct avalon_task *at, struct cgpu_info *avalon)$/;"	f	file:
bitburner_send_tasks	driver-avalon.c	/^static void *bitburner_send_tasks(void *userdata)$/;"	f	file:
bitburner_set_core_voltage	driver-avalon.c	/^static bool bitburner_set_core_voltage(struct cgpu_info *avalon, int core_voltage)$/;"	f	file:
bitforce_api_stats	driver-bitforce.c	/^static struct api_data *bitforce_api_stats(struct cgpu_info *cgpu)$/;"	f	file:
bitforce_detect	driver-bitforce.c	/^static void bitforce_detect(bool __maybe_unused hotplug)$/;"	f	file:
bitforce_detect_one	driver-bitforce.c	/^static struct cgpu_info *bitforce_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
bitforce_drv	driver-bitforce.c	/^struct device_drv bitforce_drv = {$/;"	v	typeref:struct:device_drv
bitforce_flash_led	driver-bitforce.c	/^static void bitforce_flash_led(struct cgpu_info *bitforce)$/;"	f	file:
bitforce_get_result	driver-bitforce.c	/^static int64_t bitforce_get_result(struct thr_info *thr, struct work *work)$/;"	f	file:
bitforce_get_stats	driver-bitforce.c	/^static bool bitforce_get_stats(struct cgpu_info *bitforce)$/;"	f	file:
bitforce_get_temp	driver-bitforce.c	/^static bool bitforce_get_temp(struct cgpu_info *bitforce)$/;"	f	file:
bitforce_identify	driver-bitforce.c	/^static void bitforce_identify(struct cgpu_info *bitforce)$/;"	f	file:
bitforce_initialise	driver-bitforce.c	/^static void bitforce_initialise(struct cgpu_info *bitforce, bool lock)$/;"	f	file:
bitforce_scanhash	driver-bitforce.c	/^static int64_t bitforce_scanhash(struct thr_info *thr, struct work *work, int64_t __maybe_unused max_nonce)$/;"	f	file:
bitforce_send_work	driver-bitforce.c	/^static bool bitforce_send_work(struct thr_info *thr, struct work *work)$/;"	f	file:
bitforce_shutdown	driver-bitforce.c	/^static void bitforce_shutdown(__maybe_unused struct thr_info *thr)$/;"	f	file:
bitforce_thread_init	driver-bitforce.c	/^static bool bitforce_thread_init(struct thr_info *thr)$/;"	f	file:
bitforce_thread_prepare	driver-bitforce.c	/^static bool bitforce_thread_prepare(__maybe_unused struct thr_info *thr)$/;"	f	file:
bitfury_api_stats	driver-bitfury.c	/^static struct api_data *bitfury_api_stats(struct cgpu_info *cgpu)$/;"	f	file:
bitfury_checkresults	driver-bitfury.c	/^static bool bitfury_checkresults(struct thr_info *thr, struct work *work, uint32_t nonce)$/;"	f	file:
bitfury_detect	driver-bitfury.c	/^static void bitfury_detect(bool __maybe_unused hotplug)$/;"	f	file:
bitfury_detect_one	driver-bitfury.c	/^static struct cgpu_info *bitfury_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
bitfury_drv	driver-bitfury.c	/^struct device_drv bitfury_drv = {$/;"	v	typeref:struct:device_drv
bitfury_flush_work	driver-bitfury.c	/^static void bitfury_flush_work(struct cgpu_info *bitfury)$/;"	f	file:
bitfury_get_statline_before	driver-bitfury.c	/^static void bitfury_get_statline_before(char *buf, size_t bufsiz, struct cgpu_info *cgpu)$/;"	f	file:
bitfury_identify	driver-bitfury.c	/^static void bitfury_identify(struct cgpu_info *bitfury)$/;"	f	file:
bitfury_info	driver-bitfury.h	/^struct bitfury_info {$/;"	s
bitfury_init	driver-bitfury.c	/^static void bitfury_init(struct cgpu_info *bitfury)$/;"	f	file:
bitfury_prepare	driver-bitfury.c	/^static bool bitfury_prepare(struct thr_info *thr)$/;"	f	file:
bitfury_rate	driver-bitfury.c	/^static int64_t bitfury_rate(struct bitfury_info *info)$/;"	f	file:
bitfury_scanwork	driver-bitfury.c	/^static int64_t bitfury_scanwork(struct thr_info *thr)$/;"	f	file:
bitfury_shutdown	driver-bitfury.c	/^static void bitfury_shutdown(struct thr_info *thr)$/;"	f	file:
bitfury_update_work	driver-bitfury.c	/^static void bitfury_update_work(struct cgpu_info *bitfury)$/;"	f	file:
bits	driver-bab.c	/^	uint32_t bits;$/;"	m	struct:bab_work_send	file:
bits	driver-knc-spi-fpga.c	/^	uint8_t bits;$/;"	m	struct:spidev_context	file:
bits	hf_protocol.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_serial
bits	hf_protocol.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_usb
bits	hf_protocol_be.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_serial
bits	hf_protocol_be.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_usb
bits128	cgminer.c	/^static const double bits128 = 340282366920938463463374607431768211456.0;$/;"	v	file:
bits192	cgminer.c	/^static const double bits192 = 6277101735386680763835789423207666416102355444464034512896.0;$/;"	v	file:
bits64	cgminer.c	/^static const double bits64 = 18446744073709551616.0;$/;"	v	file:
blank	driver-bflsc.c	/^static const char *blank = "";$/;"	v	file:
blank	driver-bitforce.c	/^static const char *blank = "";$/;"	v	file:
blank_get_statline_before	cgminer.c	/^void blank_get_statline_before(char *buf, size_t bufsiz, struct cgpu_info __maybe_unused *cgpu)$/;"	f
blank_merkel	util.c	/^static char *blank_merkel = "0000000000000000000000000000000000000000000000000000000000000000";$/;"	v	file:
blist	driver-bab.c	/^typedef struct blist {$/;"	s	file:
blist_count	driver-bab.c	/^	int blist_count;$/;"	m	struct:bab_info	file:
blist_lock	driver-bab.c	/^	cglock_t blist_lock;$/;"	m	struct:bab_info	file:
blk_lock	cgminer.c	/^static pthread_rwlock_t blk_lock;$/;"	v	file:
block	cgminer.c	/^	bool block;$/;"	m	struct:stratum_share	file:
block	cgminer.c	/^struct block {$/;"	s	file:
block	miner.h	/^	bool		block;$/;"	m	struct:work
block	sha2.h	/^    unsigned char block[2 * SHA256_BLOCK_SIZE];$/;"	m	struct:__anon7
blockData	driver-bflsc.h	/^	uint8_t blockData[MERKLE_BYTES];$/;"	m	struct:QueueJobStructure
block_diff	cgminer.c	/^static char block_diff[8];$/;"	v	file:
block_exists	cgminer.c	/^static bool block_exists(char *hexstr)$/;"	f	file:
block_no	cgminer.c	/^	int block_no;$/;"	m	struct:block	file:
block_seq	driver-klondike.c	/^	int block_seq;$/;"	m	struct:klist	file:
block_seq	driver-klondike.c	/^	int block_seq;$/;"	m	struct:klondike_info	file:
block_socket	util.c	/^static void block_socket(SOCKETTYPE fd)$/;"	f	file:
block_sort	cgminer.c	/^static int block_sort(struct block *blocka, struct block *blockb)$/;"	f	file:
block_timeval	cgminer.c	/^struct timeval block_timeval;$/;"	v	typeref:struct:timeval
blocks	cgminer.c	/^static struct block *blocks = NULL;$/;"	v	typeref:struct:block	file:
blocktime	cgminer.c	/^static char blocktime[32];$/;"	v	file:
bloom_bv	uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table
bloom_nbits	uthash.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table
bloom_sig	uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table
breakdown	driver-bflsc.c	/^static bool breakdown(enum breakmode mode, char *buf, int *count, char **firstname, char ***fields, char **lf)$/;"	f	file:
breakmode	driver-bflsc.c	/^enum breakmode {$/;"	g	file:
bswap_16	miner.h	129;"	d
bswap_16	miner.h	140;"	d
bswap_16	miner.h	144;"	d
bswap_32	miner.h	130;"	d
bswap_32	miner.h	141;"	d
bswap_32	miner.h	147;"	d
bswap_64	miner.h	131;"	d
bswap_64	miner.h	142;"	d
bswap_64	miner.h	151;"	d
buckets	uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table
buf	cgminer.c	/^	char *buf;$/;"	m	struct:JE	file:
buf	driver-klondike.c	/^	uint8_t buf[REPLY_SIZE-2];$/;"	m	struct:klondike_header	file:
buf	usbutils.c	/^	struct semid_ds *buf;$/;"	m	union:semun	typeref:struct:semun::semid_ds	file:
buf	util.c	/^	const void	*buf;$/;"	m	struct:upload_buffer	file:
buf	util.c	/^	void		*buf;$/;"	m	struct:data_buffer	file:
buf_read	driver-bab.c	/^	uint8_t buf_read[BAB_SPI_BUFFERS][BAB_MAXBUF];$/;"	m	struct:bab_info	file:
buf_status	driver-bab.c	/^	int buf_status[BAB_SPI_BUFFERS];$/;"	m	struct:bab_info	file:
buf_used	driver-bab.c	/^	uint32_t buf_used[BAB_SPI_BUFFERS];$/;"	m	struct:bab_info	file:
buf_write	driver-bab.c	/^	uint8_t buf_write[BAB_SPI_BUFFERS][BAB_MAXBUF];$/;"	m	struct:bab_info	file:
bufamt	usbutils.h	/^	uint32_t bufamt;$/;"	m	struct:cg_usb_device
buffer	driver-bab.c	/^	int buffer;$/;"	m	struct:bab_info	file:
buffer	usbutils.h	/^	char buffer[USB_MAX_READ];$/;"	m	struct:cg_usb_device
bufsiz	usbutils.h	/^	uint32_t bufsiz;$/;"	m	struct:cg_usb_device
bus_number	usbutils.c	/^	int bus_number;$/;"	m	struct:usb_busdev	file:
bus_number	usbutils.c	/^	uint8_t bus_number;$/;"	m	struct:resource_reply	file:
bus_number	usbutils.c	/^	uint8_t bus_number;$/;"	m	struct:resource_work	file:
bus_number	usbutils.h	/^	uint8_t bus_number;$/;"	m	struct:cg_usb_info
busdev	usbutils.c	/^} *busdev;$/;"	v	typeref:struct:usb_busdev	file:
busdev_count	usbutils.c	/^static int busdev_count = 0;$/;"	v	file:
bxf0_epinfos	usbutils.c	/^static struct usb_epinfo bxf0_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bxf1_epinfos	usbutils.c	/^static struct usb_epinfo bxf1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bxf_api_stats	driver-bitfury.c	/^static struct api_data *bxf_api_stats(struct bitfury_info *info)$/;"	f	file:
bxf_clear_buffer	driver-bitfury.c	/^static void bxf_clear_buffer(struct cgpu_info *bitfury)$/;"	f	file:
bxf_close	driver-bitfury.c	/^static void bxf_close(struct bitfury_info *info)$/;"	f	file:
bxf_detect_one	driver-bitfury.c	/^static bool bxf_detect_one(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:
bxf_get_results	driver-bitfury.c	/^static void *bxf_get_results(void *userdata)$/;"	f	file:
bxf_ints	usbutils.c	/^static struct usb_intinfo bxf_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
bxf_prepare	driver-bitfury.c	/^static bool bxf_prepare(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:
bxf_recv_msg	driver-bitfury.c	/^static int bxf_recv_msg(struct cgpu_info *bitfury, char *buf)$/;"	f	file:
bxf_scan	driver-bitfury.c	/^static int64_t bxf_scan(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:
bxf_send_flush	driver-bitfury.c	/^static bool bxf_send_flush(struct cgpu_info *bitfury)$/;"	f	file:
bxf_send_maxroll	driver-bitfury.c	/^static void bxf_send_maxroll(struct cgpu_info *bitfury, int maxroll)$/;"	f	file:
bxf_send_msg	driver-bitfury.c	/^static bool bxf_send_msg(struct cgpu_info *bitfury, char *buf, enum usb_cmds cmd)$/;"	f	file:
bxf_send_work	driver-bitfury.c	/^static bool bxf_send_work(struct cgpu_info *bitfury, struct work *work)$/;"	f	file:
bxf_update_work	driver-bitfury.c	/^static void bxf_update_work(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:
bye	api.c	/^static bool bye;$/;"	v	file:
bytes_received	miner.h	/^	uint64_t bytes_received;$/;"	m	struct:cgminer_pool_stats
bytes_sent	miner.h	/^	uint64_t bytes_sent;$/;"	m	struct:cgminer_pool_stats
calc_diff	cgminer.c	/^static void calc_diff(struct work *work, double known)$/;"	f	file:
calc_midstate	cgminer.c	/^static void calc_midstate(struct work *work)$/;"	f	file:
callapi	api-example.c	/^int callapi(char *command, char *host, short int port)$/;"	f
callback_wait	usbutils.c	/^static int callback_wait(struct usb_transfer *ut, int *transferred, unsigned int timeout)$/;"	f	file:
can_limit_work	miner.h	/^	uint64_t (*can_limit_work)(struct thr_info *);$/;"	m	struct:device_drv
can_roll	cgminer.c	/^static inline bool can_roll(struct work *work)$/;"	f	file:
cancel_usb_transfers	usbutils.c	/^void cancel_usb_transfers(void)$/;"	f
cancellable	usbutils.c	/^	bool cancellable;$/;"	m	struct:usb_transfer	file:
canroll	miner.h	/^	bool canroll;$/;"	m	struct:cgminer_pool_stats
canroll	util.c	/^	bool		canroll;$/;"	m	struct:header_info	file:
cb_len	miner.h	/^	size_t cb_len;$/;"	m	struct:stratum_work
cfg	driver-klondike.c	/^		WORKCFG cfg;$/;"	m	union:kline::__anon3	file:
cfg	driver-klondike.c	/^	KLIST *cfg;$/;"	m	struct:klondike_info	file:
cg_completion	util.c	/^struct cg_completion {$/;"	s	file:
cg_completion_timeout	util.c	/^bool cg_completion_timeout(void *fn, void *fnarg, int timeout)$/;"	f
cg_dlock	miner.h	732;"	d
cg_dwilock	miner.h	731;"	d
cg_dwlock	miner.h	730;"	d
cg_ilock	miner.h	727;"	d
cg_mvwprintw	cgminer.c	2148;"	d	file:
cg_rlock	miner.h	726;"	d
cg_runlock	miner.h	733;"	d
cg_ruwlock	miner.h	734;"	d
cg_ulock	miner.h	728;"	d
cg_usb_device	usbutils.h	/^struct cg_usb_device {$/;"	s
cg_usb_info	usbutils.h	/^struct cg_usb_info {$/;"	s
cg_usb_stats	usbutils.c	/^struct cg_usb_stats {$/;"	s	file:
cg_usb_stats_details	usbutils.c	/^struct cg_usb_stats_details {$/;"	s	file:
cg_usb_stats_item	usbutils.c	/^struct cg_usb_stats_item {$/;"	s	file:
cg_usb_tmo	usbutils.h	/^struct cg_usb_tmo {$/;"	s
cg_wlock	miner.h	729;"	d
cg_wprintw	cgminer.c	2153;"	d	file:
cg_wunlock	miner.h	735;"	d
cglock	util.h	/^struct cglock {$/;"	s
cglock_destroy	miner.h	/^static inline void cglock_destroy(cglock_t *lock)$/;"	f
cglock_init	miner.h	725;"	d
cglock_t	util.h	/^typedef struct cglock cglock_t;$/;"	t	typeref:struct:cglock
cglock_typ	miner.h	/^enum cglock_typ {$/;"	g
cgminer_id	miner.h	/^	int cgminer_id;$/;"	m	struct:cgpu_info
cgminer_id_count	cgminer.c	/^static int cgminer_id_count = 0;$/;"	v	file:
cgminer_path	cgminer.c	/^char *cgminer_path;$/;"	v
cgminer_pool_stats	miner.h	/^	struct cgminer_pool_stats cgminer_pool_stats;$/;"	m	struct:pool	typeref:struct:pool::cgminer_pool_stats
cgminer_pool_stats	miner.h	/^struct cgminer_pool_stats {$/;"	s
cgminer_stats	miner.h	/^	struct cgminer_stats cgminer_stats;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::cgminer_stats
cgminer_stats	miner.h	/^	struct cgminer_stats cgminer_stats;$/;"	m	struct:pool	typeref:struct:pool::cgminer_stats
cgminer_stats	miner.h	/^struct cgminer_stats {$/;"	s
cgminer_usb_lock	usbutils.c	/^static bool cgminer_usb_lock(struct device_drv *drv, libusb_device *dev)$/;"	f	file:
cgminer_usb_lock_bd	usbutils.c	/^static bool cgminer_usb_lock_bd(struct device_drv *drv, uint8_t bus_number, uint8_t device_address)$/;"	f	file:
cgminer_usb_unlock	usbutils.c	/^static void cgminer_usb_unlock(struct device_drv *drv, libusb_device *dev)$/;"	f	file:
cgminer_usb_unlock_bd	usbutils.c	/^static void cgminer_usb_unlock_bd(struct device_drv *drv, uint8_t bus_number, uint8_t device_address)$/;"	f	file:
cgpu	miner.h	/^	struct cgpu_info *cgpu;$/;"	m	struct:thr_info	typeref:struct:thr_info::cgpu_info
cgpu_data	miner.h	/^	void *cgpu_data;$/;"	m	struct:thr_info
cgpu_info	miner.h	/^struct cgpu_info {$/;"	s
cgsem	usbutils.c	/^	cgsem_t cgsem;$/;"	m	struct:usb_transfer	file:
cgsem	util.c	/^	cgsem_t cgsem;$/;"	m	struct:cg_completion	file:
cgsem	util.h	/^struct cgsem {$/;"	s
cgsem_destroy	util.c	/^void cgsem_destroy(cgsem_t *cgsem)$/;"	f
cgsem_init	util.h	145;"	d
cgsem_mswait	util.h	148;"	d
cgsem_post	util.h	146;"	d
cgsem_reset	util.c	/^void cgsem_reset(cgsem_t *cgsem)$/;"	f
cgsem_t	util.h	/^typedef sem_t cgsem_t;$/;"	t
cgsem_t	util.h	/^typedef struct cgsem cgsem_t;$/;"	t	typeref:struct:cgsem
cgsem_wait	util.h	147;"	d
cgsleep_ms	util.c	/^void cgsleep_ms(int ms)$/;"	f
cgsleep_ms_r	util.c	/^void cgsleep_ms_r(cgtimer_t *ts_start, int ms)$/;"	f
cgsleep_prepare_r	util.h	116;"	d
cgsleep_spec	util.c	/^static void cgsleep_spec(struct timespec *ts_diff, const struct timespec *ts_start)$/;"	f	file:
cgsleep_us	util.c	/^void cgsleep_us(int64_t us)$/;"	f
cgsleep_us_r	util.c	/^void cgsleep_us_r(cgtimer_t *ts_start, int64_t us)$/;"	f
cgtime	util.c	/^void cgtime(struct timeval *tv)$/;"	f
cgtimer_sub	util.c	/^void cgtimer_sub(cgtimer_t *a, cgtimer_t *b, cgtimer_t *res)$/;"	f
cgtimer_t	util.h	/^typedef LARGE_INTEGER cgtimer_t;$/;"	t
cgtimer_t	util.h	/^typedef struct timespec cgtimer_t;$/;"	t	typeref:struct:timespec
cgtimer_time	util.c	/^void cgtimer_time(cgtimer_t *ts_start)$/;"	f
cgtimer_to_ms	util.c	/^int cgtimer_to_ms(cgtimer_t *cgt)$/;"	f
cgusb_check_init	usbutils.c	/^static void cgusb_check_init()$/;"	f	file:
cgusb_fd_lock	usbutils.c	/^static cglock_t cgusb_fd_lock;$/;"	v	file:
cgusb_lock	usbutils.c	/^static pthread_mutex_t cgusb_lock;$/;"	v	file:
cgusbres_lock	usbutils.c	/^static pthread_mutex_t cgusbres_lock;$/;"	v	file:
ch_lock	cgminer.c	/^cglock_t ch_lock;$/;"	v
change_logwinsize	cgminer.c	/^static inline void change_logwinsize(void)$/;"	f	file:
check	driver-icarus.c	/^	uint8_t check;$/;"	m	struct:ICARUS_WORK	file:
check_connect	api.c	/^static bool check_connect(struct sockaddr_in *cli, char **connectaddr, char *group)$/;"	f	file:
check_temperature	driver-modminer.c	/^static void check_temperature(struct thr_info *thr)$/;"	f	file:
check_udp_port_in_use	driver-gridseed.c	/^static int check_udp_port_in_use(short port)$/;"	f	file:
check_winsizes	cgminer.c	/^static void check_winsizes(void)$/;"	f	file:
checkcommand	api.c	/^static void checkcommand(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, char group)$/;"	f	file:
chip	driver-bab.c	/^	int chip;$/;"	m	struct:rlist	file:
chip_address	hf_protocol.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_header
chip_address	hf_protocol.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_pll_config
chip_address	hf_protocol_be.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_header
chip_address	hf_protocol_be.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_pll_config
chip_bad	driver-bab.c	/^	uint64_t chip_bad[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
chip_bank	driver-bab.c	/^	uint8_t chip_bank[BAB_MAXCHIPS+1];$/;"	m	struct:bab_info	file:
chip_busy	driver-bab.c	/^	int chip_busy[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
chip_conf	driver-bab.c	/^	uint8_t chip_conf[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
chip_count	driver-bab.c	/^	int chip_count;$/;"	m	struct:bab_info	file:
chip_fast	driver-bab.c	/^	uint8_t chip_fast[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
chip_good	driver-bab.c	/^	uint64_t chip_good[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
chip_input	driver-bab.c	/^	struct bab_work_send chip_input[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::bab_work_send	file:
chip_list	driver-bab.c	/^	BLIST *chip_list[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
chip_miso	driver-bab.c	/^	uint64_t chip_miso[BAB_MAXCHIPS]; \/\/ msio errors$/;"	m	struct:bab_info	file:
chip_ncore	driver-bab.c	/^	uint64_t chip_ncore[BAB_MAXCHIPS][BAB_X_COORD][BAB_Y_COORD];$/;"	m	struct:bab_info	file:
chip_nonces	driver-bab.c	/^	uint64_t chip_nonces[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
chip_num	driver-avalon.h	/^	uint8_t chip_num;$/;"	m	struct:avalon_result
chip_off	driver-bab.c	/^	uint32_t chip_off[BAB_SPI_BUFFERS][BAB_MAXCHIPS+1];$/;"	m	struct:bab_info	file:
chip_prev	driver-bab.c	/^	struct bab_work_reply chip_prev[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::bab_work_reply	file:
chip_results	driver-bab.c	/^	struct bab_work_reply chip_results[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::bab_work_reply	file:
chip_spie	driver-bab.c	/^	uint64_t chip_spie[BAB_MAXCHIPS]; \/\/ spi errors$/;"	m	struct:bab_info	file:
chip_spis	driver-bab.c	/^	uint32_t chip_spis[BAB_MAXCHIPS+1];$/;"	m	struct:bab_info	file:
chip_start	driver-bab.c	/^	struct timeval chip_start[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:
chipcount	driver-klondike.c	/^	uint8_t chipcount;$/;"	m	struct:klondike_status	file:
chips	driver-bab.c	/^	int chips;$/;"	m	struct:bab_info	file:
chips	driver-bflsc.h	/^	char *chips;$/;"	m	struct:bflsc_dev
chips	driver-bitfury.h	/^	int chips;$/;"	m	struct:bitfury_info
chips	driver-gridseed.c	/^	int				chips; \/\/chips per module$/;"	m	struct:s_gridseed_info	file:
chipstats	driver-klondike.c	/^	uint32_t *chipstats;$/;"	m	struct:device_info	file:
clean	miner.h	/^	bool clean;$/;"	m	struct:stratum_work
clean_up	cgminer.c	/^static void clean_up(bool restarting)$/;"	f	file:
clean_work	cgminer.c	/^void clean_work(struct work *work)$/;"	f
clear_err_count	usbutils.h	/^	uint64_t clear_err_count;$/;"	m	struct:cg_usb_info
clear_fail_count	usbutils.h	/^	uint64_t clear_fail_count;$/;"	m	struct:cg_usb_info
clear_logwin	cgminer.c	/^void clear_logwin(void)$/;"	f
clear_pool_work	cgminer.c	/^static void clear_pool_work(struct pool *pool)$/;"	f	file:
clear_sock	util.c	/^static void clear_sock(struct pool *pool)$/;"	f	file:
clear_sockbuf	util.c	/^static void clear_sockbuf(struct pool *pool)$/;"	f	file:
clear_stratum_shares	cgminer.c	/^void clear_stratum_shares(struct pool *pool)$/;"	f
clock	miner.h	/^	unsigned char clock;$/;"	m	struct:cgpu_info
clock_diagnostic	hf_protocol.h	/^	uint32_t clock_diagnostic:1;                \/\/ Never set this$/;"	m	struct:hf_config_data
clock_diagnostic	hf_protocol_be.h	/^	uint32_t clock_diagnostic:1;                \/\/ Never set this$/;"	m	struct:hf_config_data
clocknodev	driver-modminer.c	/^static const char *clocknodev = "clock failed - no device";$/;"	v	file:
clockoldwork	driver-modminer.c	/^static const char *clockoldwork = "clock already changed for this work";$/;"	v	file:
clockreplyfail	driver-modminer.c	/^static const char *clockreplyfail = "clock reply failed";$/;"	v	file:
clocksetfail	driver-modminer.c	/^static const char *clocksetfail = "clock set command failed";$/;"	v	file:
clocktoohi	driver-modminer.c	/^static const char *clocktoohi = "clock too high";$/;"	v	file:
clocktoolow	driver-modminer.c	/^static const char *clocktoolow = "clock too low";$/;"	v	file:
clone	miner.h	/^	bool		clone;$/;"	m	struct:work
clone_available	cgminer.c	/^static bool clone_available(void)$/;"	f	file:
clone_queued_work_bymidstate	cgminer.c	/^struct work *clone_queued_work_bymidstate(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)$/;"	f
clone_work	cgminer.c	/^static struct work *clone_work(struct work *work)$/;"	f	file:
cloned	miner.h	/^	bool		cloned;$/;"	m	struct:work
close	api.c	/^	bool close;$/;"	m	struct:io_data	file:
cmd	driver-hashfast.c	/^	uint8_t cmd;$/;"	m	struct:hfa_cmd	file:
cmd	driver-icarus.c	/^	uint8_t cmd;$/;"	m	struct:ICARUS_WORK	file:
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:_workresult	file:
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:_worktask	file:
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_cfg	file:
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_header	file:
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_id	file:
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_status	file:
cmd	driver-knc-spi-fpga.c	/^	uint32_t cmd		:4;$/;"	m	struct:spi_request	file:
cmd_name	driver-hashfast.c	/^	char *cmd_name;$/;"	m	struct:hfa_cmd	file:
cmds	api.c	/^} cmds[] = {$/;"	v	typeref:struct:CMDS
cmr1_epinfos	usbutils.c	/^static struct usb_epinfo cmr1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr1_ints	usbutils.c	/^static struct usb_intinfo cmr1_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
cmr2_command	driver-icarus.c	/^static void cmr2_command(struct cgpu_info *icarus, uint8_t cmd, uint8_t data)$/;"	f	file:
cmr2_commands	driver-icarus.c	/^static void cmr2_commands(struct cgpu_info *icarus)$/;"	f	file:
cmr2_epinfos0	usbutils.c	/^static struct usb_epinfo cmr2_epinfos0[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr2_epinfos1	usbutils.c	/^static struct usb_epinfo cmr2_epinfos1[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr2_epinfos2	usbutils.c	/^static struct usb_epinfo cmr2_epinfos2[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr2_epinfos3	usbutils.c	/^static struct usb_epinfo cmr2_epinfos3[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr2_ints	usbutils.c	/^static struct usb_intinfo cmr2_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
cmr2_speed	driver-icarus.c	/^	uint8_t cmr2_speed;$/;"	m	struct:ICARUS_INFO	file:
cnfbuf	cgminer.c	/^char *cnfbuf = NULL;$/;"	v
cnx_needed	cgminer.c	/^static bool cnx_needed(struct pool *pool)$/;"	f	file:
code	api-example.c	/^		char *code;$/;"	m	struct:WSAERRORS	file:
code	api.c	/^	char *code;$/;"	m	struct:WSAERRORS	file:
code	api.c	/^	const int code;$/;"	m	struct:CODES	file:
code_parameters	api.c	/^enum code_parameters {$/;"	g	file:
code_severity	api.c	/^enum code_severity {$/;"	g	file:
codes	api.c	/^} codes[] = {$/;"	v	typeref:struct:CODES
coinbase	miner.h	/^	char		*coinbase;$/;"	m	struct:work
coinbase	miner.h	/^	unsigned char *coinbase;$/;"	m	struct:pool
coinbase_len	miner.h	/^	int coinbase_len;$/;"	m	struct:pool
coinbasetxn	miner.h	/^	char *coinbasetxn;$/;"	m	struct:pool
commands	api.c	/^	char *commands;$/;"	m	struct:APIGROUPS	file:
complete_usb_transfer	usbutils.c	/^static void complete_usb_transfer(struct usb_transfer *ut)$/;"	f	file:
completion_thread	util.c	/^void *completion_thread(void *arg)$/;"	f
cond	miner.h	/^	pthread_cond_t		cond;$/;"	m	struct:thread_q
config	usbutils.h	/^	int config;$/;"	m	struct:usb_find_devices
config_data	driver-hashfast.h	/^	struct hf_config_data config_data;          \/\/ Configuration data used from USB_INIT$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_config_data
config_loaded	cgminer.c	/^static bool config_loaded;$/;"	v	file:
console_lock	cgminer.c	/^pthread_mutex_t console_lock;$/;"	v
continuous_ioerr_count	usbutils.h	/^	uint32_t continuous_ioerr_count;$/;"	m	struct:cg_usb_info
control_init	driver-klondike.c	/^static void control_init(struct cgpu_info *klncgpu)$/;"	f	file:
control_lock	cgminer.c	/^cglock_t control_lock;$/;"	v
control_thr	cgminer.c	/^struct thr_info *control_thr;$/;"	v	typeref:struct:thr_info
convert_to_work	cgminer.c	/^static void convert_to_work(json_t *val, int rolltime, struct pool *pool, struct timeval *tv_lp, struct timeval *tv_lp_reply)$/;"	f	file:
copy	miner.h	/^	bool copy;$/;"	m	struct:device_drv
copy_drv	cgminer.c	/^struct device_drv *copy_drv(struct device_drv *drv)$/;"	f
copy_time	util.c	/^void copy_time(struct timeval *dest, const struct timeval *src)$/;"	f
copy_work	miner.h	1394;"	d
copy_work_noffset	cgminer.c	/^struct work *copy_work_noffset(struct work *base_work, int noffset)$/;"	f
copyadvanceafter	api.c	/^static void copyadvanceafter(char ch, char **param, char **buf)$/;"	f	file:
core	driver-knc-spi-fpga.c	/^	uint32_t core;$/;"	m	struct:spi_response	file:
core	driver-knc-spi-fpga.c	/^	uint8_t core;$/;"	m	struct:core_disa_data	file:
core_address	hf_protocol.h	/^	uint8_t  core_address;$/;"	m	struct:hf_header
core_address	hf_protocol_be.h	/^	uint8_t  core_address;$/;"	m	struct:hf_header
core_bad	driver-bab.c	/^	uint64_t core_bad[BAB_MAXCHIPS][BAB_CORES];$/;"	m	struct:bab_info	file:
core_bitmap	driver-hashfast.h	/^	uint32_t *core_bitmap;                      \/\/ Core OK bitmap test results, run with PLL Bypassed$/;"	m	struct:hashfast_info
core_bitmap_size	driver-hashfast.h	/^	int core_bitmap_size;                       \/\/ in bytes$/;"	m	struct:hashfast_info
core_count	driver-hashfast.h	/^	int core_count;                             \/\/ # of cores per chip$/;"	m	struct:hashfast_info
core_disa_data	driver-knc-spi-fpga.c	/^struct core_disa_data {$/;"	s	file:
core_good	driver-bab.c	/^	uint64_t core_good[BAB_MAXCHIPS][BAB_CORES];$/;"	m	struct:bab_info	file:
core_hw	driver-bflsc.h	/^	int core_hw[17];$/;"	m	struct:bflsc_info
core_nonce_fifo_full	driver-hashfast.h	/^	uint64_t core_nonce_fifo_full;              \/\/ Core nonce Q overrun events$/;"	m	struct:hf_long_statistics
core_nonce_fifo_full	hf_protocol.h	/^	uint8_t core_nonce_fifo_full;               \/\/ Core nonce Q overrun events$/;"	m	struct:hf_statistics
core_nonce_fifo_full	hf_protocol_be.h	/^	uint8_t core_nonce_fifo_full;               \/\/ Core nonce Q overrun events$/;"	m	struct:hf_statistics
core_nonces	driver-bflsc.h	/^	int core_nonces[17];$/;"	m	struct:bflsc_info
core_ntime_roll	driver-hashfast.h	/^	int core_ntime_roll;                        \/\/ Total core ntime roll amount$/;"	m	struct:hashfast_info
core_ntime_roll	hf_protocol.h	/^	uint16_t core_ntime_roll;                   \/\/ Total core ntime roll amount$/;"	m	struct:hf_usb_init_options
core_ntime_roll	hf_protocol_be.h	/^	uint16_t core_ntime_roll;                   \/\/ Total core ntime roll amount$/;"	m	struct:hf_usb_init_options
core_voltage	driver-avalon.h	/^	int core_voltage;$/;"	m	struct:avalon_info
core_voltage	hf_protocol.h	/^	uint8_t  core_voltage[6];                   \/\/ Core voltage$/;"	m	struct:hf_g1_monitor
core_voltage	hf_protocol_be.h	/^	uint8_t  core_voltage[6];                   \/\/ Core voltage$/;"	m	struct:hf_g1_monitor
count	driver-icarus.c	/^	int count;$/;"	m	struct:ICARUS_INFO	file:
count	usbutils.c	/^	int count;$/;"	m	struct:driver_count	file:
count	usbutils.c	/^	uint64_t count;$/;"	m	struct:cg_usb_stats_item	file:
count	usbutils.h	/^	uint32_t count;$/;"	m	struct:cg_usb_tmo
count	uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket
cp_prio	cgminer.c	/^static int cp_prio(void)$/;"	f	file:
cr_cond	miner.h	/^	pthread_cond_t cr_cond;$/;"	m	struct:pool
crc8	hf_protocol.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_header
crc8	hf_protocol.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_pll_config
crc8	hf_protocol.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_usb_init_header
crc8	hf_protocol_be.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_header
crc8	hf_protocol_be.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_pll_config
crc8	hf_protocol_be.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_usb_init_header
crc8_table	driver-hashfast.c	/^static unsigned char crc8_table[256];	\/* CRC-8 table *\/$/;"	v	file:
ctlr_ver	driver-avalon.h	/^	uint32_t ctlr_ver;$/;"	m	struct:avalon_info
ctrl_transfer	usbutils.h	/^	int ctrl_transfer;$/;"	m	struct:usb_intinfo
ctx	driver-knc-spi-fpga.c	/^	struct spidev_context *ctx;$/;"	m	struct:knc_state	typeref:struct:knc_state::spidev_context	file:
cur	api.c	/^	char *cur;$/;"	m	struct:io_data	file:
curl	miner.h	/^	CURL *curl;$/;"	m	struct:curl_ent
curl_debug_cb	util.c	/^static int curl_debug_cb(__maybe_unused CURL *handle, curl_infotype type,$/;"	f	file:
curl_easy_cleanup	miner.h	17;"	d
curl_easy_init	miner.h	16;"	d
curl_ent	miner.h	/^struct curl_ent {$/;"	s
curl_global_cleanup	miner.h	18;"	d
curl_global_init	miner.h	20;"	d
curlring	miner.h	/^	struct list_head curlring;$/;"	m	struct:pool	typeref:struct:pool::list_head
curls	miner.h	/^	int curls;$/;"	m	struct:pool
curly	cgminer.c	/^char *curly = ":D";$/;"	v
current_block	cgminer.c	/^static char current_block[32];$/;"	v	file:
current_diff	cgminer.c	/^double current_diff = 0xFFFFFFFFFFFFFFFFULL;$/;"	v
current_hash	cgminer.c	/^char current_hash[68];$/;"	v
current_pool	cgminer.c	/^struct pool *current_pool(void)$/;"	f
currentpool	cgminer.c	/^static struct pool *currentpool = NULL;$/;"	v	typeref:struct:pool	file:
curses_active	cgminer.c	/^bool curses_active;$/;"	v	file:
curses_active_forcelocked	cgminer.c	/^static bool curses_active_forcelocked(void)$/;"	f	file:
curses_active_locked	cgminer.c	/^static bool curses_active_locked(void)$/;"	f	file:
curses_input	cgminer.c	/^char *curses_input(const char *query)$/;"	f
curses_int	cgminer.c	/^int curses_int(const char *query)$/;"	f
curses_print_devstatus	cgminer.c	/^static void curses_print_devstatus(struct cgpu_info *cgpu, int count)$/;"	f	file:
curses_print_status	cgminer.c	/^static void curses_print_status(void)$/;"	f	file:
curtime	miner.h	/^	uint32_t curtime;$/;"	m	struct:pool
cutofftemp	miner.h	/^	int cutofftemp;$/;"	m	struct:cgpu_info
cvtCToKln	driver-klondike.c	/^static int cvtCToKln(double deg)$/;"	f	file:
cvtKlnToC	driver-klondike.c	/^static double cvtKlnToC(uint8_t temp)$/;"	f	file:
cycles	driver-bitfury.h	/^	int cycles;$/;"	m	struct:bitfury_info
data	driver-avalon.h	/^	uint8_t data[12];$/;"	m	struct:avalon_result
data	driver-avalon.h	/^	uint8_t data[12];$/;"	m	struct:avalon_task
data	driver-icarus.c	/^	uint8_t data;$/;"	m	struct:ICARUS_WORK	file:
data	driver-knc-spi-fpga.c	/^	uint32_t data[WORK_DATA_WORDS];$/;"	m	struct:spi_request	file:
data	miner.h	/^	unsigned char	data[128];$/;"	m	struct:work
data	miner.h	/^	void *data;$/;"	m	struct:api_data
data	util.c	/^	void			*data;$/;"	m	struct:tq_ent	file:
data_buffer	util.c	/^struct data_buffer {$/;"	s	file:
data_length	hf_protocol.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks$/;"	m	struct:hf_usb_init_header
data_length	hf_protocol.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks, 0=no data$/;"	m	struct:hf_header
data_length	hf_protocol.h	/^	uint8_t  data_length;                   \/\/ Always 0$/;"	m	struct:hf_pll_config
data_length	hf_protocol_be.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks$/;"	m	struct:hf_usb_init_header
data_length	hf_protocol_be.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks, 0=no data$/;"	m	struct:hf_header
data_length	hf_protocol_be.h	/^	uint8_t  data_length;                   \/\/ Always 0$/;"	m	struct:hf_pll_config
data_lock	miner.h	/^	cglock_t data_lock;$/;"	m	struct:pool
data_was_malloc	miner.h	/^	bool data_was_malloc;$/;"	m	struct:api_data
databuf_free	util.c	/^static void databuf_free(struct data_buffer *db)$/;"	f	file:
datestamp	cgminer.c	/^static char datestamp[40];$/;"	v	file:
dead	driver-bflsc.h	/^	bool dead; \/\/ TODO: handle seperate x-link devices failing?$/;"	m	struct:bflsc_dev
death_stage_one	miner.h	/^	bool death_stage_one;$/;"	m	struct:modminer_fpga_state
debugstate	api.c	/^static void debugstate(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
decay_time	cgminer.c	/^void decay_time(double *f, double fadd, double fsecs)$/;"	f
decius_time	util.c	/^static void decius_time(lldiv_t *lidiv)$/;"	f	file:
decnonce	driver-bab.c	/^static uint32_t decnonce(uint32_t in)$/;"	f	file:
decnonce	driver-bitfury.c	/^static uint32_t decnonce(uint32_t in)$/;"	f	file:
def_conf	cgminer.c	/^static const char def_conf[] = "cgminer.conf";$/;"	v	file:
default_config	cgminer.c	/^static char *default_config;$/;"	v	file:
default_ms_work	driver-bflsc.h	/^	unsigned int default_ms_work;$/;"	m	struct:bflsc_info
default_save_file	cgminer.c	/^void default_save_file(char *filename)$/;"	f
delay	driver-knc-spi-fpga.c	/^	uint16_t delay;$/;"	m	struct:spidev_context	file:
delay_count	driver-klondike.c	/^	double delay_count;$/;"	m	struct:klondike_info	file:
delay_max	driver-klondike.c	/^	double delay_max;$/;"	m	struct:klondike_info	file:
delay_min	driver-klondike.c	/^	double delay_min;$/;"	m	struct:klondike_info	file:
delay_total	driver-klondike.c	/^	double delay_total;$/;"	m	struct:klondike_info	file:
description	api.c	/^	const char *description;$/;"	m	struct:CODES	file:
descriptor	usbutils.h	/^	struct libusb_device_descriptor *descriptor;$/;"	m	struct:cg_usb_device	typeref:struct:cg_usb_device::libusb_device_descriptor
destype	usbutils.c	/^static const char *destype(uint8_t bDescriptorType)$/;"	f	file:
details	usbutils.c	/^	struct cg_usb_stats_details *details;$/;"	m	struct:cg_usb_stats	typeref:struct:cg_usb_stats::cg_usb_stats_details	file:
detect_stratum	cgminer.c	/^bool detect_stratum(struct pool *pool, char *url)$/;"	f
detectone_func_t	fpgautils.h	/^typedef bool(*detectone_func_t)(const char*);$/;"	t
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:_workresult	file:
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:_worktask	file:
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_cfg	file:
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_header	file:
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_id	file:
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_status	file:
dev_comms_error_count	miner.h	/^	int dev_comms_error_count;$/;"	m	struct:cgpu_info
dev_dead_idle_600_count	miner.h	/^	int dev_dead_idle_600_count;$/;"	m	struct:cgpu_info
dev_enable	miner.h	/^enum dev_enable {$/;"	g
dev_error	util.c	/^void dev_error(struct cgpu_info *dev, enum dev_reason reason)$/;"	f
dev_from_id	cgminer.c	/^int dev_from_id(int thr_id)$/;"	f
dev_nostart_count	miner.h	/^	int dev_nostart_count;$/;"	m	struct:cgpu_info
dev_over_heat_count	miner.h	/^	int dev_over_heat_count;	\/\/ It's a warning but worth knowing$/;"	m	struct:cgpu_info
dev_queue_len	driver-gridseed.c	/^	int				dev_queue_len;$/;"	m	struct:s_gridseed_info	file:
dev_reason	miner.h	/^enum dev_reason {$/;"	g
dev_sick_idle_60_count	miner.h	/^	int dev_sick_idle_60_count;$/;"	m	struct:cgpu_info
dev_start_tv	miner.h	/^	struct timeval dev_start_tv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::timeval
dev_thermal_cutoff_count	miner.h	/^	int dev_thermal_cutoff_count;$/;"	m	struct:cgpu_info
dev_throttle_count	miner.h	/^	int dev_throttle_count;$/;"	m	struct:cgpu_info
dev_width	cgminer.c	/^static int dev_width;$/;"	v	file:
devcursor	cgminer.c	/^static int devcursor, logstart, logcursor;$/;"	v	file:
devdetails	api.c	/^static void devdetails(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
deven	miner.h	/^	enum dev_enable deven;$/;"	m	struct:cgpu_info	typeref:enum:cgpu_info::dev_enable
devflag	miner.h	/^	bool		devflag;$/;"	m	struct:work
deviceAddress	driver-bflsc.h	/^	uint8_t deviceAddress;$/;"	m	struct:DataForwardToChain
device_address	usbutils.c	/^	int device_address;$/;"	m	struct:usb_busdev	file:
device_address	usbutils.c	/^	uint8_t device_address;$/;"	m	struct:resource_reply	file:
device_address	usbutils.c	/^	uint8_t device_address;$/;"	m	struct:resource_work	file:
device_address	usbutils.h	/^	uint8_t device_address;$/;"	m	struct:cg_usb_info
device_data	miner.h	/^	void *device_data;$/;"	m	struct:cgpu_info
device_diff	miner.h	/^	double		device_diff;$/;"	m	struct:work
device_drv	miner.h	/^struct device_drv {$/;"	s
device_id	miner.h	/^	int device_id;$/;"	m	struct:cgpu_info
device_id	usbutils.c	/^	int device_id;$/;"	m	struct:cg_usb_stats	file:
device_info	driver-klondike.c	/^typedef struct device_info {$/;"	s	file:
device_last_not_well	miner.h	/^	time_t device_last_not_well;$/;"	m	struct:cgpu_info
device_last_well	miner.h	/^	time_t device_last_well;$/;"	m	struct:cgpu_info
device_mutex	miner.h	/^	pthread_mutex_t device_mutex;$/;"	m	struct:cgpu_info
device_not_well_reason	miner.h	/^	enum dev_reason device_not_well_reason;$/;"	m	struct:cgpu_info	typeref:enum:cgpu_info::dev_reason
device_path	miner.h	/^	char *device_path;$/;"	m	struct:cgpu_info
device_sequence_head	driver-hashfast.h	/^	uint16_t device_sequence_head;              \/\/ DEVICE: The most recent sequence number the device dispatched$/;"	m	struct:hashfast_info
device_sequence_tail	driver-hashfast.h	/^	uint16_t device_sequence_tail;              \/\/ DEVICE: The most recently completed job in the device$/;"	m	struct:hashfast_info
device_target	miner.h	/^	unsigned char	device_target[32];$/;"	m	struct:work
device_thread	miner.h	/^	int		device_thread;$/;"	m	struct:thr_info
device_type	driver-hashfast.h	/^	int device_type;                            \/\/ What sort of device this is$/;"	m	struct:hashfast_info
devices	cgminer.c	/^struct cgpu_info **devices;$/;"	v	typeref:struct:cgpu_info
devices	driver-knc-spi-fpga.c	/^	int devices;$/;"	m	struct:knc_state	file:
devices_enabled	cgminer.c	/^static bool devices_enabled[MAX_DEVICES];$/;"	v	file:
devices_lock	cgminer.c	/^pthread_rwlock_t devices_lock;$/;"	v
devinfo	driver-klondike.c	/^	DEVINFO *devinfo;$/;"	m	struct:klondike_info	file:
devlock	usbutils.h	/^	cglock_t devlock;$/;"	m	struct:cg_usb_info
devstatus	api.c	/^static void devstatus(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
did_lock	driver-bab.c	/^	pthread_mutex_t did_lock;$/;"	m	struct:bab_info	file:
didnts	api.c	/^	uint64_t didnts; \/\/ should be tries - dids$/;"	m	struct:lockinfo	file:
dids	api.c	/^	uint64_t dids;$/;"	m	struct:lockinfo	file:
die	hf_protocol.h	/^	struct hf_g1_monitor die;                   \/\/ Die sensors - 8 bytes$/;"	m	struct:hf_g1_die_data	typeref:struct:hf_g1_die_data::hf_g1_monitor
die	hf_protocol_be.h	/^	struct hf_g1_monitor die;                   \/\/ Die sensors - 8 bytes$/;"	m	struct:hf_g1_die_data	typeref:struct:hf_g1_die_data::hf_g1_monitor
die_statistics	driver-hashfast.h	/^	struct hf_long_statistics *die_statistics;  \/\/ Array of per-die error counters$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_long_statistics
die_status	driver-hashfast.h	/^	struct hf_g1_die_data *die_status;          \/\/ Array of per-die voltage, current, temperature sensor data$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_g1_die_data
die_temperature	hf_protocol.h	/^	uint16_t die_temperature;                   \/\/ Die temperature ADC count$/;"	m	struct:hf_g1_monitor
die_temperature	hf_protocol_be.h	/^	uint16_t die_temperature;                   \/\/ Die temperature ADC count$/;"	m	struct:hf_g1_monitor
diff	miner.h	/^	char diff[8];$/;"	m	struct:pool
diff	miner.h	/^	double diff;$/;"	m	struct:stratum_work
diff1	miner.h	/^	int diff1;$/;"	m	struct:cgpu_info
diff1	miner.h	/^	int diff1;$/;"	m	struct:pool
diff_accepted	miner.h	/^	double diff_accepted;$/;"	m	struct:cgpu_info
diff_accepted	miner.h	/^	double diff_accepted;$/;"	m	struct:pool
diff_rejected	miner.h	/^	double diff_rejected;$/;"	m	struct:cgpu_info
diff_rejected	miner.h	/^	double diff_rejected;$/;"	m	struct:pool
diff_stale	miner.h	/^	double diff_stale;$/;"	m	struct:pool
disa_begin	driver-knc-spi-fpga.c	/^	struct timeval disa_begin;$/;"	m	struct:core_disa_data	typeref:struct:core_disa_data::timeval	file:
disa_cnt	driver-knc-spi-fpga.c	/^	uint8_t disa_cnt[MAX_ASICS * 256];$/;"	m	struct:knc_state	file:
disa_cores_fifo	driver-knc-spi-fpga.c	/^	struct core_disa_data disa_cores_fifo[KNC_DISA_CORES_SIZE];$/;"	m	struct:knc_state	typeref:struct:knc_state::core_disa_data	file:
disable_core	driver-knc-spi-fpga.c	/^static void disable_core(uint8_t asic, uint8_t core)$/;"	f	file:
disable_curses	cgminer.c	/^static void disable_curses(void)$/;"	f	file:
disable_curses_windows	cgminer.c	/^static void disable_curses_windows(void)$/;"	f	file:
disable_pool	cgminer.c	/^static void disable_pool(struct pool *pool)$/;"	f	file:
disable_sensors	hf_protocol.h	/^	uint8_t  disable_sensors:1;                 \/\/ Diagnostic$/;"	m	struct:hf_config_data
disable_sensors	hf_protocol_be.h	/^	uint8_t  disable_sensors:1;                 \/\/ Diagnostic$/;"	m	struct:hf_config_data
disablepool	api.c	/^static void disablepool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
discard_last	driver-bab.c	/^static void discard_last(struct cgpu_info *babcgpu, int chip)$/;"	f	file:
discard_stale	cgminer.c	/^static void discard_stale(void)$/;"	f	file:
discard_work	cgminer.c	/^void discard_work(struct work *work)$/;"	f
discarded_work	miner.h	/^	unsigned int discarded_work;$/;"	m	struct:pool
display	api-example.c	/^void display(char *buf)$/;"	f
display_devs	cgminer.c	/^char *display_devs(int *ndevs)$/;"	f
display_kline	driver-klondike.c	/^static void display_kline(struct cgpu_info *klncgpu, KLINE *kline, const char *msg)$/;"	f	file:
display_options	cgminer.c	/^static void display_options(void)$/;"	f	file:
display_pool_summary	cgminer.c	/^static void display_pool_summary(struct pool *pool)$/;"	f	file:
display_pools	cgminer.c	/^static void display_pools(void)$/;"	f	file:
display_send_kline	driver-klondike.c	/^static void display_send_kline(struct cgpu_info *klncgpu, KLINE *kline, const char *msg)$/;"	f	file:
dname	miner.h	/^	char *dname;$/;"	m	struct:device_drv
dname	usbutils.c	/^	const char *dname;$/;"	m	struct:resource_work	file:
do_a_quit	api.c	/^static bool do_a_quit;$/;"	v	file:
do_a_restart	api.c	/^static bool do_a_restart;$/;"	v	file:
do_atspeed_core_tests	hf_protocol.h	/^	uint8_t  do_atspeed_core_tests:1;       \/\/ Do core tests at speed, return second bitmap$/;"	m	struct:hf_usb_init_header
do_atspeed_core_tests	hf_protocol_be.h	/^	uint8_t  do_atspeed_core_tests:1;       \/\/ Do core tests at speed, return second bitmap$/;"	m	struct:hf_usb_init_header
do_icarus_timing	driver-icarus.c	/^	bool do_icarus_timing;$/;"	m	struct:ICARUS_INFO	file:
do_ping	driver-modminer.c	/^static void do_ping(struct cgpu_info *modminer)$/;"	f	file:
dohotplug	api.c	/^static void dohotplug(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
doquit	api.c	/^void doquit(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f
dorestart	api.c	/^void dorestart(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f
dosave	api.c	/^void dosave(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f
dozero	api.c	/^static void dozero(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
driver_count	usbutils.c	/^static struct driver_count {$/;"	s	file:
driver_version	driver-bflsc.h	/^	enum driver_version driver_version;$/;"	m	struct:bflsc_info	typeref:enum:bflsc_info::driver_version
driver_version	driver-bflsc.h	/^enum driver_version {$/;"	g
drv	miner.h	/^	struct device_drv *drv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::device_drv
drv	usbutils.h	/^	int drv;$/;"	m	struct:usb_find_devices
drv_count	usbutils.c	/^} drv_count[DRIVER_MAX];$/;"	v	typeref:struct:driver_count	file:
drv_detect	miner.h	/^	void (*drv_detect)(bool);$/;"	m	struct:device_drv
drv_driver	miner.h	/^enum drv_driver {$/;"	g
drv_id	miner.h	/^	enum drv_driver drv_id;$/;"	m	struct:device_drv	typeref:enum:device_drv::drv_driver
drv_rolllimit	miner.h	/^	int		drv_rolllimit; \/* How much the driver can roll ntime *\/$/;"	m	struct:work
drv_ver	driver-bflsc.c	/^static enum driver_version drv_ver(struct cgpu_info *bflsc, const char *ver)$/;"	f	file:
dsp_det	api.c	/^void dsp_det(char *msg, LOCKSTAT *stat)$/;"	f
dsp_lock	api.c	/^void dsp_lock(LOCKINFO *info)$/;"	f
dst_b	api.c	2478;"	d	file:
enable	cgminer.c	/^	bool enable;$/;"	m	struct:schedtime	file:
enable_core	driver-knc-spi-fpga.c	/^static void enable_core(uint8_t asic, uint8_t core)$/;"	f	file:
enable_curses	cgminer.c	/^void enable_curses(void) {$/;"	f
enable_curses_windows	cgminer.c	/^static void enable_curses_windows(void)$/;"	f	file:
enable_debug	cgminer.c	/^static char *enable_debug(bool *flag)$/;"	f	file:
enable_device	cgminer.c	/^void enable_device(struct cgpu_info *cgpu)$/;"	f
enable_periodic_status	hf_protocol.h	/^	uint16_t enable_periodic_status:1;          \/\/ Send periodic status$/;"	m	struct:hf_config_data
enable_periodic_status	hf_protocol_be.h	/^	uint16_t enable_periodic_status:1;          \/\/ Send periodic status$/;"	m	struct:hf_config_data
enable_pool	cgminer.c	/^static void enable_pool(struct pool *pool)$/;"	f	file:
enabled	miner.h	/^	enum pool_enable enabled;$/;"	m	struct:pool	typeref:enum:pool::pool_enable
enabled_pools	cgminer.c	/^int total_pools, enabled_pools;$/;"	v
enablepool	api.c	/^static void enablepool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
endOfBlock	driver-bflsc.h	/^	uint8_t endOfBlock;$/;"	m	struct:QueueJobStructure
endOfWrapper	driver-bflsc.h	/^	uint8_t endOfWrapper;$/;"	m	struct:QueueJobPackStructure
endian_flip128	miner.h	/^endian_flip128(void __maybe_unused *dest_p, const void __maybe_unused *src_p)$/;"	f
endian_flip128	miner.h	/^static inline void endian_flip128(void *dest_p, const void *src_p)$/;"	f
endian_flip32	miner.h	/^endian_flip32(void __maybe_unused *dest_p, const void __maybe_unused *src_p)$/;"	f
endian_flip32	miner.h	/^static inline void endian_flip32(void *dest_p, const void *src_p)$/;"	f
engines	driver-bflsc.h	/^	int engines; \/\/ each engine represents a 'thread' in a chip$/;"	m	struct:bflsc_dev
ep	usbutils.h	/^	unsigned char ep;$/;"	m	struct:usb_epinfo
epatt	usbutils.c	/^static const char *epatt(uint8_t bmAttributes)$/;"	f	file:
epdir	usbutils.c	/^static const char *epdir(uint8_t bEndpointAddress)$/;"	f	file:
epinfo_count	usbutils.h	/^	int epinfo_count;$/;"	m	struct:usb_intinfo
epinfos	usbutils.h	/^	struct usb_epinfo *epinfos;$/;"	m	struct:usb_intinfo	typeref:struct:usb_intinfo::usb_epinfo
errorcount	driver-klondike.c	/^	uint64_t errorcount;$/;"	m	struct:klondike_info	file:
errorcount	driver-klondike.c	/^	uint8_t errorcount;$/;"	m	struct:klondike_status	file:
escape_string	api.c	/^static char *escape_string(char *str, bool isjson)$/;"	f	file:
exit_buf	cgminer.c	/^static char exit_buf[512];$/;"	v	file:
expand_mult	uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket
extra_data	hf_protocol.h	/^	uint32_t extra_data;                        \/\/ Depends on notification code$/;"	m	struct:hf_usb_notice_data
extra_data	hf_protocol_be.h	/^	uint32_t extra_data;                        \/\/ Depends on notification code$/;"	m	struct:hf_usb_notice_data
extra_status_1	hf_protocol.h	/^	uint8_t  extra_status_1;                    \/\/ Extra reply status information, code specific$/;"	m	struct:hf_usb_init_base
extra_status_1	hf_protocol_be.h	/^	uint8_t  extra_status_1;                    \/\/ Extra reply status information, code specific$/;"	m	struct:hf_usb_init_base
extract_sockaddr	util.c	/^bool extract_sockaddr(char *url, char **sockaddr_url, char **sockaddr_port)$/;"	f
failoveronly	api.c	/^static void failoveronly(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
fan0	driver-avalon.h	/^	int fan0;$/;"	m	struct:avalon_info
fan0	driver-avalon.h	/^	uint8_t fan0;$/;"	m	struct:avalon_result
fan1	driver-avalon.h	/^	int fan1;$/;"	m	struct:avalon_info
fan1	driver-avalon.h	/^	uint8_t fan1;$/;"	m	struct:avalon_result
fan2	driver-avalon.h	/^	int fan2;$/;"	m	struct:avalon_info
fan2	driver-avalon.h	/^	uint8_t fan2;$/;"	m	struct:avalon_result
fan_eft	driver-avalon.h	/^	uint8_t fan_eft		:1;$/;"	m	struct:avalon_task
fan_pwm	driver-avalon.h	/^	int fan_pwm;$/;"	m	struct:avalon_info
fan_pwm_data	driver-avalon.h	/^	uint8_t fan_pwm_data;$/;"	m	struct:avalon_task
fanauto	driver-bflsc.h	/^	bool fanauto;$/;"	m	struct:bflsc_info
fanspeed	driver-klondike.c	/^	uint8_t fanspeed;$/;"	m	struct:klondike_status	file:
fantarget	driver-klondike.c	/^	uint8_t fantarget;$/;"	m	struct:klondike_cfg	file:
fd	driver-knc-spi-fpga.c	/^	int fd;$/;"	m	struct:spidev_context	file:
fifo_rp	driver-avalon.h	/^	uint16_t fifo_rp;$/;"	m	struct:avalon_result
fifo_wp	driver-avalon.h	/^	uint16_t fifo_wp;$/;"	m	struct:avalon_result
file	api.c	/^	const char *file;$/;"	m	struct:lockinfo	file:
file	api.c	/^	const char *file;$/;"	m	struct:lockstat	file:
fileconf_load	cgminer.c	/^static int fileconf_load;$/;"	v	file:
fill_device_drv	cgminer.c	/^void fill_device_drv(struct device_drv *drv)$/;"	f
fill_queue	cgminer.c	/^static void fill_queue(struct thr_info *mythr, struct cgpu_info *cgpu, struct device_drv *drv, const int thr_id)$/;"	f	file:
find_dev	usbutils.c	/^static struct usb_find_devices find_dev[] = {$/;"	v	typeref:struct:usb_find_devices	file:
find_queued_work_bymidstate	cgminer.c	/^struct work *find_queued_work_bymidstate(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)$/;"	f
findlock	api.c	/^static LOCKINFO *findlock(void *lock, enum cglock_typ typ, const char *file, const char *func, const int linenum)$/;"	f	file:
finish	driver-icarus.c	/^	struct timeval finish;$/;"	m	struct:ICARUS_HISTORY	typeref:struct:ICARUS_HISTORY::timeval	file:
firmware	driver-bflsc.h	/^	char *firmware;$/;"	m	struct:bflsc_dev
firmware_rev	hf_protocol.h	/^	uint16_t firmware_rev;                      \/\/ Firmware revision #$/;"	m	struct:hf_usb_init_base
firmware_rev	hf_protocol_be.h	/^	uint16_t firmware_rev;                      \/\/ Firmware revision #$/;"	m	struct:hf_usb_init_base
first	usbutils.c	/^	struct timeval first;$/;"	m	struct:cg_usb_stats_item	typeref:struct:cg_usb_stats_item::timeval	file:
first_second	driver-bab.c	/^	bool first_second;$/;"	m	struct:rlist	file:
first_work	miner.h	/^	struct timeval first_work;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval
fixchip	driver-bab.c	/^	int fixchip;$/;"	m	struct:bab_info	file:
flash_led	driver-bflsc.h	/^	bool flash_led;$/;"	m	struct:bflsc_info
flash_led	miner.h	/^	bool flash_led;$/;"	m	struct:cgpu_info
flash_next_work	driver-icarus.c	/^	bool flash_next_work;$/;"	m	struct:ICARUS_INFO	file:
flip128	miner.h	/^static inline void flip128(void *dest_p, const void *src_p)$/;"	f
flip32	miner.h	/^static inline void flip32(void *dest_p, const void *src_p)$/;"	f
flip64	miner.h	/^static inline void flip64(void *dest_p, const void *src_p)$/;"	f
flip80	miner.h	/^static inline void flip80(void *dest_p, const void *src_p)$/;"	f
flush_fifo	driver-avalon.h	/^	uint8_t flush_fifo	:1;$/;"	m	struct:avalon_task
flush_id	driver-bflsc.h	/^	uint64_t flush_id; \/\/ counter when results were last flushed$/;"	m	struct:bflsc_dev
flush_one_dev	driver-bflsc.c	/^static void flush_one_dev(struct cgpu_info *bflsc, int dev)$/;"	f	file:
flush_queue	cgminer.c	/^static void flush_queue(struct cgpu_info *cgpu)$/;"	f	file:
flush_size	driver-bflsc.h	/^	int flush_size;$/;"	m	struct:bflsc_info
flush_work	miner.h	/^	void (*flush_work)(struct cgpu_info *);$/;"	m	struct:device_drv
flushed	driver-bflsc.h	/^	bool flushed; \/\/ are any flushed?$/;"	m	struct:bflsc_dev
flushed	driver-klondike.c	/^	bool flushed;$/;"	m	struct:jobque	file:
fn	util.c	/^	void (*fn)(void *fnarg);$/;"	m	struct:cg_completion	file:
fnarg	util.c	/^	void *fnarg;$/;"	m	struct:cg_completion	file:
forcelog	logging.h	55;"	d
fork_monitor	cgminer.c	/^static void fork_monitor()$/;"	f	file:
forkpid	cgminer.c	/^	static int forkpid;$/;"	v	file:
forward_all_packets	hf_protocol.h	/^	uint32_t forward_all_packets:1;             \/\/ Forward everything - diagnostic.$/;"	m	struct:hf_config_data
forward_all_packets	hf_protocol_be.h	/^	uint32_t forward_all_packets:1;             \/\/ Forward everything - diagnostic.$/;"	m	struct:hf_config_data
forward_all_privileged_packets	hf_protocol.h	/^	uint16_t forward_all_privileged_packets:1;  \/\/ Forward priv pkts -- diagnostic$/;"	m	struct:hf_config_data
forward_all_privileged_packets	hf_protocol_be.h	/^	uint16_t forward_all_privileged_packets:1;  \/\/ Forward priv pkts -- diagnostic$/;"	m	struct:hf_config_data
found	usbutils.h	/^	bool found;$/;"	m	struct:usb_epinfo
found	usbutils.h	/^	struct usb_find_devices *found;$/;"	m	struct:cg_usb_device	typeref:struct:cg_usb_device::usb_find_devices
found_blocks	cgminer.c	/^unsigned int found_blocks;$/;"	v
fpga_count	driver-icarus.c	/^	int fpga_count;$/;"	m	struct:ICARUS_INFO	file:
fpgaid	miner.h	/^	char fpgaid;$/;"	m	struct:cgpu_info
fpgaid	miner.h	/^	char fpgaid;$/;"	m	struct:modminer_fpga_state
free	driver-klondike.c	/^	KLIST *free;$/;"	m	struct:klondike_info	file:
free_blist	driver-bab.c	/^static void free_blist(struct cgpu_info *babcgpu, BLIST *bhead, int chip)$/;"	f	file:
free_cgusb	usbutils.c	/^static struct cg_usb_device *free_cgusb(struct cg_usb_device *cgusb)$/;"	f	file:
free_me	miner.h	/^	bool free_me;$/;"	m	struct:string_elist
free_work	cgminer.c	/^void free_work(struct work *work)$/;"	f
freebreakdown	driver-bflsc.c	/^static void freebreakdown(int *count, char **firstname, char ***fields)$/;"	f	file:
freetolines	driver-bflsc.c	/^static void freetolines(int *lines, char ***items)$/;"	f	file:
freq	driver-gridseed.c	/^	int				freq;$/;"	m	struct:s_gridseed_info	file:
frequency	driver-avalon.h	/^	int frequency;$/;"	m	struct:avalon_info
from_existing_block	cgminer.c	/^static inline bool from_existing_block(struct work *work)$/;"	f	file:
frozen	miner.h	/^	bool frozen;$/;"	m	struct:thread_q
fsync	miner.h	/^static inline int fsync (int fd)$/;"	f
full	api.c	/^	bool full;$/;"	m	struct:io_data	file:
fullnonce	driver-icarus.c	/^	double fullnonce;$/;"	m	struct:ICARUS_INFO	file:
fulltest	util.c	/^bool fulltest(const unsigned char *hash, const unsigned char *target)$/;"	f
func	api.c	/^	const char *func;$/;"	m	struct:lockinfo	file:
func	api.c	/^	const char *func;$/;"	m	struct:lockstat	file:
func	api.c	/^	void (*func)(struct io_data *, SOCKETTYPE, char *, bool, char);$/;"	m	struct:CMDS	file:
fwVersion	usbutils.h	/^	unsigned char fwVersion;	\/\/ ??$/;"	m	struct:cg_usb_device
gate_miner	driver-avalon.h	/^	uint8_t gate_miner		:1;$/;"	m	struct:avalon_task
gate_miner_elf	driver-avalon.h	/^	uint8_t gate_miner_elf		:1;$/;"	m	struct:avalon_task
gbt	miner.h	/^	bool		gbt;$/;"	m	struct:work
gbt_bits	miner.h	/^	uint32_t gbt_bits;$/;"	m	struct:pool
gbt_decode	cgminer.c	/^static bool gbt_decode(struct pool *pool, json_t *res_val)$/;"	f	file:
gbt_expires	miner.h	/^	int gbt_expires;$/;"	m	struct:pool
gbt_lock	miner.h	/^	cglock_t gbt_lock;$/;"	m	struct:pool
gbt_req	cgminer.c	/^static char *gbt_req = "{\\"id\\": 0, \\"method\\": \\"getblocktemplate\\", \\"params\\": [{\\"capabilities\\": [\\"coinbasetxn\\", \\"workid\\", \\"coinbase\/append\\"]}]}\\n";$/;"	v	file:
gbt_target	miner.h	/^	unsigned char gbt_target[32];$/;"	m	struct:pool
gbt_txns	miner.h	/^	int		gbt_txns;$/;"	m	struct:work
gbt_txns	miner.h	/^	int gbt_txns;$/;"	m	struct:pool
gbt_version	miner.h	/^	uint32_t gbt_version;$/;"	m	struct:pool
gbt_workid	miner.h	/^	char *gbt_workid;$/;"	m	struct:pool
gc3355_find_freq_index	driver-gridseed.c	/^static int gc3355_find_freq_index(const char *freq)$/;"	f	file:
gc3355_get_data	driver-gridseed.c	/^static int gc3355_get_data(struct cgpu_info *gridseed, unsigned char *buf, int size)$/;"	f	file:
gc3355_init	driver-gridseed.c	/^static void gc3355_init(struct cgpu_info *gridseed, GRIDSEED_INFO *info, bool set_nonce)$/;"	f	file:
gc3355_send_cmds	driver-gridseed.c	/^static void gc3355_send_cmds(struct cgpu_info *gridseed, const char *cmds[])$/;"	f	file:
gc3355_send_cmds_bin	driver-gridseed.c	/^static void gc3355_send_cmds_bin(struct cgpu_info *gridseed, const char *cmds[], int size)$/;"	f	file:
gc3355_set_core_freq	driver-gridseed.c	/^static void gc3355_set_core_freq(struct cgpu_info *gridseed)$/;"	f	file:
gc3355_set_init_nonce	driver-gridseed.c	/^static void gc3355_set_init_nonce(struct cgpu_info *gridseed)$/;"	f	file:
gc3355_write_data	driver-gridseed.c	/^static int gc3355_write_data(struct cgpu_info *gridseed, unsigned char *data, int size)$/;"	f	file:
gen_gbt_work	cgminer.c	/^static void gen_gbt_work(struct pool *pool, struct work *work)$/;"	f	file:
gen_gbt_work	cgminer.c	1975;"	d	file:
gen_hash	cgminer.c	/^static void gen_hash(unsigned char *data, unsigned char *hash, int len)$/;"	f	file:
gen_stratum_work	cgminer.c	/^static void gen_stratum_work(struct pool *pool, struct work *work)$/;"	f	file:
get16bits	uthash.h	458;"	d
get16bits	uthash.h	461;"	d
get16bits	uthash.h	465;"	d
get_api_stats	miner.h	/^	struct api_data *(*get_api_stats)(struct cgpu_info *);$/;"	m	struct:device_drv	typeref:struct:device_drv::get_api_stats
get_avalon_statline_before	driver-avalon.c	/^static void get_avalon_statline_before(char *buf, size_t bufsiz, struct cgpu_info *avalon)$/;"	f	file:
get_benchmark_work	cgminer.c	/^static void get_benchmark_work(struct work *work)$/;"	f	file:
get_bflsc_statline_before	driver-bflsc.c	/^static void get_bflsc_statline_before(char *buf, size_t bufsiz, struct cgpu_info *bflsc)$/;"	f	file:
get_bitforce_statline_before	driver-bitforce.c	/^static void get_bitforce_statline_before(char *buf, size_t bufsiz, struct cgpu_info *bitforce)$/;"	f	file:
get_datestamp	cgminer.c	/^void get_datestamp(char *f, size_t fsiz, struct timeval *tv)$/;"	f
get_devices	cgminer.c	/^struct cgpu_info *get_devices(int id)$/;"	f
get_expect	driver-modminer.c	/^static bool get_expect(struct cgpu_info *modminer, FILE *f, char c)$/;"	f	file:
get_gridseed_statline_before	driver-gridseed.c	/^static void get_gridseed_statline_before(char *buf, size_t bufsiz, struct cgpu_info *gridseed)$/;"	f	file:
get_info	driver-modminer.c	/^static bool get_info(struct cgpu_info *modminer, FILE *f, char *buf, int bufsiz, const char *name)$/;"	f	file:
get_intrange	cgminer.c	/^void get_intrange(char *arg, int *val1, int *val2)$/;"	f
get_klondike_statline_before	driver-klondike.c	/^static void get_klondike_statline_before(char *buf, size_t siz, struct cgpu_info *klncgpu)$/;"	f	file:
get_modminer_statline_before	driver-modminer.c	/^static void get_modminer_statline_before(char *buf, size_t bufsiz, struct cgpu_info *modminer)$/;"	f	file:
get_options	driver-avalon.c	/^static bool get_options(int this_option_offset, int *baud, int *miner_count,$/;"	f	file:
get_options	driver-gridseed.c	/^static bool get_options(int this_option_offset, struct cgpu_info *gridseed, char *options,$/;"	f	file:
get_options	driver-icarus.c	/^static void get_options(int this_option_offset, struct cgpu_info *icarus, int *baud, int *work_division, int *fpga_count)$/;"	f	file:
get_proxy	util.c	/^char *get_proxy(char *url, struct pool *pool)$/;"	f
get_queue_work	cgminer.c	/^struct work *get_queue_work(struct thr_info *thr, struct cgpu_info *cgpu, int thr_id)$/;"	f
get_queued	cgminer.c	/^struct work *get_queued(struct cgpu_info *cgpu)$/;"	f
get_serial_cts	fpgautils.c	/^int get_serial_cts(const int fd)$/;"	f
get_serial_cts	fpgautils.c	/^int get_serial_cts(int fd)$/;"	f
get_sessionid	util.c	/^static char *get_sessionid(json_t *val)$/;"	f	file:
get_statline	cgminer.c	/^static void get_statline(char *buf, size_t bufsiz, struct cgpu_info *cgpu)$/;"	f	file:
get_statline	miner.h	/^	void (*get_statline)(char *, size_t, struct cgpu_info *);$/;"	m	struct:device_drv
get_statline_before	miner.h	/^	void (*get_statline_before)(char *, size_t, struct cgpu_info *);$/;"	m	struct:device_drv
get_stats	miner.h	/^	bool (*get_stats)(struct cgpu_info *);$/;"	m	struct:device_drv
get_status	driver-modminer.c	/^static bool get_status(struct cgpu_info *modminer, char *msg, enum usb_cmds cmd)$/;"	f	file:
get_status_timeout	driver-modminer.c	/^static bool get_status_timeout(struct cgpu_info *modminer, char *msg, unsigned int timeout, enum usb_cmds cmd)$/;"	f	file:
get_thr_cgpu	cgminer.c	/^static struct cgpu_info *get_thr_cgpu(int thr_id)$/;"	f	file:
get_thread	cgminer.c	/^struct thr_info *get_thread(int thr_id)$/;"	f
get_timestamp	cgminer.c	/^static void get_timestamp(char *f, size_t fsiz, struct timeval *tv)$/;"	f	file:
get_upstream_work	cgminer.c	/^static bool get_upstream_work(struct work *work, CURL *curl)$/;"	f	file:
get_work	cgminer.c	/^struct work *get_work(struct thr_info *thr, const int thr_id)$/;"	f
getfail_occasions	miner.h	/^	unsigned int getfail_occasions;$/;"	m	struct:pool
getinfo	driver-bflsc.c	/^static bool getinfo(struct cgpu_info *bflsc, int dev)$/;"	f	file:
getinfo	driver-bflsc.h	/^	char getinfo[(BFLSC_BUFSIZ+4)*4];$/;"	m	struct:bflsc_dev
getq	cgminer.c	/^struct thread_q *getq;$/;"	v	typeref:struct:thread_q
gets	api.c	/^	uint64_t gets;$/;"	m	struct:lockinfo	file:
getwork	miner.h	/^	bool	getwork;$/;"	m	struct:thr_info
getwork_attempts	miner.h	/^	uint32_t getwork_attempts;$/;"	m	struct:cgminer_pool_stats
getwork_calls	miner.h	/^	uint32_t getwork_calls;$/;"	m	struct:cgminer_pool_stats
getwork_calls	miner.h	/^	uint32_t getwork_calls;$/;"	m	struct:cgminer_stats
getwork_decode	cgminer.c	/^static bool getwork_decode(json_t *res_val, struct work *work)$/;"	f	file:
getwork_mode	miner.h	/^	char		getwork_mode;$/;"	m	struct:work
getwork_q	miner.h	/^	struct thread_q *getwork_q;$/;"	m	struct:pool	typeref:struct:pool::thread_q
getwork_req	cgminer.c	/^static char *getwork_req = "{\\"method\\": \\"getwork\\", \\"params\\": [], \\"id\\":0}\\n";$/;"	v	file:
getwork_requested	miner.h	/^	unsigned int getwork_requested;$/;"	m	struct:pool
getwork_wait	miner.h	/^	struct timeval getwork_wait;$/;"	m	struct:cgminer_pool_stats	typeref:struct:cgminer_pool_stats::timeval
getwork_wait	miner.h	/^	struct timeval getwork_wait;$/;"	m	struct:cgminer_stats	typeref:struct:cgminer_stats::timeval
getwork_wait_max	miner.h	/^	struct timeval getwork_wait_max;$/;"	m	struct:cgminer_pool_stats	typeref:struct:cgminer_pool_stats::timeval
getwork_wait_max	miner.h	/^	struct timeval getwork_wait_max;$/;"	m	struct:cgminer_stats	typeref:struct:cgminer_stats::timeval
getwork_wait_min	miner.h	/^	struct timeval getwork_wait_min;$/;"	m	struct:cgminer_pool_stats	typeref:struct:cgminer_pool_stats::timeval
getwork_wait_min	miner.h	/^	struct timeval getwork_wait_min;$/;"	m	struct:cgminer_stats	typeref:struct:cgminer_stats::timeval
getwork_wait_rolling	miner.h	/^	double getwork_wait_rolling;$/;"	m	struct:cgminer_pool_stats
global_hashrate	cgminer.c	/^unsigned long long global_hashrate;$/;"	v
global_quota_gcd	cgminer.c	/^unsigned long global_quota_gcd = 1;$/;"	v
golden_hashes	driver-icarus.c	/^	uint64_t golden_hashes;$/;"	m	struct:ICARUS_INFO	file:
golden_tv	driver-icarus.c	/^	struct timeval golden_tv;$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::timeval	file:
got	usbutils.c	/^	bool got;$/;"	m	struct:resource_reply	file:
gots	api.c	/^	uint64_t gots;$/;"	m	struct:lockinfo	file:
gpio	driver-bab.c	/^	volatile unsigned *gpio;$/;"	m	struct:bab_info	file:
gpur_thr_id	cgminer.c	/^int gpur_thr_id;$/;"	v
gridseed_api_stats	driver-gridseed.c	/^static struct api_data *gridseed_api_stats(struct cgpu_info *cgpu)$/;"	f	file:
gridseed_check_new_task	driver-gridseed.c	/^static bool gridseed_check_new_task(struct cgpu_info *gridseed, GRIDSEED_INFO *info)$/;"	f	file:
gridseed_cp210x_init	driver-gridseed.c	/^static int gridseed_cp210x_init(struct cgpu_info *gridseed, int interface)$/;"	f	file:
gridseed_create_proxy	driver-gridseed.c	/^static int gridseed_create_proxy(struct cgpu_info *gridseed, GRIDSEED_INFO *info)$/;"	f	file:
gridseed_detect	driver-gridseed.c	/^static void gridseed_detect(bool __maybe_unused hotplug)$/;"	f	file:
gridseed_detect_one	driver-gridseed.c	/^static struct cgpu_info *gridseed_detect_one(libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
gridseed_drv	driver-gridseed.c	/^struct device_drv gridseed_drv = {$/;"	v	typeref:struct:device_drv
gridseed_flush_work	driver-gridseed.c	/^static void gridseed_flush_work(struct cgpu_info *gridseed)$/;"	f	file:
gridseed_ftdi_init	driver-gridseed.c	/^static int gridseed_ftdi_init(struct cgpu_info *gridseed, int interface)$/;"	f	file:
gridseed_full	driver-gridseed.c	/^static bool gridseed_full(struct cgpu_info *gridseed)$/;"	f	file:
gridseed_get_queue_length	driver-gridseed.c	/^static void gridseed_get_queue_length(struct cgpu_info *gridseed, GRIDSEED_INFO *info,$/;"	f	file:
gridseed_get_results	driver-gridseed.c	/^static void *gridseed_get_results(void *userdata)$/;"	f	file:
gridseed_hw_errors	driver-gridseed.c	/^static void gridseed_hw_errors(struct thr_info *thr)$/;"	f	file:
gridseed_init	driver-gridseed.c	/^static void gridseed_init(struct cgpu_info *gridseed)$/;"	f	file:
gridseed_initialise	driver-gridseed.c	/^static void gridseed_initialise(struct cgpu_info *gridseed, GRIDSEED_INFO *info)$/;"	f	file:
gridseed_parse_mcu_command	driver-gridseed.c	/^static void gridseed_parse_mcu_command(struct cgpu_info *gridseed, GRIDSEED_INFO *info,$/;"	f	file:
gridseed_parse_results	driver-gridseed.c	/^static void gridseed_parse_results(struct cgpu_info *gridseed, GRIDSEED_INFO *info,$/;"	f	file:
gridseed_prepare	driver-gridseed.c	/^static bool gridseed_prepare(struct thr_info *thr)$/;"	f	file:
gridseed_purge_work_queue	driver-gridseed.c	/^static void gridseed_purge_work_queue(struct cgpu_info *gridseed, GRIDSEED_INFO *info, int newstart)$/;"	f	file:
gridseed_recv_ltc	driver-gridseed.c	/^static void gridseed_recv_ltc(struct cgpu_info *gridseed, GRIDSEED_INFO *info)$/;"	f	file:
gridseed_request_ltc_task	driver-gridseed.c	/^static void gridseed_request_ltc_task(struct cgpu_info *gridseed, GRIDSEED_INFO *info)$/;"	f	file:
gridseed_scanhash	driver-gridseed.c	/^static int64_t gridseed_scanhash(struct thr_info *thr)$/;"	f	file:
gridseed_send_command	driver-gridseed.c	/^static void *gridseed_send_command(void *userdata)$/;"	f	file:
gridseed_send_ltc_nonce	driver-gridseed.c	/^static int gridseed_send_ltc_nonce(struct cgpu_info *gridseed, GRIDSEED_INFO *info,$/;"	f	file:
gridseed_send_query_cmd	driver-gridseed.c	/^static bool gridseed_send_query_cmd(struct cgpu_info *gridseed, GRIDSEED_INFO *info)$/;"	f	file:
gridseed_send_task	driver-gridseed.c	/^static bool gridseed_send_task(struct cgpu_info *gridseed, GRIDSEED_INFO *info,$/;"	f	file:
gridseed_set_device	driver-gridseed.c	/^static char *gridseed_set_device(struct cgpu_info *gridseed, char *option, char *setting, char *replybuf)$/;"	f	file:
gridseed_shutdown	driver-gridseed.c	/^static void gridseed_shutdown(struct thr_info *thr)$/;"	f	file:
gridseed_test_btc_nonce	driver-gridseed.c	/^static void gridseed_test_btc_nonce(struct cgpu_info *gridseed, GRIDSEED_INFO *info,$/;"	f	file:
gridseed_version	driver-gridseed.c	/^static const char *gridseed_version = "v3.8.5.20140113.01";$/;"	v	file:
group	api.c	/^	char group;$/;"	m	struct:IP4ACCESS	file:
group	hf_protocol.h	/^	uint8_t  group;                         \/\/ Non-zero for valid group$/;"	m	struct:hf_hash_usb
group	hf_protocol.h	/^	uint8_t  group;$/;"	m	struct:hf_hash_serial
group	hf_protocol_be.h	/^	uint8_t  group;                         \/\/ Non-zero for valid group$/;"	m	struct:hf_hash_usb
group	hf_protocol_be.h	/^	uint8_t  group;$/;"	m	struct:hf_hash_serial
group_ntime_roll	driver-hashfast.h	/^	int group_ntime_roll;                       \/\/ Total ntime roll amount per group$/;"	m	struct:hashfast_info
group_ntime_roll	hf_protocol.h	/^	uint16_t group_ntime_roll;                  \/\/ Total ntime roll amount per group$/;"	m	struct:hf_usb_init_options
group_ntime_roll	hf_protocol_be.h	/^	uint16_t group_ntime_roll;                  \/\/ Total ntime roll amount per group$/;"	m	struct:hf_usb_init_options
gsd1_epinfos	usbutils.c	/^static struct usb_epinfo gsd1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
gsd1_ints	usbutils.c	/^static struct usb_intinfo gsd1_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
gsd2_epinfos	usbutils.c	/^static struct usb_epinfo gsd2_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
gsd2_ints	usbutils.c	/^static struct usb_intinfo gsd2_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
gws_cond	cgminer.c	/^pthread_cond_t gws_cond;$/;"	v
gwsched_thr_id	cgminer.c	/^static int gwsched_thr_id;$/;"	v	file:
h	sha2.h	/^    uint32_t h[8];$/;"	m	struct:__anon7
hadexpire	miner.h	/^	bool hadexpire;$/;"	m	struct:cgminer_pool_stats
hadexpire	util.c	/^	bool		hadexpire;$/;"	m	struct:header_info	file:
hadrolltime	miner.h	/^	bool hadrolltime;$/;"	m	struct:cgminer_pool_stats
hadrolltime	util.c	/^	bool		hadrolltime;$/;"	m	struct:header_info	file:
handle	usbutils.h	/^	libusb_device_handle *handle;$/;"	m	struct:cg_usb_device
hardware_rev	hf_protocol.h	/^	uint16_t hardware_rev;                      \/\/ Hardware revision #$/;"	m	struct:hf_usb_init_base
hardware_rev	hf_protocol_be.h	/^	uint16_t hardware_rev;                      \/\/ Hardware revision #$/;"	m	struct:hf_usb_init_base
has_gbt	miner.h	/^	bool has_gbt;$/;"	m	struct:pool
has_stratum	miner.h	/^	bool has_stratum;$/;"	m	struct:pool
hash	cgminer.c	/^	char hash[68];$/;"	m	struct:block	file:
hash	miner.h	/^	unsigned char	hash[32];$/;"	m	struct:work
hash_clock	hf_protocol.h	/^	uint16_t hash_clock;                    \/\/ Requested hash clock frequency$/;"	m	struct:hf_usb_init_header
hash_clock	hf_protocol_be.h	/^	uint16_t hash_clock;                    \/\/ Requested hash clock frequency$/;"	m	struct:hf_usb_init_header
hash_clock_rate	driver-hashfast.h	/^	int hash_clock_rate;                        \/\/ Hash clock rate to use, in Mhz$/;"	m	struct:hashfast_info
hash_clockrate	hf_protocol.h	/^	uint16_t hash_clockrate;                    \/\/ Actual hash clock rate used (nearest Mhz)$/;"	m	struct:hf_usb_init_base
hash_clockrate	hf_protocol_be.h	/^	uint16_t hash_clockrate;                    \/\/ Actual hash clock rate used (nearest Mhz)$/;"	m	struct:hf_usb_init_base
hash_count	driver-hashfast.h	/^	int64_t hash_count;$/;"	m	struct:hashfast_info
hash_count	hf_protocol.h	/^	uint64_t hash_count;                        \/\/ Add this to host's cumulative hash count$/;"	m	struct:hf_gwq_data
hash_count	hf_protocol_be.h	/^	uint64_t hash_count;                        \/\/ Add this to host's cumulative hash count$/;"	m	struct:hf_gwq_data
hash_count_max	driver-icarus.c	/^	uint32_t hash_count_max;$/;"	m	struct:ICARUS_HISTORY	file:
hash_count_min	driver-icarus.c	/^	uint32_t hash_count_min;$/;"	m	struct:ICARUS_HISTORY	file:
hash_count_range	driver-icarus.c	/^	uint64_t hash_count_range;$/;"	m	struct:ICARUS_INFO	file:
hash_driver_work	cgminer.c	/^void hash_driver_work(struct thr_info *mythr)$/;"	f
hash_lock	cgminer.c	/^pthread_mutex_t hash_lock;$/;"	v
hash_pop	cgminer.c	/^static struct work *hash_pop(void)$/;"	f	file:
hash_push	cgminer.c	/^static bool hash_push(struct work *work)$/;"	f	file:
hash_queued_work	cgminer.c	/^void hash_queued_work(struct thr_info *mythr)$/;"	f
hash_sequence_head	driver-hashfast.h	/^	uint16_t hash_sequence_head;                \/\/ HOST:   The next hash sequence # to be sent$/;"	m	struct:hashfast_info
hash_sequence_tail	driver-hashfast.h	/^	uint16_t hash_sequence_tail;                \/\/ HOST:   Follows device_sequence_tail around to free work$/;"	m	struct:hashfast_info
hash_sole_work	cgminer.c	/^static void hash_sole_work(struct thr_info *mythr)$/;"	f	file:
hash_work	miner.h	/^	void (*hash_work)(struct thr_info *);$/;"	m	struct:device_drv
hashclock	driver-klondike.c	/^	uint8_t hashclock[2];$/;"	m	struct:klondike_cfg	file:
hashcount	driver-klondike.c	/^	uint64_t hashcount;$/;"	m	struct:klondike_info	file:
hashcount	driver-klondike.c	/^	uint8_t hashcount[2];$/;"	m	struct:klondike_status	file:
hashes	miner.h	/^	uint32_t hashes;$/;"	m	struct:modminer_fpga_state
hashes_sent	driver-bflsc.h	/^	uint64_t hashes_sent;$/;"	m	struct:bflsc_dev
hashes_sent	driver-bflsc.h	/^	uint64_t hashes_sent;$/;"	m	struct:bflsc_info
hashes_unsent	driver-bflsc.h	/^	uint64_t hashes_unsent;$/;"	m	struct:bflsc_dev
hashfast_drv	driver-hashfast.c	/^struct device_drv hashfast_drv = {$/;"	v	typeref:struct:device_drv
hashfast_info	driver-hashfast.h	/^struct hashfast_info {$/;"	s
hashmeter	cgminer.c	/^static void hashmeter(int thr_id, struct timeval *diff,$/;"	f	file:
hashv	uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle
have_longpoll	cgminer.c	/^bool have_longpoll;$/;"	v
hd	driver-klondike.c	/^		HEADER hd;$/;"	m	union:kline::__anon3	file:
hdata	hf_protocol.h	/^	uint16_t hdata;                         \/\/ Header specific data$/;"	m	struct:hf_header
hdata	hf_protocol_be.h	/^	uint16_t hdata;                         \/\/ Header specific data$/;"	m	struct:hf_header
hdr_path	miner.h	/^	char *hdr_path;$/;"	m	struct:pool
header	driver-bflsc.h	/^	uint8_t header;$/;"	m	struct:DataForwardToChain
header_bin	miner.h	/^	unsigned char header_bin[128];$/;"	m	struct:pool
header_info	util.c	/^struct header_info {$/;"	s	file:
header_len	miner.h	/^	size_t header_len;$/;"	m	struct:stratum_work
hex2bin	util.c	/^bool hex2bin(unsigned char *p, const char *hexstr, size_t len)$/;"	f
hex2bin_tbl	util.c	/^static const int hex2bin_tbl[256] = {$/;"	v	file:
hex_print	hexdump.c	22;"	d	file:
hexdump	hexdump.c	/^void hexdump(const uint8_t *p, unsigned int len)$/;"	f
hf_candidate_nonce	hf_protocol.h	/^struct hf_candidate_nonce {$/;"	s
hf_candidate_nonce	hf_protocol_be.h	/^struct hf_candidate_nonce {$/;"	s
hf_config_data	hf_protocol.h	/^struct hf_config_data {$/;"	s
hf_config_data	hf_protocol_be.h	/^struct hf_config_data {$/;"	s
hf_g1_die_data	hf_protocol.h	/^struct hf_g1_die_data {$/;"	s
hf_g1_die_data	hf_protocol_be.h	/^struct hf_g1_die_data {$/;"	s
hf_g1_monitor	hf_protocol.h	/^struct hf_g1_monitor { $/;"	s
hf_g1_monitor	hf_protocol_be.h	/^struct hf_g1_monitor { $/;"	s
hf_group_data	hf_protocol.h	/^struct hf_group_data {$/;"	s
hf_group_data	hf_protocol_be.h	/^struct hf_group_data {$/;"	s
hf_gwq_data	hf_protocol.h	/^struct hf_gwq_data {$/;"	s
hf_gwq_data	hf_protocol_be.h	/^struct hf_gwq_data {$/;"	s
hf_hash_serial	hf_protocol.h	/^struct hf_hash_serial {$/;"	s
hf_hash_serial	hf_protocol_be.h	/^struct hf_hash_serial {$/;"	s
hf_hash_usb	hf_protocol.h	/^struct hf_hash_usb {$/;"	s
hf_hash_usb	hf_protocol_be.h	/^struct hf_hash_usb {$/;"	s
hf_header	hf_protocol.h	/^struct hf_header {$/;"	s
hf_header	hf_protocol_be.h	/^struct hf_header {$/;"	s
hf_long_statistics	driver-hashfast.h	/^struct hf_long_statistics {$/;"	s
hf_long_usb_stats1	driver-hashfast.h	/^struct hf_long_usb_stats1 {$/;"	s
hf_pll_config	hf_protocol.h	/^struct hf_pll_config {$/;"	s
hf_pll_config	hf_protocol_be.h	/^struct hf_pll_config {$/;"	s
hf_statistics	hf_protocol.h	/^struct hf_statistics {$/;"	s
hf_statistics	hf_protocol_be.h	/^struct hf_statistics {$/;"	s
hf_usb_init_base	hf_protocol.h	/^struct hf_usb_init_base { $/;"	s
hf_usb_init_base	hf_protocol_be.h	/^struct hf_usb_init_base { $/;"	s
hf_usb_init_errors	driver-hashfast.c	/^static const char *hf_usb_init_errors[] = {$/;"	v	file:
hf_usb_init_header	hf_protocol.h	/^struct hf_usb_init_header {$/;"	s
hf_usb_init_header	hf_protocol_be.h	/^struct hf_usb_init_header {$/;"	s
hf_usb_init_options	hf_protocol.h	/^struct hf_usb_init_options {$/;"	s
hf_usb_init_options	hf_protocol_be.h	/^struct hf_usb_init_options {$/;"	s
hf_usb_notice_data	hf_protocol.h	/^struct hf_usb_notice_data {$/;"	s
hf_usb_notice_data	hf_protocol_be.h	/^struct hf_usb_notice_data {$/;"	s
hf_usb_stats1	hf_protocol.h	/^struct hf_usb_stats1 {$/;"	s
hf_usb_stats1	hf_protocol_be.h	/^struct hf_usb_stats1 {$/;"	s
hfa0_epinfos	usbutils.c	/^static struct usb_epinfo hfa0_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
hfa1_epinfos	usbutils.c	/^static struct usb_epinfo hfa1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
hfa_api_stats	driver-hashfast.c	/^static struct api_data *hfa_api_stats(struct cgpu_info *cgpu)$/;"	f	file:
hfa_clear_readbuf	driver-hashfast.c	/^static void hfa_clear_readbuf(struct cgpu_info *hashfast)$/;"	f	file:
hfa_cmd	driver-hashfast.c	/^struct hfa_cmd {$/;"	s	file:
hfa_cmds	driver-hashfast.c	/^static const struct hfa_cmd hfa_cmds[] = {$/;"	v	typeref:struct:hfa_cmd	file:
hfa_crc8	driver-hashfast.c	/^static unsigned char hfa_crc8(unsigned char *h)$/;"	f	file:
hfa_detect	driver-hashfast.c	/^static void hfa_detect(bool hotplug)$/;"	f	file:
hfa_detect_common	driver-hashfast.c	/^static bool hfa_detect_common(struct cgpu_info *hashfast)$/;"	f	file:
hfa_detect_one	driver-hashfast.c	/^static struct cgpu_info *hfa_detect_one(libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
hfa_dfu_boot	driver-hashfast.c	/^static void hfa_dfu_boot(struct cgpu_info *hashfast)$/;"	f	file:
hfa_free_all_work	driver-hashfast.c	/^static void hfa_free_all_work(struct hashfast_info *info)$/;"	f	file:
hfa_get_data	driver-hashfast.c	/^static bool hfa_get_data(struct cgpu_info *hashfast, char *buf, int len4)$/;"	f	file:
hfa_get_header	driver-hashfast.c	/^static bool hfa_get_header(struct cgpu_info *hashfast, struct hf_header *h, uint8_t *computed_crc)$/;"	f	file:
hfa_get_packet	driver-hashfast.c	/^static bool hfa_get_packet(struct cgpu_info *hashfast, struct hf_header *h)$/;"	f	file:
hfa_init	driver-hashfast.c	/^static void hfa_init(struct cgpu_info __maybe_unused *hashfast)$/;"	f	file:
hfa_init_crc8	driver-hashfast.c	/^static void hfa_init_crc8(void)$/;"	f	file:
hfa_initialise	driver-hashfast.c	/^static bool hfa_initialise(struct cgpu_info *hashfast)$/;"	f	file:
hfa_ints	usbutils.c	/^static struct usb_intinfo hfa_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
hfa_jobs	driver-hashfast.c	/^static int hfa_jobs(struct hashfast_info *info)$/;"	f	file:
hfa_parse_gwq_status	driver-hashfast.c	/^static void hfa_parse_gwq_status(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	f	file:
hfa_parse_nonce	driver-hashfast.c	/^static void hfa_parse_nonce(struct thr_info *thr, struct cgpu_info *hashfast,$/;"	f	file:
hfa_parse_notice	driver-hashfast.c	/^static void hfa_parse_notice(struct cgpu_info *hashfast, struct hf_header *h)$/;"	f	file:
hfa_prepare	driver-hashfast.c	/^static bool hfa_prepare(struct thr_info *thr)$/;"	f	file:
hfa_read	driver-hashfast.c	/^static void *hfa_read(void *arg)$/;"	f	file:
hfa_reset	driver-hashfast.c	/^static bool hfa_reset(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:
hfa_scanwork	driver-hashfast.c	/^static int64_t hfa_scanwork(struct thr_info *thr)$/;"	f	file:
hfa_send_frame	driver-hashfast.c	/^static bool hfa_send_frame(struct cgpu_info *hashfast, uint8_t opcode, uint16_t hdata,$/;"	f	file:
hfa_send_packet	driver-hashfast.c	/^static bool hfa_send_packet(struct cgpu_info *hashfast, struct hf_header *h, int cmd)$/;"	f	file:
hfa_send_shutdown	driver-hashfast.c	/^static void hfa_send_shutdown(struct cgpu_info *hashfast)$/;"	f	file:
hfa_shutdown	driver-hashfast.c	/^static void hfa_shutdown(struct thr_info *thr)$/;"	f	file:
hfa_statline_before	driver-hashfast.c	/^static void hfa_statline_before(char *buf, size_t bufsiz, struct cgpu_info *hashfast)$/;"	f	file:
hfa_update_die_statistics	driver-hashfast.c	/^static void hfa_update_die_statistics(struct hashfast_info *info, struct hf_header *h)$/;"	f	file:
hfa_update_die_status	driver-hashfast.c	/^static void hfa_update_die_status(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	f	file:
hfa_update_stats1	driver-hashfast.c	/^static void hfa_update_stats1(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	f	file:
hh	cgminer.c	/^	UT_hash_handle hh;$/;"	m	struct:_cgpu_devid_counter	file:
hh	cgminer.c	/^	UT_hash_handle hh;$/;"	m	struct:block	file:
hh	cgminer.c	/^	UT_hash_handle hh;$/;"	m	struct:stratum_share	file:
hh	miner.h	/^	UT_hash_handle	hh;$/;"	m	struct:work
hh_head	uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle
hh_next	uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hh_prev	uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hho	uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table
high_operating_temp_limit	hf_protocol.h	/^	uint8_t  high_operating_temp_limit;         \/\/ Highest normal operating limit$/;"	m	struct:hf_usb_init_options
high_operating_temp_limit	hf_protocol_be.h	/^	uint8_t  high_operating_temp_limit;         \/\/ Highest normal operating limit$/;"	m	struct:hf_usb_init_options
history	driver-icarus.c	/^	struct ICARUS_HISTORY history[INFO_HISTORY+1];$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::ICARUS_HISTORY	file:
history_count	driver-icarus.c	/^	uint64_t history_count;$/;"	m	struct:ICARUS_INFO	file:
history_sec	driver-icarus.c	/^static struct timeval history_sec = { HISTORY_SEC, 0 };$/;"	v	typeref:struct:timeval	file:
history_time	driver-icarus.c	/^	struct timeval history_time;$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::timeval	file:
hotplug_mode	cgminer.c	/^bool hotplug_mode;$/;"	v
hotplug_process	cgminer.c	/^static void hotplug_process(void)$/;"	f	file:
hotplug_thr_id	cgminer.c	/^static int hotplug_thr_id;$/;"	v	file:
hotplug_thread	cgminer.c	/^static void *hotplug_thread(void __maybe_unused *userdata)$/;"	f	file:
hotplug_time	cgminer.c	/^int hotplug_time = 5;$/;"	v
htobe32	miner.h	169;"	d
htobe32	miner.h	179;"	d
htobe64	miner.h	170;"	d
htobe64	miner.h	180;"	d
htole16	miner.h	162;"	d
htole16	miner.h	172;"	d
htole32	miner.h	163;"	d
htole32	miner.h	173;"	d
htole64	miner.h	164;"	d
htole64	miner.h	176;"	d
http_negotiate	util.c	/^static bool http_negotiate(struct pool *pool, int sockd, bool http0)$/;"	f	file:
hw_error	miner.h	/^	void (*hw_error)(struct thr_info *);$/;"	m	struct:device_drv
hw_errors	cgminer.c	/^int hw_errors;$/;"	v
hw_errors	miner.h	/^	int hw_errors;$/;"	m	struct:cgpu_info
hw_errors	miner.h	/^	uint32_t hw_errors;$/;"	m	struct:modminer_fpga_state
hw_rev	driver-bitfury.h	/^	int hw_rev;$/;"	m	struct:bitfury_info
hwerr_work_id	driver-knc-spi-fpga.c	/^	uint32_t hwerr_work_id[MAX_ASICS * 256];$/;"	m	struct:knc_state	file:
hwerrs	driver-knc-spi-fpga.c	/^	uint8_t hwerrs[MAX_ASICS * 256];$/;"	m	struct:knc_state	file:
iManufacturer	usbutils.h	/^	char *iManufacturer;$/;"	m	struct:usb_find_devices
iProduct	usbutils.h	/^	char *iProduct;$/;"	m	struct:usb_find_devices
ica_epinfos	usbutils.c	/^static struct usb_epinfo ica_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
ica_ints	usbutils.c	/^static struct usb_intinfo ica_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
icarus_api_stats	driver-icarus.c	/^static struct api_data *icarus_api_stats(struct cgpu_info *cgpu)$/;"	f	file:
icarus_detect	driver-icarus.c	/^static void icarus_detect(bool __maybe_unused hotplug)$/;"	f	file:
icarus_detect_one	driver-icarus.c	/^static struct cgpu_info *icarus_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
icarus_drv	driver-icarus.c	/^struct device_drv icarus_drv = {$/;"	v	typeref:struct:device_drv
icarus_get_nonce	driver-icarus.c	/^static int icarus_get_nonce(struct cgpu_info *icarus, unsigned char *buf, struct timeval *tv_start,$/;"	f	file:
icarus_identify	driver-icarus.c	/^static void icarus_identify(struct cgpu_info *cgpu)$/;"	f	file:
icarus_initialise	driver-icarus.c	/^static void icarus_initialise(struct cgpu_info *icarus, int baud)$/;"	f	file:
icarus_prepare	driver-icarus.c	/^static bool icarus_prepare(__maybe_unused struct thr_info *thr)$/;"	f	file:
icarus_scanwork	driver-icarus.c	/^static int64_t icarus_scanwork(struct thr_info *thr)$/;"	f	file:
icarus_set	driver-icarus.c	/^static char *icarus_set(struct cgpu_info *cgpu, char *option, char *setting, char *replybuf)$/;"	f	file:
icarus_shutdown	driver-icarus.c	/^static void icarus_shutdown(__maybe_unused struct thr_info *thr)$/;"	f	file:
icarus_statline_before	driver-icarus.c	/^static void icarus_statline_before(char *buf, size_t bufsiz, struct cgpu_info *cgpu)$/;"	f	file:
id	api-example.c	/^		int id;$/;"	m	struct:WSAERRORS	file:
id	api.c	/^	int id;$/;"	m	struct:WSAERRORS	file:
id	cgminer.c	/^	int id;$/;"	m	struct:stratum_share	file:
id	driver-klondike.c	/^		IDENTITY id;$/;"	m	union:kline::__anon3	file:
id	miner.h	/^	int		id;$/;"	m	struct:thr_info
id	miner.h	/^	int		id;$/;"	m	struct:work
idProduct	usbutils.h	/^	uint16_t idProduct;$/;"	m	struct:usb_find_devices
idVendor	usbutils.h	/^	uint16_t idVendor;$/;"	m	struct:usb_find_devices
ideal_chain_maxlen	uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table
ident	driver-bitfury.h	/^	enum sub_ident ident;$/;"	m	struct:bitfury_info	typeref:enum:bitfury_info::sub_ident
ident	driver-gridseed.c	/^	enum sub_ident	ident;$/;"	m	struct:s_gridseed_info	typeref:enum:s_gridseed_info::sub_ident	file:
ident	driver-icarus.c	/^	enum sub_ident ident;$/;"	m	struct:ICARUS_INFO	typeref:enum:ICARUS_INFO::sub_ident	file:
ident	usbutils.h	/^	enum sub_ident ident;$/;"	m	struct:cg_usb_device	typeref:enum:cg_usb_device::sub_ident
ident	usbutils.h	/^	enum sub_ident ident;$/;"	m	struct:usb_find_devices	typeref:enum:usb_find_devices::sub_ident
identify_device	miner.h	/^	void (*identify_device)(struct cgpu_info *); \/\/ e.g. to flash a led$/;"	m	struct:device_drv
idle	driver-avalon.h	/^	int idle;$/;"	m	struct:avalon_info
idle	miner.h	/^	bool idle;$/;"	m	struct:pool
in_addr_t	util.h	53;"	d
in_use	usbutils.c	/^	struct usb_busdev in_use;$/;"	m	struct:usb_in_use_list	typeref:struct:usb_in_use_list::usb_busdev	file:
in_use_get_ress	usbutils.c	/^static void in_use_get_ress(uint8_t bus_number, uint8_t device_address, void **resource1, void **resource2)$/;"	f	file:
in_use_head	usbutils.c	/^static struct usb_in_use_list *in_use_head = NULL;$/;"	v	typeref:struct:usb_in_use_list	file:
in_use_store_ress	usbutils.c	/^static void in_use_store_ress(uint8_t bus_number, uint8_t device_address, void *resource1, void *resource2)$/;"	f	file:
inc_bflsc_errors	driver-bflsc.c	/^static void inc_bflsc_errors(struct thr_info *thr, struct bflsc_info *info, int8_t core)$/;"	f	file:
inc_bflsc_nonces	driver-bflsc.c	/^static void inc_bflsc_nonces(struct bflsc_info *info, int8_t core)$/;"	f	file:
inc_core_errors	driver-bflsc.c	/^static void inc_core_errors(struct bflsc_info *info, int8_t core)$/;"	f	file:
inc_hw_errors	cgminer.c	/^void inc_hw_errors(struct thr_info *thr)$/;"	f
include_count	cgminer.c	/^static int include_count;$/;"	v	file:
incorrect_slave_sequential	driver-klondike.c	/^	int incorrect_slave_sequential;$/;"	m	struct:klondike_info	file:
ineff_expands	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
inflight_target	hf_protocol.h	/^	uint16_t inflight_target;                   \/\/ Target inflight amount for GWQ protocol$/;"	m	struct:hf_usb_init_base
inflight_target	hf_protocol_be.h	/^	uint16_t inflight_target;                   \/\/ Target inflight amount for GWQ protocol$/;"	m	struct:hf_usb_init_base
info	api.c	/^	LOCKINFO *info;$/;"	m	struct:locklist	file:
init	miner.h	/^	char init[40];$/;"	m	struct:cgpu_info
init_stratum_threads	cgminer.c	/^static void init_stratum_threads(struct pool *pool)$/;"	f	file:
init_usb_transfer	usbutils.c	/^static void init_usb_transfer(struct usb_transfer *ut)$/;"	f	file:
initial_args	cgminer.c	/^char **initial_args;$/;"	v	file:
initial_ignored	driver-bab.c	/^	uint32_t initial_ignored;$/;"	m	struct:bab_info	file:
initialise_usb	cgminer.c	/^static void initialise_usb(void) {$/;"	f	file:
initialise_usb	cgminer.c	7792;"	d	file:
initialise_usblocks	usbutils.c	/^void initialise_usblocks(void)$/;"	f
initialised	driver-bab.c	/^	bool initialised;$/;"	m	struct:bab_info	file:
initialised	driver-klondike.c	/^	bool initialised;$/;"	m	struct:klondike_info	file:
initialised	usbutils.h	/^	bool initialised;$/;"	m	struct:cg_usb_info
initiate_stratum	util.c	/^bool initiate_stratum(struct pool *pool)$/;"	f
input_pool	cgminer.c	/^static bool input_pool(bool live)$/;"	f	file:
input_thr_id	cgminer.c	/^static int input_thr_id;$/;"	v	file:
input_thread	cgminer.c	/^static void *input_thread(void __maybe_unused *userdata)$/;"	f	file:
interface	usbutils.h	/^	int interface;$/;"	m	struct:usb_intinfo
interfaceVersion	usbutils.h	/^	unsigned char interfaceVersion;	\/\/ ??$/;"	m	struct:cg_usb_device
inthandler	cgminer.c	/^struct sigaction termhandler, inthandler;$/;"	v	typeref:struct:
intinfo	driver-icarus.c	/^	int intinfo;$/;"	m	struct:ICARUS_INFO	file:
intinfo_count	usbutils.h	/^	int intinfo_count;$/;"	m	struct:usb_find_devices
intinfos	usbutils.h	/^	struct usb_intinfo *intinfos;$/;"	m	struct:usb_find_devices	typeref:struct:usb_find_devices::usb_intinfo
io_add	api.c	/^static bool io_add(struct io_data *io_data, char *buf)$/;"	f	file:
io_close	api.c	/^static void io_close(struct io_data *io_data)$/;"	f	file:
io_data	api.c	/^	struct io_data *io_data;$/;"	m	struct:io_list	typeref:struct:io_list::io_data	file:
io_data	api.c	/^struct io_data {$/;"	s	file:
io_free	api.c	/^static void io_free()$/;"	f	file:
io_head	api.c	/^static struct io_list *io_head = NULL;$/;"	v	typeref:struct:io_list	file:
io_list	api.c	/^struct io_list {$/;"	s	file:
io_new	api.c	623;"	d	file:
io_put	api.c	/^static bool io_put(struct io_data *io_data, char *buf)$/;"	f	file:
io_reinit	api.c	/^static void io_reinit(struct io_data *io_data)$/;"	f	file:
ioerr_count	usbutils.h	/^	uint32_t ioerr_count;$/;"	m	struct:cg_usb_info
ip	api.c	/^	in_addr_t ip;$/;"	m	struct:IP4ACCESS	file:
ipaccess	api.c	/^static struct IP4ACCESS *ipaccess = NULL;$/;"	v	typeref:struct:IP4ACCESS	file:
ips	api.c	/^static int ips = 0;$/;"	v	file:
is_bitburner	driver-avalon.c	/^static bool is_bitburner(struct cgpu_info *avalon)$/;"	f	file:
is_in_use	usbutils.c	/^static bool is_in_use(libusb_device *dev)$/;"	f	file:
is_in_use_bd	usbutils.c	/^static bool is_in_use_bd(uint8_t bus_number, uint8_t device_address)$/;"	f	file:
isokerr	driver-bflsc.c	/^static bool isokerr(int err, char *buf, int amount)$/;"	f	file:
iswritemode	api.c	/^	bool iswritemode;$/;"	m	struct:CMDS	file:
item	usbutils.c	/^	struct cg_usb_stats_item item[CMD_ERROR+1];$/;"	m	struct:cg_usb_stats_details	typeref:struct:cg_usb_stats_details::cg_usb_stats_item	file:
itemstats	api.c	/^static int itemstats(struct io_data *io_data, int i, char *id, struct cgminer_stats *stats, struct cgminer_pool_stats *pool_stats, struct api_data *extra, struct cgpu_info *cgpu, bool isjson)$/;"	f	file:
jedata	cgminer.c	/^} *jedata = NULL;$/;"	v	typeref:struct:JE	file:
job_id	miner.h	/^	char 		*job_id;$/;"	m	struct:work
job_id	miner.h	/^	char *job_id;$/;"	m	struct:stratum_work
jobj_binary	cgminer.c	/^static bool jobj_binary(const json_t *obj, const char *key,$/;"	f	file:
jobque	driver-klondike.c	/^	JOBQUE *jobque;$/;"	m	struct:klondike_info	file:
jobque	driver-klondike.c	/^typedef struct jobque {$/;"	s	file:
jobs	driver-bflsc.h	/^	struct QueueJobStructure jobs[5];$/;"	m	struct:QueueJobPackStructure	typeref:struct:QueueJobPackStructure::QueueJobStructure
jobsInArray	driver-bflsc.h	/^	uint8_t jobsInArray;$/;"	m	struct:QueueJobPackStructure
jobsel	driver-bab.c	/^	uint32_t jobsel;$/;"	m	struct:bab_work_reply	file:
json_array_string	util.c	/^static char *json_array_string(json_t *val, unsigned int entry)$/;"	f	file:
json_escape	cgminer.c	/^static char *json_escape(char *str)$/;"	f	file:
json_escape_free	cgminer.c	/^static void json_escape_free()$/;"	f	file:
json_rpc_call	cgminer.c	1973;"	d	file:
json_rpc_call	util.c	/^json_t *json_rpc_call(CURL *curl, const char *url,$/;"	f
keep_curlalive	util.c	/^static void keep_curlalive(CURL *curl)$/;"	f	file:
keep_sockalive	util.c	/^static void keep_sockalive(SOCKETTYPE fd)$/;"	f	file:
key	uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle
keylen	uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle
kill_mining	cgminer.c	/^static void kill_mining(void)$/;"	f	file:
kill_timeout	cgminer.c	/^static void kill_timeout(struct thr_info *thr)$/;"	f	file:
kill_work	cgminer.c	/^void kill_work(void)$/;"	f
kli0_epinfos	usbutils.c	/^static struct usb_epinfo kli0_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
kli1_epinfos	usbutils.c	/^static struct usb_epinfo kli1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
kli_ints	usbutils.c	/^static struct usb_intinfo kli_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
kline	driver-klondike.c	/^	KLINE kline;$/;"	m	struct:klist	file:
kline	driver-klondike.c	/^typedef struct kline {$/;"	s	file:
kline_count	driver-klondike.c	/^	int kline_count;$/;"	m	struct:klondike_info	file:
klist	driver-klondike.c	/^typedef struct klist {$/;"	s	file:
klist_lock	driver-klondike.c	/^	cglock_t klist_lock;$/;"	m	struct:klondike_info	file:
kln_disable	driver-klondike.c	/^static void kln_disable(struct cgpu_info *klncgpu, int dev, bool all)$/;"	f	file:
kln_enable	driver-klondike.c	/^static bool kln_enable(struct cgpu_info *klncgpu)$/;"	f	file:
kln_epinfos	usbutils.c	/^static struct usb_epinfo kln_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
kln_ints	usbutils.c	/^static struct usb_intinfo kln_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
klondike_api_stats	driver-klondike.c	/^static struct api_data *klondike_api_stats(struct cgpu_info *klncgpu)$/;"	f	file:
klondike_cfg	driver-klondike.c	/^typedef struct klondike_cfg {$/;"	s	file:
klondike_check_nonce	driver-klondike.c	/^static void klondike_check_nonce(struct cgpu_info *klncgpu, KLIST *kitem)$/;"	f	file:
klondike_detect	driver-klondike.c	/^static void klondike_detect(bool __maybe_unused hotplug)$/;"	f	file:
klondike_detect_one	driver-klondike.c	/^static struct cgpu_info *klondike_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
klondike_drv	driver-klondike.c	/^struct device_drv klondike_drv = {$/;"	v	typeref:struct:device_drv
klondike_drv	driver-klondike.c	/^struct device_drv klondike_drv;$/;"	v	typeref:struct:device_drv
klondike_flush_work	driver-klondike.c	/^static void klondike_flush_work(struct cgpu_info *klncgpu)$/;"	f	file:
klondike_get_replies	driver-klondike.c	/^static void *klondike_get_replies(void *userdata)$/;"	f	file:
klondike_get_stats	driver-klondike.c	/^static bool klondike_get_stats(struct cgpu_info *klncgpu)$/;"	f	file:
klondike_header	driver-klondike.c	/^typedef struct klondike_header {$/;"	s	file:
klondike_id	driver-klondike.c	/^typedef struct klondike_id {$/;"	s	file:
klondike_identify	driver-klondike.c	/^static void klondike_identify(__maybe_unused struct cgpu_info *klncgpu)$/;"	f	file:
klondike_info	driver-klondike.c	/^struct klondike_info {$/;"	s	file:
klondike_init	driver-klondike.c	/^static bool klondike_init(struct cgpu_info *klncgpu)$/;"	f	file:
klondike_queue_full	driver-klondike.c	/^static bool klondike_queue_full(struct cgpu_info *klncgpu)$/;"	f	file:
klondike_scanwork	driver-klondike.c	/^static int64_t klondike_scanwork(struct thr_info *thr)$/;"	f	file:
klondike_send_work	driver-klondike.c	/^static bool klondike_send_work(struct cgpu_info *klncgpu, int dev, struct work *work)$/;"	f	file:
klondike_shutdown	driver-klondike.c	/^static void klondike_shutdown(struct thr_info *thr)$/;"	f	file:
klondike_status	driver-klondike.c	/^typedef struct klondike_status {$/;"	s	file:
klondike_thread_enable	driver-klondike.c	/^static void klondike_thread_enable(struct thr_info *thr)$/;"	f	file:
klondike_thread_init	driver-klondike.c	/^static bool klondike_thread_init(struct thr_info *thr)$/;"	f	file:
klondike_thread_prepare	driver-klondike.c	/^static bool klondike_thread_prepare(struct thr_info *thr)$/;"	f	file:
kname	miner.h	/^	const char *kname;$/;"	m	struct:cgpu_info
knc_active_fifo_full	driver-knc-spi-fpga.c	/^static inline bool knc_active_fifo_full(struct knc_state *knc)$/;"	f	file:
knc_active_fifo_inc_idx	driver-knc-spi-fpga.c	/^static inline void knc_active_fifo_inc_idx(int *idx)$/;"	f	file:
knc_check_disabled_cores	driver-knc-spi-fpga.c	/^static void knc_check_disabled_cores(struct knc_state *knc)$/;"	f	file:
knc_detect	driver-knc-spi-fpga.c	/^void knc_detect(bool __maybe_unused hotplug)$/;"	f
knc_detect_one	driver-knc-spi-fpga.c	/^static bool knc_detect_one(struct spidev_context *ctx)$/;"	f	file:
knc_disa_cores_fifo_inc_idx	driver-knc-spi-fpga.c	/^static inline void knc_disa_cores_fifo_inc_idx(int *idx)$/;"	f	file:
knc_drv	driver-knc-spi-fpga.c	/^struct device_drv knc_drv = {$/;"	v	typeref:struct:device_drv
knc_flush_work	driver-knc-spi-fpga.c	/^static void knc_flush_work(struct cgpu_info *cgpu)$/;"	f	file:
knc_process_response	driver-knc-spi-fpga.c	/^static int64_t knc_process_response(struct thr_info *thr, struct cgpu_info *cgpu,$/;"	f	file:
knc_queue_full	driver-knc-spi-fpga.c	/^static bool knc_queue_full(struct cgpu_info *cgpu)$/;"	f	file:
knc_queued_fifo_full	driver-knc-spi-fpga.c	/^static inline bool knc_queued_fifo_full(struct knc_state *knc)$/;"	f	file:
knc_queued_fifo_inc_idx	driver-knc-spi-fpga.c	/^static inline void knc_queued_fifo_inc_idx(int *idx)$/;"	f	file:
knc_scanwork	driver-knc-spi-fpga.c	/^static int64_t knc_scanwork(struct thr_info *thr)$/;"	f	file:
knc_state	driver-knc-spi-fpga.c	/^struct knc_state {$/;"	s	file:
knc_work_from_queue_to_spi	driver-knc-spi-fpga.c	/^static void knc_work_from_queue_to_spi(struct knc_state *knc,$/;"	f	file:
lagging	miner.h	/^	bool lagging;$/;"	m	struct:pool
last	miner.h	/^	struct timeval last;$/;"	m	struct:thr_info	typeref:struct:thr_info::timeval
last	usbutils.c	/^	struct timeval last;$/;"	m	struct:cg_usb_stats_item	typeref:struct:cg_usb_stats_item::timeval	file:
last_changed	miner.h	/^	struct timeval last_changed;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval
last_check_result	driver-bflsc.h	/^	struct timeval last_check_result;$/;"	m	struct:bflsc_dev	typeref:struct:bflsc_dev::timeval
last_dev_result	driver-bflsc.h	/^	struct timeval last_dev_result; \/\/ array > 0$/;"	m	struct:bflsc_dev	typeref:struct:bflsc_dev::timeval
last_device_valid_work	miner.h	/^	time_t last_device_valid_work;$/;"	m	struct:cgpu_info
last_did	driver-bab.c	/^	struct timeval last_did;$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:
last_diff	miner.h	/^	double last_diff;$/;"	m	struct:cgminer_pool_stats
last_message_tv	miner.h	/^	struct timeval last_message_tv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::timeval
last_nettime	util.c	/^static void last_nettime(struct timeval *last)$/;"	f	file:
last_nodev	usbutils.h	/^	struct timeval last_nodev;$/;"	m	struct:cg_usb_info	typeref:struct:cg_usb_info::timeval
last_nonce	miner.h	/^	struct timeval last_nonce;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval
last_nonce_result	driver-bflsc.h	/^	struct timeval last_nonce_result; \/\/ > 0 nonce$/;"	m	struct:bflsc_dev	typeref:struct:bflsc_dev::timeval
last_pipe	usbutils.h	/^	time_t last_pipe;$/;"	m	struct:cg_usb_info
last_share_diff	miner.h	/^	double last_share_diff;$/;"	m	struct:cgpu_info
last_share_diff	miner.h	/^	double last_share_diff;$/;"	m	struct:pool
last_share_pool	miner.h	/^	int last_share_pool;$/;"	m	struct:cgpu_info
last_share_pool_time	miner.h	/^	time_t last_share_pool_time;$/;"	m	struct:cgpu_info
last_share_time	miner.h	/^	time_t last_share_time;$/;"	m	struct:pool
last_shares	miner.h	/^	int last_shares, shares;$/;"	m	struct:pool
last_update	driver-bflsc.h	/^	struct timeval last_update;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::timeval
last_update	driver-klondike.c	/^	struct timeval last_update;$/;"	m	struct:jobque	typeref:struct:jobque::timeval	file:
lastgot	api.c	/^	LOCKSTAT lastgot;$/;"	m	struct:lockinfo	file:
lasthashcount	driver-klondike.c	/^	uint16_t lasthashcount;$/;"	m	struct:device_info	file:
lastid	cgminer.c	/^	int lastid;$/;"	m	struct:_cgpu_devid_counter	file:
late_update_count	driver-klondike.c	/^	int late_update_count;$/;"	m	struct:jobque	file:
late_update_sequential	driver-klondike.c	/^	int late_update_sequential;$/;"	m	struct:jobque	file:
latency	usbutils.h	/^	uint16_t latency;$/;"	m	struct:usb_find_devices
le256todouble	cgminer.c	/^static double le256todouble(const void *target)$/;"	f	file:
le32toh	miner.h	165;"	d
le32toh	miner.h	174;"	d
le64toh	miner.h	166;"	d
le64toh	miner.h	175;"	d
leave_powered_down	hf_protocol.h	/^	uint8_t  leave_powered_down:1;          \/\/ Init USB only, leave device powered down$/;"	m	struct:hf_usb_init_header
leave_powered_down	hf_protocol_be.h	/^	uint8_t  leave_powered_down:1;          \/\/ Init USB only, leave device powered down$/;"	m	struct:hf_usb_init_header
len	sha2.h	/^    unsigned int len;$/;"	m	struct:__anon7
len	util.c	/^	size_t		len;$/;"	m	struct:data_buffer	file:
len	util.c	/^	size_t		len;$/;"	m	struct:upload_buffer	file:
liSleep	util.c	/^static void liSleep(LARGE_INTEGER *li, int timeout)$/;"	f	file:
libusb_poll_thread	cgminer.c	/^static void *libusb_poll_thread(void __maybe_unused *arg)$/;"	f	file:
likely	miner.h	187;"	d
likely	miner.h	190;"	d
likely	miner.h	193;"	d
limit	usbutils.c	/^	int limit;$/;"	m	struct:driver_count	file:
linenum	api.c	/^	int linenum;$/;"	m	struct:lockinfo	file:
linenum	api.c	/^	int linenum;$/;"	m	struct:lockstat	file:
list	miner.h	/^	struct list_head list;$/;"	m	struct:string_elist	typeref:struct:string_elist::list_head
list	usbutils.c	/^	struct list_head list;$/;"	m	struct:usb_transfer	typeref:struct:usb_transfer::list_head	file:
list_add	elist.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	elist.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	elist.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	elist.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	elist.h	/^static inline int list_empty(struct list_head *head)$/;"	f
list_entry	elist.h	184;"	d
list_entry	elist.h	187;"	d
list_for_each	elist.h	196;"	d
list_for_each_entry	elist.h	224;"	d
list_for_each_entry_continue	elist.h	249;"	d
list_for_each_entry_safe	elist.h	236;"	d
list_for_each_prev	elist.h	204;"	d
list_for_each_safe	elist.h	214;"	d
list_head	elist.h	/^struct list_head {$/;"	s
list_move	elist.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	elist.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_splice	elist.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	elist.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
llt_epinfos	usbutils.c	/^static struct usb_epinfo llt_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
llt_ints	usbutils.c	/^static struct usb_intinfo llt_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
load_config	cgminer.c	/^static char *load_config(const char *arg, void __maybe_unused *unused)$/;"	f	file:
load_default_config	cgminer.c	/^static void load_default_config(void)$/;"	f	file:
load_temp_cutoffs	cgminer.c	/^static void load_temp_cutoffs()$/;"	f	file:
local_work	cgminer.c	/^unsigned int local_work;$/;"	v
localaddr	api.c	/^static const char *localaddr = "127.0.0.1";$/;"	v	file:
lock	api.c	/^	void *lock;$/;"	m	struct:lockinfo	file:
lock	driver-avalon.h	/^	pthread_mutex_t lock;$/;"	m	struct:avalon_info
lock	driver-bitfury.h	/^	pthread_mutex_t lock;$/;"	m	struct:bitfury_info
lock	driver-gridseed.c	/^	pthread_mutex_t	lock;$/;"	m	struct:s_gridseed_info	file:
lock	driver-hashfast.h	/^	pthread_mutex_t lock;$/;"	m	struct:hashfast_info
lock	driver-knc-spi-fpga.c	/^	pthread_mutex_t lock;$/;"	m	struct:knc_state	file:
lock	usbutils.c	/^	bool lock;$/;"	m	struct:resource_work	file:
lock_curses	cgminer.c	/^static inline void lock_curses(void)$/;"	f	file:
lock_id	api.c	/^	uint64_t lock_id;$/;"	m	struct:lockstat	file:
lock_id	api.c	/^static uint64_t lock_id = 1;$/;"	v	file:
lockgets	api.c	/^	LOCKLINE *lockgets;$/;"	m	struct:lockinfo	file:
lockhead	api.c	/^static LOCKLIST *lockhead;$/;"	v	file:
lockinfo	api.c	/^typedef struct lockinfo {$/;"	s	file:
lockline	api.c	/^typedef struct lockline {$/;"	s	file:
locklist	api.c	/^typedef struct locklist {$/;"	s	file:
locklock	api.c	/^static void locklock()$/;"	f	file:
lockmsgnow	api.c	/^static void lockmsgnow()$/;"	f	file:
lockstat	api.c	/^typedef struct lockstat {$/;"	s	file:
lockstat_lock	cgminer.c	/^pthread_mutex_t lockstat_lock;$/;"	v
lockstats	api.c	/^static void lockstats(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
locktries	api.c	/^	LOCKLINE *locktries;$/;"	m	struct:lockinfo	file:
lockunlock	api.c	/^static void lockunlock()$/;"	f	file:
log2_num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
log_curses_only	cgminer.c	/^bool log_curses_only(int prio, const char *datetime, const char *str)$/;"	f
log_print_status	cgminer.c	/^static void log_print_status(struct cgpu_info *cgpu)$/;"	f	file:
logcursor	cgminer.c	/^static int devcursor, logstart, logcursor;$/;"	v	file:
logstart	cgminer.c	/^static int devcursor, logstart, logcursor;$/;"	v	file:
logwin	cgminer.c	/^WINDOW *mainwin, *statuswin, *logwin;$/;"	v
logwin_update	cgminer.c	/^void logwin_update(void)$/;"	f
longpoll	miner.h	/^	bool		longpoll;$/;"	m	struct:work
longpoll_thread	cgminer.c	/^static void *longpoll_thread(void *userdata)$/;"	f	file:
longpoll_thread	cgminer.c	/^static void *longpoll_thread(void __maybe_unused *userdata)$/;"	f	file:
longpoll_thread	miner.h	/^	pthread_t longpoll_thread;$/;"	m	struct:pool
longpollid	miner.h	/^	char *longpollid;$/;"	m	struct:pool
low_operating_temp_limit	hf_protocol.h	/^	uint8_t  low_operating_temp_limit;          \/\/ Lowest normal operating limit$/;"	m	struct:hf_usb_init_options
low_operating_temp_limit	hf_protocol_be.h	/^	uint8_t  low_operating_temp_limit;          \/\/ Lowest normal operating limit$/;"	m	struct:hf_usb_init_options
lp_cond	cgminer.c	/^static pthread_cond_t lp_cond;$/;"	v	file:
lp_lock	cgminer.c	/^static pthread_mutex_t lp_lock;$/;"	v	file:
lp_path	util.c	/^	char		*lp_path;$/;"	m	struct:header_info	file:
lp_started	miner.h	/^	bool lp_started;$/;"	m	struct:pool
lp_url	miner.h	/^	char *lp_url;$/;"	m	struct:pool
main	api-example.c	/^int main(int argc, char *argv[])$/;"	f
main	bitforce-firmware-flash.c	/^int main(int argc, char**argv)$/;"	f
main	cgminer.c	/^int main(int argc, char *argv[])$/;"	f
mainwin	cgminer.c	/^WINDOW *mainwin, *statuswin, *logwin;$/;"	v
make_clone	cgminer.c	/^static struct work *make_clone(struct work *work)$/;"	f	file:
make_work	cgminer.c	/^static struct work *make_work(void)$/;"	f	file:
mandatory	miner.h	/^	bool		mandatory;$/;"	m	struct:work
manuf_string	usbutils.h	/^	char *manuf_string;$/;"	m	struct:cg_usb_device
markgotdid	api.c	/^static void markgotdid(LOCKINFO *info, uint64_t id, const char *file, const char *func, const int linenum, bool got, int ret)$/;"	f	file:
mask	api.c	/^	in_addr_t mask;$/;"	m	struct:IP4ACCESS	file:
mask	driver-icarus.c	/^static uint32_t mask(int work_division)$/;"	f	file:
matching_work	driver-avalon.h	/^	int matching_work[AVALON_MAX_MINER_NUM];$/;"	m	struct:avalon_info
max_delay	usbutils.c	/^	double max_delay;$/;"	m	struct:cg_usb_stats_item	file:
max_diff	miner.h	/^	double max_diff;$/;"	m	struct:cgminer_pool_stats
max_diff	miner.h	/^	double max_diff;$/;"	m	struct:device_drv
max_diff_count	miner.h	/^	uint32_t max_diff_count;$/;"	m	struct:cgminer_pool_stats
max_hashes	miner.h	/^	int64_t max_hashes;$/;"	m	struct:cgpu_info
max_links	driver-bab.c	/^	uint64_t max_links;$/;"	m	struct:bab_info	file:
max_nonces_per_frame	hf_protocol.h	/^	uint32_t max_nonces_per_frame:4;            \/\/ Maximum # of nonces to combine in a single frame$/;"	m	struct:hf_config_data
max_nonces_per_frame	hf_protocol_be.h	/^	uint32_t max_nonces_per_frame:4;            \/\/ Maximum # of nonces to combine in a single frame$/;"	m	struct:hf_config_data
max_rx_buffers	driver-hashfast.h	/^	uint8_t  max_rx_buffers;$/;"	m	struct:hf_long_usb_stats1
max_rx_buffers	hf_protocol.h	/^	uint8_t  max_rx_buffers;                        \/\/ Maximum # of receive buffers ever used$/;"	m	struct:hf_usb_stats1
max_rx_buffers	hf_protocol_be.h	/^	uint8_t  max_rx_buffers;                        \/\/ Maximum # of receive buffers ever used$/;"	m	struct:hf_usb_stats1
max_tests_per_nonce	driver-bab.c	/^	uint64_t max_tests_per_nonce;$/;"	m	struct:bab_info	file:
max_tmo	usbutils.h	/^	uint32_t max_tmo;$/;"	m	struct:cg_usb_tmo
max_tx_buffers	driver-hashfast.h	/^	uint8_t  max_tx_buffers;$/;"	m	struct:hf_long_usb_stats1
max_tx_buffers	hf_protocol.h	/^	uint8_t  max_tx_buffers;                        \/\/ Maximum # of send buffers ever used$/;"	m	struct:hf_usb_stats1
max_tx_buffers	hf_protocol_be.h	/^	uint8_t  max_tx_buffers;                        \/\/ Maximum # of send buffers ever used$/;"	m	struct:hf_usb_stats1
maxcount	driver-klondike.c	/^	uint8_t maxcount[2];$/;"	m	struct:klondike_status	file:
maxroll	driver-bitfury.h	/^	int maxroll; \/\/ Last maxroll sent to device$/;"	m	struct:bitfury_info
mcast	api.c	/^static void mcast()$/;"	f	file:
mcast_init	api.c	/^void mcast_init()$/;"	f
mcast_thread	api.c	/^static void *mcast_thread(void *userdata)$/;"	f	file:
measure_interval	hf_protocol.h	/^	uint8_t  measure_interval;                  \/\/ Die temperature measurement interval (msec)$/;"	m	struct:hf_config_data
measure_interval	hf_protocol_be.h	/^	uint8_t  measure_interval;                  \/\/ Die temperature measurement interval (msec)$/;"	m	struct:hf_config_data
merkle	driver-klondike.c	/^	uint8_t merkle[12];$/;"	m	struct:_worktask	file:
merkle7	driver-bab.c	/^	uint32_t merkle7;$/;"	m	struct:bab_work_send	file:
merkle_bin	miner.h	/^	unsigned char **merkle_bin;$/;"	m	struct:stratum_work
merkle_offset	miner.h	/^	int merkle_offset;$/;"	m	struct:pool
merkle_residual	hf_protocol.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_serial
merkle_residual	hf_protocol.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_usb
merkle_residual	hf_protocol_be.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_serial
merkle_residual	hf_protocol_be.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_usb
merkles	miner.h	/^	int merkles;$/;"	m	struct:stratum_work
message	api.c	/^static void message(struct io_data *io_data, int messageid, int paramid, char *param2, bool isjson)$/;"	f	file:
message	hf_protocol.h	/^	char     message[];                         \/\/ NULL terminated, little endian byte order$/;"	m	struct:hf_usb_notice_data
message	hf_protocol_be.h	/^	char     message[];                         \/\/ NULL terminated, little endian byte order$/;"	m	struct:hf_usb_notice_data
midState	driver-bflsc.h	/^	uint8_t midState[MIDSTATE_BYTES];$/;"	m	struct:QueueJobStructure
midstate	driver-avalon.h	/^	uint8_t midstate[32];$/;"	m	struct:avalon_result
midstate	driver-avalon.h	/^	uint8_t midstate[32];$/;"	m	struct:avalon_task
midstate	driver-bab.c	/^	uint32_t midstate[MIDSTATE_UINTS];$/;"	m	struct:bab_work_send	file:
midstate	driver-icarus.c	/^	uint8_t midstate[ICARUS_MIDSTATE_SIZE];$/;"	m	struct:ICARUS_WORK	file:
midstate	driver-klondike.c	/^	uint8_t midstate[32];$/;"	m	struct:_worktask	file:
midstate	driver-knc-spi-fpga.c	/^	uint32_t midstate[WORK_MIDSTATE_WORDS];$/;"	m	struct:spi_request	file:
midstate	hf_protocol.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_serial
midstate	hf_protocol.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_usb
midstate	hf_protocol_be.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_serial
midstate	hf_protocol_be.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_usb
midstate	miner.h	/^	unsigned char	midstate[32];$/;"	m	struct:work
min_data_count	driver-icarus.c	/^	uint32_t min_data_count;$/;"	m	struct:ICARUS_INFO	file:
min_delay	usbutils.c	/^	double min_delay;$/;"	m	struct:cg_usb_stats_item	file:
min_diff	miner.h	/^	double min_diff;$/;"	m	struct:cgminer_pool_stats
min_diff_count	miner.h	/^	uint32_t min_diff_count;$/;"	m	struct:cgminer_pool_stats
min_tmo	usbutils.h	/^	uint32_t min_tmo;$/;"	m	struct:cg_usb_tmo
minecoin	api.c	/^static void minecoin(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
mined	miner.h	/^	bool		mined;$/;"	m	struct:work
miner_count	driver-avalon.h	/^	int miner_count;$/;"	m	struct:avalon_info
miner_num	driver-avalon.h	/^	uint8_t miner_num;$/;"	m	struct:avalon_result
miner_num	driver-avalon.h	/^	uint8_t miner_num;$/;"	m	struct:avalon_task
miner_thread	cgminer.c	/^void *miner_thread(void *userdata)$/;"	f
minerconfig	api.c	/^static void minerconfig(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
minerstats	api.c	/^static void minerstats(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
mining_thr	cgminer.c	/^struct thr_info **mining_thr;$/;"	v	typeref:struct:thr_info
mining_thr_lock	cgminer.c	/^pthread_rwlock_t mining_thr_lock;$/;"	v
mining_threads	cgminer.c	/^int mining_threads;$/;"	v
mix	driver-knc-spi-fpga.c	/^static unsigned long mix(unsigned long a, unsigned long b, unsigned long c)$/;"	f	file:
mksec	usbutils.c	/^static LPSECURITY_ATTRIBUTES mksec(const char *dname, uint8_t bus_number, uint8_t device_address)$/;"	f	file:
mmq_epinfos	usbutils.c	/^static struct usb_epinfo mmq_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
mmq_ints	usbutils.c	/^static struct usb_intinfo mmq_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
mode	driver-knc-spi-fpga.c	/^	uint8_t mode;$/;"	m	struct:spidev_context	file:
modes	usbutils.c	/^	uint32_t modes;$/;"	m	struct:cg_usb_stats_details	file:
modes_str	usbutils.c	/^static void modes_str(char *buf, uint32_t modes)$/;"	f	file:
modminer_delta_clock	driver-modminer.c	/^static const char *modminer_delta_clock(struct thr_info *thr, int delta, bool temp, bool force)$/;"	f	file:
modminer_detect	driver-modminer.c	/^static void modminer_detect(bool __maybe_unused hotplug)$/;"	f	file:
modminer_detect_one	driver-modminer.c	/^static struct cgpu_info *modminer_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:
modminer_drv	driver-modminer.c	/^struct device_drv modminer_drv = {$/;"	v	typeref:struct:device_drv
modminer_fpga_init	driver-modminer.c	/^static bool modminer_fpga_init(struct thr_info *thr)$/;"	f	file:
modminer_fpga_prepare	driver-modminer.c	/^static bool modminer_fpga_prepare(struct thr_info *thr)$/;"	f	file:
modminer_fpga_shutdown	driver-modminer.c	/^static void modminer_fpga_shutdown(struct thr_info *thr)$/;"	f	file:
modminer_fpga_state	miner.h	/^struct modminer_fpga_state {$/;"	s
modminer_fpga_upload_bitstream	driver-modminer.c	/^static bool modminer_fpga_upload_bitstream(struct cgpu_info *modminer)$/;"	f	file:
modminer_hw_error	driver-modminer.c	/^static void modminer_hw_error(struct thr_info *thr)$/;"	f	file:
modminer_mutex	miner.h	/^	pthread_mutex_t *modminer_mutex;$/;"	m	struct:cgpu_info
modminer_process_results	driver-modminer.c	/^static uint64_t modminer_process_results(struct thr_info *thr, struct work *work)$/;"	f	file:
modminer_scanhash	driver-modminer.c	/^static int64_t modminer_scanhash(struct thr_info *thr, struct work *work, int64_t __maybe_unused max_nonce)$/;"	f	file:
modminer_set_device	driver-modminer.c	/^static char *modminer_set_device(struct cgpu_info *modminer, char *option, char *setting, char *replybuf)$/;"	f	file:
modminer_start_work	driver-modminer.c	/^static bool modminer_start_work(struct thr_info *thr, struct work *work)$/;"	f	file:
modules	driver-gridseed.c	/^	int				modules;$/;"	m	struct:s_gridseed_info	file:
most_devices	cgminer.c	/^static int most_devices;$/;"	v	file:
ms3steps	driver-bab.c	/^	uint32_t ms3steps[MIDSTATE_UINTS];$/;"	m	struct:bab_work_send	file:
ms3steps	driver-bab.c	/^static void ms3steps(uint32_t *p)$/;"	f	file:
ms_tdiff	util.c	/^int ms_tdiff(struct timeval *end, struct timeval *start)$/;"	f
ms_to_timespec	util.c	/^void ms_to_timespec(struct timespec *spec, int64_t ms)$/;"	f
ms_to_timeval	util.c	/^void ms_to_timeval(struct timeval *val, int64_t ms)$/;"	f
ms_work	driver-bflsc.h	/^	unsigned int ms_work;$/;"	m	struct:bflsc_dev
msg_detect_reply	driver-klondike.c	/^static const char *msg_detect_reply = "DReply";$/;"	v	file:
msg_detect_send	driver-klondike.c	/^static const char *msg_detect_send = "DSend";$/;"	v	file:
msg_reply	driver-klondike.c	/^static const char *msg_reply = "Reply";$/;"	v	file:
msg_send	driver-klondike.c	/^static const char *msg_send = "Send";$/;"	v	file:
mt_disable	cgminer.c	/^static void mt_disable(struct thr_info *mythr, const int thr_id,$/;"	f	file:
mutex	miner.h	/^	pthread_mutex_t		mutex;$/;"	m	struct:thread_q
mutex	usbutils.h	/^	pthread_mutex_t *mutex;$/;"	m	struct:cg_usb_device
mutex	util.h	/^	pthread_mutex_t mutex;$/;"	m	struct:cglock
mutex_destroy	miner.h	/^static inline void mutex_destroy(pthread_mutex_t *lock)$/;"	f
mutex_init	miner.h	723;"	d
mutex_lock	miner.h	711;"	d
mutex_trylock	miner.h	714;"	d
mutex_unlock	miner.h	713;"	d
mutex_unlock_noyield	miner.h	712;"	d
my_log_curses	logging.c	/^static void my_log_curses(int prio, const char *datetime, const char *str, bool force)$/;"	f	file:
my_thr_id	api.c	/^static int my_thr_id = 0;$/;"	v	file:
myassert	bitforce-firmware-flash.c	21;"	d	file:
n1_len	miner.h	/^	size_t n1_len;$/;"	m	struct:pool
n2size	miner.h	/^	int n2size;$/;"	m	struct:pool
nDevs	cgminer.c	/^int nDevs;$/;"	v
name	api.c	/^	char *name;$/;"	m	struct:CMDS	file:
name	cgminer.c	/^	char name[4];$/;"	m	struct:_cgpu_devid_counter	file:
name	miner.h	/^	char *name;$/;"	m	struct:api_data
name	miner.h	/^	char *name;$/;"	m	struct:cgpu_info
name	miner.h	/^	char *name;$/;"	m	struct:device_drv
name	usbutils.c	/^	char *name;$/;"	m	struct:cg_usb_stats	file:
name	usbutils.h	/^	const char *name;$/;"	m	struct:usb_find_devices
name	util.c	/^	const char *name;$/;"	m	struct:__anon4	file:
nanosleep	compat.h	/^static inline int nanosleep(const struct timespec *req, struct timespec *rem)$/;"	f
nanosleep_abstime	util.c	/^static void nanosleep_abstime(struct timespec *ts_end)$/;"	f	file:
nbit	miner.h	/^	char *nbit;$/;"	m	struct:stratum_work
needworks	driver-gridseed.c	/^	int				needworks;  \/* how many works need to be queue for device *\/$/;"	m	struct:s_gridseed_info	file:
net_bytes_received	miner.h	/^	uint64_t net_bytes_received;$/;"	m	struct:cgminer_pool_stats
net_bytes_sent	miner.h	/^	uint64_t net_bytes_sent;$/;"	m	struct:cgminer_pool_stats
netacc_lock	cgminer.c	/^pthread_rwlock_t netacc_lock;$/;"	v
nettime	util.c	/^struct timeval nettime;$/;"	v	typeref:struct:timeval
new_blist_set	driver-bab.c	/^static BLIST *new_blist_set(struct cgpu_info *babcgpu)$/;"	f	file:
new_blocks	cgminer.c	/^unsigned int new_blocks;$/;"	v
new_devices	cgminer.c	/^static int new_devices;$/;"	v	file:
new_klist_set	driver-klondike.c	/^static KLIST *new_klist_set(struct cgpu_info *klncgpu)$/;"	f	file:
new_nonces	driver-bab.c	/^	uint64_t new_nonces;$/;"	m	struct:bab_info	file:
new_rlist_set	driver-bab.c	/^static RLIST *new_rlist_set(struct cgpu_info *babcgpu)$/;"	f	file:
new_threads	cgminer.c	/^static int new_threads;$/;"	v	file:
new_work	miner.h	/^	bool new_work;$/;"	m	struct:cgpu_info
new_work	miner.h	/^	bool new_work;$/;"	m	struct:modminer_fpga_state
newlock	api.c	/^static LOCKLIST *newlock(void *lock, enum cglock_typ typ, const char *file, const char *func, const int linenum)$/;"	f	file:
newstats	usbutils.c	/^static void newstats(struct cgpu_info *cgpu)$/;"	f	file:
next	api.c	/^	struct io_list *next;$/;"	m	struct:io_list	typeref:struct:io_list::io_list	file:
next	api.c	/^	struct lockline *next;$/;"	m	struct:lockline	typeref:struct:lockline::lockline	file:
next	api.c	/^	struct locklist *next;$/;"	m	struct:locklist	typeref:struct:locklist::locklist	file:
next	cgminer.c	/^	struct JE *next;$/;"	m	struct:JE	typeref:struct:JE::JE	file:
next	driver-bab.c	/^	struct blist *next;$/;"	m	struct:blist	typeref:struct:blist::blist	file:
next	driver-bab.c	/^	struct rlist *next;$/;"	m	struct:rlist	typeref:struct:rlist::rlist	file:
next	driver-klondike.c	/^	struct klist *next;$/;"	m	struct:klist	typeref:struct:klist::klist	file:
next	elist.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	miner.h	/^	struct api_data *next;$/;"	m	struct:api_data	typeref:struct:api_data::api_data
next	usbutils.c	/^	struct resource_reply *next;$/;"	m	struct:resource_reply	typeref:struct:resource_reply::resource_reply	file:
next	usbutils.c	/^	struct resource_work *next;$/;"	m	struct:resource_work	typeref:struct:resource_work::resource_work	file:
next	usbutils.c	/^	struct usb_in_use_list *next;$/;"	m	struct:usb_in_use_list	typeref:struct:usb_in_use_list::usb_in_use_list	file:
next	uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle
next_stat	usbutils.c	/^static int next_stat = USB_NOSTAT;$/;"	v	file:
next_work	driver-bab.c	/^static BLIST *next_work(struct cgpu_info *babcgpu, int chip)$/;"	f	file:
next_work_cmd	miner.h	/^	char next_work_cmd[46];$/;"	m	struct:modminer_fpga_state
next_work_id	driver-knc-spi-fpga.c	/^	uint32_t next_work_id;$/;"	m	struct:knc_state	file:
nextworkid	driver-klondike.c	/^	uint32_t nextworkid;$/;"	m	struct:device_info	file:
nibble	hexdump.c	/^static char nibble[] = {$/;"	v	file:
no_asic_initialization	hf_protocol.h	/^	uint8_t  no_asic_initialization:1;      \/\/ Do not perform automatic ASIC initialization$/;"	m	struct:hf_usb_init_header
no_asic_initialization	hf_protocol_be.h	/^	uint8_t  no_asic_initialization:1;      \/\/ Do not perform automatic ASIC initialization$/;"	m	struct:hf_usb_init_header
no_matching_work	driver-avalon.h	/^	int no_matching_work;$/;"	m	struct:avalon_info
no_matching_work	driver-bitfury.h	/^	int no_matching_work;$/;"	m	struct:bitfury_info
no_matching_work	driver-hashfast.h	/^	int no_matching_work;$/;"	m	struct:hashfast_info
no_work	cgminer.c	/^static bool no_work;$/;"	v	file:
noblock_socket	util.c	/^static void noblock_socket(SOCKETTYPE fd)$/;"	f	file:
nodatareturned	usbutils.c	/^static const char *nodatareturned = "no data returned ";$/;"	v	file:
node	miner.h	/^	struct list_head node;$/;"	m	struct:curl_ent	typeref:struct:curl_ent::list_head
nodev	usbutils.h	/^	bool nodev;$/;"	m	struct:cg_usb_info
nodev_count	usbutils.h	/^	int nodev_count;$/;"	m	struct:cg_usb_info
noexpand	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
noise	driver-klondike.c	/^	uint8_t noise;$/;"	m	struct:klondike_status	file:
noisecount	driver-klondike.c	/^	uint64_t noisecount;$/;"	m	struct:klondike_info	file:
nonce	driver-avalon.h	/^	uint32_t nonce;$/;"	m	struct:avalon_result
nonce	driver-bab.c	/^	uint32_t nonce;$/;"	m	struct:rlist	file:
nonce	driver-bab.c	/^	uint32_t nonce[BAB_REPLY_NONCES];$/;"	m	struct:bab_work_reply	file:
nonce	driver-klondike.c	/^	uint8_t nonce[4];$/;"	m	struct:_workresult	file:
nonce	driver-knc-spi-fpga.c	/^	uint32_t nonce;$/;"	m	struct:spi_response	file:
nonce	hf_protocol.h	/^	uint32_t nonce;                         \/\/ Candidate nonce$/;"	m	struct:hf_candidate_nonce
nonce	hf_protocol_be.h	/^	uint32_t nonce;                         \/\/ Candidate nonce$/;"	m	struct:hf_candidate_nonce
nonce	miner.h	/^	uint32_t	nonce; \/* For devices that hash sole work *\/$/;"	m	struct:work
nonce1	miner.h	/^	char		*nonce1;$/;"	m	struct:work
nonce1	miner.h	/^	char *nonce1;$/;"	m	struct:pool
nonce1bin	miner.h	/^	unsigned char *nonce1bin;$/;"	m	struct:pool
nonce2	miner.h	/^	uint32_t	nonce2;$/;"	m	struct:work
nonce2	miner.h	/^	uint32_t nonce2;$/;"	m	struct:pool
nonce2_len	miner.h	/^	size_t		nonce2_len;$/;"	m	struct:work
nonce2_offset	miner.h	/^	int nonce2_offset;$/;"	m	struct:pool
nonce_before	driver-bab.c	/^	bool nonce_before[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
nonce_count	driver-klondike.c	/^	double nonce_count;$/;"	m	struct:klondike_info	file:
nonce_elf	driver-avalon.h	/^	uint8_t nonce_elf		:1;$/;"	m	struct:avalon_task
nonce_loops	hf_protocol.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_serial
nonce_loops	hf_protocol.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_usb
nonce_loops	hf_protocol_be.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_serial
nonce_loops	hf_protocol_be.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_usb
nonce_mask	driver-icarus.c	/^	uint32_t nonce_mask;$/;"	m	struct:ICARUS_INFO	file:
nonce_max	driver-klondike.c	/^	double nonce_max;$/;"	m	struct:klondike_info	file:
nonce_min	driver-klondike.c	/^	double nonce_min;$/;"	m	struct:klondike_info	file:
nonce_msoffset	hf_protocol.h	/^	uint16_t nonce_msoffset;                    \/\/ This value << 16 added to starting nonce$/;"	m	struct:hf_group_data
nonce_msoffset	hf_protocol_be.h	/^	uint16_t nonce_msoffset;                    \/\/ This value << 16 added to starting nonce$/;"	m	struct:hf_group_data
nonce_offset_count	driver-bab.c	/^	uint64_t nonce_offset_count[BAB_NONCE_OFFSETS];$/;"	m	struct:bab_info	file:
nonce_range	miner.h	/^	bool nonce_range;$/;"	m	struct:cgpu_info
nonce_total	driver-klondike.c	/^	double nonce_total;$/;"	m	struct:klondike_info	file:
noncecount	driver-klondike.c	/^	int noncecount;$/;"	m	struct:klondike_info	file:
noncecount	driver-klondike.c	/^	uint32_t noncecount;$/;"	m	struct:device_info	file:
nonces	driver-avalon.h	/^	int nonces;$/;"	m	struct:avalon_info
nonces	driver-bab.c	/^	int nonces;$/;"	m	struct:blist	file:
nonces	driver-bitfury.h	/^	int nonces;$/;"	m	struct:bitfury_info
nonces	miner.h	/^	uint32_t nonces;$/;"	m	struct:cgpu_info
nonces_found	driver-bflsc.h	/^	uint64_t nonces_found;$/;"	m	struct:bflsc_dev
nonces_hw	driver-bflsc.h	/^	int nonces_hw; \/\/ TODO: this - need to add a paramter to submit_nonce()$/;"	m	struct:bflsc_dev
nonideal_items	uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table
noop_can_limit_work	cgminer.c	/^static uint64_t noop_can_limit_work(struct thr_info __maybe_unused *thr)$/;"	f	file:
noop_detect	cgminer.c	/^static void noop_detect(bool __maybe_unused hotplug)$/;"	f	file:
noop_flush_work	cgminer.c	7510;"	d	file:
noop_get_statline	cgminer.c	/^static void noop_get_statline(char __maybe_unused *buf, size_t __maybe_unused bufsiz, struct cgpu_info __maybe_unused *cgpu)$/;"	f	file:
noop_get_stats	cgminer.c	/^static bool noop_get_stats(struct cgpu_info __maybe_unused *cgpu)$/;"	f	file:
noop_hw_error	cgminer.c	/^static void noop_hw_error(struct thr_info __maybe_unused *thr)$/;"	f	file:
noop_prepare_work	cgminer.c	/^static bool noop_prepare_work(struct thr_info __maybe_unused *thr, struct work __maybe_unused *work)$/;"	f	file:
noop_queue_full	cgminer.c	7512;"	d	file:
noop_reinit_device	cgminer.c	/^static void noop_reinit_device(struct cgpu_info __maybe_unused *cgpu)$/;"	f	file:
noop_thread_enable	cgminer.c	/^static void noop_thread_enable(struct thr_info __maybe_unused *thr)$/;"	f	file:
noop_thread_init	cgminer.c	/^static bool noop_thread_init(struct thr_info __maybe_unused *thr)$/;"	f	file:
noop_thread_prepare	cgminer.c	/^static bool noop_thread_prepare(struct thr_info __maybe_unused *thr)$/;"	f	file:
noop_thread_shutdown	cgminer.c	/^static void noop_thread_shutdown(struct thr_info __maybe_unused *thr)$/;"	f	file:
noop_update_work	cgminer.c	7511;"	d	file:
not_first_reply	driver-bab.c	/^	bool not_first_reply[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
not_first_work	driver-bflsc.h	/^	bool not_first_work; \/\/ allow ignoring the first nonce error$/;"	m	struct:bflsc_info
notify	api.c	/^static void notify(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, char group)$/;"	f	file:
notifystatus	api.c	/^void notifystatus(struct io_data *io_data, int device, struct cgpu_info *cgpu, bool isjson, __maybe_unused char group)$/;"	f
ntime	driver-bab.c	/^	uint32_t ntime;$/;"	m	struct:bab_work_send	file:
ntime	hf_protocol.h	/^	uint16_t ntime;                         \/\/ ntime offset, if ntime roll occurred, in LS 12 bits$/;"	m	struct:hf_candidate_nonce
ntime	hf_protocol_be.h	/^	uint16_t ntime;                         \/\/ ntime offset, if ntime roll occurred, in LS 12 bits$/;"	m	struct:hf_candidate_nonce
ntime	miner.h	/^	char		*ntime;$/;"	m	struct:work
ntime	miner.h	/^	char *ntime;$/;"	m	struct:stratum_work
ntime_loops	hf_protocol.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_serial
ntime_loops	hf_protocol.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_usb
ntime_loops	hf_protocol_be.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_serial
ntime_loops	hf_protocol_be.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_usb
ntime_offset	hf_protocol.h	/^	uint16_t ntime_offset;                      \/\/ This value added to timestamp$/;"	m	struct:hf_group_data
ntime_offset	hf_protocol_be.h	/^	uint16_t ntime_offset;                      \/\/ This value added to timestamp$/;"	m	struct:hf_group_data
num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
num_items	uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table
num_processors	cgminer.c	/^int num_processors;$/;"	v
num_sequence	driver-hashfast.h	/^	int num_sequence;                           \/\/ A power of 2. What the sequence number range is.$/;"	m	struct:hashfast_info
numascs	api.c	/^static int numascs(void)$/;"	f	file:
numpgas	api.c	/^static int numpgas(void)$/;"	f	file:
offset_ntime	cgminer.c	/^static char *offset_ntime(const char *ntime, int noffset)$/;"	f	file:
ok_nonces	driver-bab.c	/^	uint64_t ok_nonces;$/;"	m	struct:bab_info	file:
oknonce	driver-bab.c	/^static bool oknonce(struct thr_info *thr, struct cgpu_info *babcgpu, int chip, uint32_t nonce)$/;"	f	file:
old_conf	driver-bab.c	/^	uint8_t old_conf[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
old_fast	driver-bab.c	/^	uint8_t old_fast[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:
oldest_nonce	driver-bab.c	/^static bool oldest_nonce(struct cgpu_info *babcgpu, int *chip, uint32_t *nonce, bool *first_second)$/;"	f	file:
one_byte_temp	miner.h	/^	bool one_byte_temp;$/;"	m	struct:modminer_fpga_state
one_usec	hf_protocol.h	/^	uint32_t one_usec:12;                       \/\/ How many LF clocks per usec.$/;"	m	struct:hf_config_data
one_usec	hf_protocol_be.h	/^	uint32_t one_usec:12;                       \/\/ How many LF clocks per usec.$/;"	m	struct:hf_config_data
open_bitstream	fpgautils.c	/^FILE *open_bitstream(const char *dname, const char *filename)$/;"	f
operation_code	hf_protocol.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_header
operation_code	hf_protocol.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_pll_config
operation_code	hf_protocol.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_usb_init_header
operation_code	hf_protocol_be.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_header
operation_code	hf_protocol_be.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_pll_config
operation_code	hf_protocol_be.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_usb_init_header
operation_status	hf_protocol.h	/^	uint8_t  operation_status;                  \/\/ Reply status for OP_USB_INIT (0 = success)$/;"	m	struct:hf_usb_init_base
operation_status	hf_protocol_be.h	/^	uint8_t  operation_status;                  \/\/ Reply status for OP_USB_INIT (0 = success)$/;"	m	struct:hf_usb_init_base
opt_api_allow	cgminer.c	/^char *opt_api_allow = NULL;$/;"	v
opt_api_description	cgminer.c	/^char *opt_api_description = PACKAGE_STRING;$/;"	v
opt_api_groups	cgminer.c	/^char *opt_api_groups;$/;"	v
opt_api_listen	cgminer.c	/^bool opt_api_listen;$/;"	v
opt_api_mcast	cgminer.c	/^bool opt_api_mcast;$/;"	v
opt_api_mcast_addr	cgminer.c	/^char *opt_api_mcast_addr = API_MCAST_ADDR;$/;"	v
opt_api_mcast_code	cgminer.c	/^char *opt_api_mcast_code = API_MCAST_CODE;$/;"	v
opt_api_mcast_des	cgminer.c	/^char *opt_api_mcast_des = "";$/;"	v
opt_api_mcast_port	cgminer.c	/^int opt_api_mcast_port = 4028;$/;"	v
opt_api_network	cgminer.c	/^bool opt_api_network;$/;"	v
opt_api_port	cgminer.c	/^int opt_api_port = 4028;$/;"	v
opt_autoengine	cgminer.c	/^bool opt_autoengine;$/;"	v
opt_autofan	cgminer.c	/^bool opt_autofan;$/;"	v
opt_avalon_auto	driver-avalon.c	/^bool opt_avalon_auto;$/;"	v
opt_avalon_fan_max	driver-avalon.c	/^int opt_avalon_fan_max = AVALON_DEFAULT_FAN_MAX_PWM;$/;"	v
opt_avalon_fan_min	driver-avalon.c	/^int opt_avalon_fan_min = AVALON_DEFAULT_FAN_MIN_PWM;$/;"	v
opt_avalon_freq_max	driver-avalon.c	/^int opt_avalon_freq_max = AVALON_MAX_FREQUENCY;$/;"	v
opt_avalon_freq_min	driver-avalon.c	/^int opt_avalon_freq_min = AVALON_MIN_FREQUENCY;$/;"	v
opt_avalon_options	cgminer.c	/^char *opt_avalon_options = NULL;$/;"	v
opt_avalon_overheat	driver-avalon.c	/^int opt_avalon_overheat = AVALON_TEMP_OVERHEAT;$/;"	v
opt_avalon_temp	driver-avalon.c	/^int opt_avalon_temp = AVALON_TEMP_TARGET;$/;"	v
opt_benchmark	cgminer.c	/^static bool opt_benchmark;$/;"	v	file:
opt_bfl_noncerange	cgminer.c	/^bool opt_bfl_noncerange;$/;"	v
opt_bflsc_overheat	driver-bflsc.c	/^int opt_bflsc_overheat = BFLSC_TEMP_OVERHEAT;$/;"	v
opt_bflsc_overheat	driver-bflsc.h	/^int opt_bflsc_overheat;$/;"	v
opt_bitburner_core_voltage	driver-avalon.c	/^int opt_bitburner_core_voltage = BITBURNER_DEFAULT_CORE_VOLTAGE;$/;"	v
opt_bitburner_fury_core_voltage	driver-avalon.c	/^int opt_bitburner_fury_core_voltage = BITBURNER_FURY_DEFAULT_CORE_VOLTAGE;$/;"	v
opt_bitburner_fury_options	cgminer.c	/^char *opt_bitburner_fury_options = NULL;$/;"	v
opt_cmdline_table	cgminer.c	/^static struct opt_table opt_cmdline_table[] = {$/;"	v	typeref:struct:opt_table	file:
opt_compact	cgminer.c	/^bool opt_compact;$/;"	v
opt_config_table	cgminer.c	/^static struct opt_table opt_config_table[] = {$/;"	v	typeref:struct:opt_table	file:
opt_cutofftemp	cgminer.c	/^const int opt_cutofftemp = 95;$/;"	v
opt_debug	logging.c	/^bool opt_debug = false;$/;"	v
opt_delaynet	cgminer.c	/^bool opt_delaynet;$/;"	v
opt_devs_enabled	cgminer.c	/^static int opt_devs_enabled;$/;"	v	file:
opt_disable_pool	cgminer.c	/^bool opt_disable_pool;$/;"	v
opt_display_devs	cgminer.c	/^static bool opt_display_devs;$/;"	v	file:
opt_expiry	cgminer.c	/^int opt_expiry = 120;$/;"	v
opt_fail_only	cgminer.c	/^bool opt_fail_only;$/;"	v
opt_fix_protocol	cgminer.c	/^static bool opt_fix_protocol;$/;"	v	file:
opt_frequency	driver-gridseed.c	/^static const char *opt_frequency[] = {$/;"	v	file:
opt_gridseed_options	cgminer.c	/^char *opt_gridseed_options = NULL;$/;"	v
opt_hfa_dfu_boot	cgminer.c	/^bool opt_hfa_dfu_boot;$/;"	v
opt_hfa_dfu_boot	driver-hashfast.h	/^bool opt_hfa_dfu_boot;$/;"	v
opt_hfa_hash_clock	cgminer.c	/^int opt_hfa_hash_clock;$/;"	v
opt_hfa_hash_clock	driver-hashfast.h	/^int opt_hfa_hash_clock;$/;"	v
opt_hfa_ntime_roll	cgminer.c	/^int opt_hfa_ntime_roll;$/;"	v
opt_hfa_ntime_roll	driver-hashfast.h	/^int opt_hfa_ntime_roll;$/;"	v
opt_hfa_pll_bypass	cgminer.c	/^bool opt_hfa_pll_bypass;$/;"	v
opt_hfa_pll_bypass	driver-hashfast.h	/^bool opt_hfa_pll_bypass;$/;"	v
opt_icarus_options	cgminer.c	/^char *opt_icarus_options = NULL;$/;"	v
opt_icarus_timing	cgminer.c	/^char *opt_icarus_timing = NULL;$/;"	v
opt_kernel_path	cgminer.c	/^char *opt_kernel_path;$/;"	v
opt_klondike_options	cgminer.c	/^char *opt_klondike_options = NULL;$/;"	v
opt_log_interval	cgminer.c	/^int opt_log_interval = 5;$/;"	v
opt_log_level	logging.c	/^int opt_log_level = LOG_NOTICE;$/;"	v
opt_log_output	logging.c	/^bool opt_log_output = false;$/;"	v
opt_loginput	cgminer.c	/^bool opt_loginput;$/;"	v
opt_lowmem	cgminer.c	/^bool opt_lowmem;$/;"	v
opt_noadl	cgminer.c	/^bool opt_noadl;$/;"	v
opt_nogpu	cgminer.c	/^bool opt_nogpu;$/;"	v
opt_protocol	cgminer.c	/^bool opt_protocol;$/;"	v
opt_queue	cgminer.c	/^int opt_queue = 1;$/;"	v
opt_quiet	cgminer.c	/^bool opt_quiet;$/;"	v
opt_realquiet	cgminer.c	/^bool opt_realquiet;$/;"	v
opt_removedisabled	cgminer.c	/^static bool opt_removedisabled;$/;"	v	file:
opt_restart	cgminer.c	/^bool opt_restart = true;$/;"	v
opt_rotate_period	cgminer.c	/^int opt_rotate_period;$/;"	v
opt_scantime	cgminer.c	/^int opt_scantime = -1;$/;"	v
opt_shares	cgminer.c	/^static int opt_shares;$/;"	v	file:
opt_socks_proxy	cgminer.c	/^char *opt_socks_proxy = NULL;$/;"	v
opt_stderr_cmd	cgminer.c	/^	static char *opt_stderr_cmd = NULL;$/;"	v	file:
opt_submit_stale	cgminer.c	/^static bool opt_submit_stale = true;$/;"	v	file:
opt_time	cgminer.c	/^static const bool opt_time = true;$/;"	v	file:
opt_usb_list_all	cgminer.c	/^bool opt_usb_list_all;$/;"	v
opt_usb_select	cgminer.c	/^char *opt_usb_select = NULL;$/;"	v
opt_usbdump	cgminer.c	/^int opt_usbdump = -1;$/;"	v
opt_verusage_and_exit	cgminer.c	/^static char *opt_verusage_and_exit(const char *extra)$/;"	f	file:
opt_work_update	cgminer.c	/^bool opt_work_update;$/;"	v
opt_worktime	cgminer.c	/^bool opt_worktime;$/;"	v
optimal	driver-avalon.h	/^	bool optimal;$/;"	m	struct:avalon_info
option	hf_protocol.h	/^	uint8_t  option;$/;"	m	struct:hf_hash_serial
option	hf_protocol_be.h	/^	uint8_t  option;$/;"	m	struct:hf_hash_serial
option_offset	driver-avalon.c	/^static int option_offset = -1;$/;"	v	file:
option_offset	driver-icarus.c	/^static int option_offset = -1;$/;"	v	file:
osc	driver-bab.c	/^	uint8_t osc[BAB_OSC];$/;"	m	struct:bab_info	file:
overheat	driver-avalon.h	/^	bool overheat;$/;"	m	struct:avalon_info
overheat	driver-bflsc.h	/^	bool overheat;$/;"	m	struct:bflsc_dev
overheat	driver-klondike.c	/^	bool overheat;$/;"	m	struct:jobque	file:
overheated	miner.h	/^	bool overheated;$/;"	m	struct:modminer_fpga_state
overheattime	driver-modminer.c	/^static const double overheattime = 26.9;$/;"	v	file:
p_count	driver-bflsc.c	147;"	d	file:
p_fields	driver-bflsc.c	149;"	d	file:
p_firstname	driver-bflsc.c	148;"	d	file:
p_items	driver-bflsc.c	90;"	d	file:
p_lf	driver-bflsc.c	150;"	d	file:
p_lines	driver-bflsc.c	89;"	d	file:
packagename	cgminer.c	/^static char packagename[256];$/;"	v	file:
pad2	driver-klondike.c	/^	uint8_t pad2;$/;"	m	struct:klondike_cfg	file:
params	api.c	/^	const enum code_parameters params;$/;"	m	struct:CODES	typeref:enum:CODES::code_parameters	file:
parse_bxf_needwork	driver-bitfury.c	/^static void parse_bxf_needwork(struct cgpu_info *bitfury, struct bitfury_info *info,$/;"	f	file:
parse_bxf_submit	driver-bitfury.c	/^static void parse_bxf_submit(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)$/;"	f	file:
parse_bxf_temp	driver-bitfury.c	/^static void parse_bxf_temp(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)$/;"	f	file:
parse_config	cgminer.c	/^static char *parse_config(json_t *config, bool fileconf)$/;"	f	file:
parse_diff	util.c	/^static bool parse_diff(struct pool *pool, json_t *val)$/;"	f	file:
parse_method	util.c	/^bool parse_method(struct pool *pool, char *s)$/;"	f
parse_notify	util.c	/^static bool parse_notify(struct pool *pool, json_t *val)$/;"	f	file:
parse_reconnect	util.c	/^static bool parse_reconnect(struct pool *pool, json_t *val)$/;"	f	file:
parse_stratum_response	cgminer.c	/^static bool parse_stratum_response(struct pool *pool, char *s)$/;"	f	file:
pause	miner.h	/^	bool	pause;$/;"	m	struct:thr_info
payloadData	driver-bflsc.h	/^	uint8_t payloadData[BFLSC_MAXPAYLOAD];$/;"	m	struct:DataForwardToChain
payloadData	driver-bflsc.h	/^	uint8_t payloadData[BFLSC_MAXPAYLOAD];$/;"	m	struct:SaveString
payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:DataForwardToChain
payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:QueueJobPackStructure
payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:QueueJobStructure
payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:SaveString
pgacount	api.c	/^static void pgacount(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
pgadev	api.c	/^static void pgadev(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
pgadevice	api.c	/^static int pgadevice(int pgaid)$/;"	f	file:
pgadisable	api.c	/^static void pgadisable(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
pgaenable	api.c	/^static void pgaenable(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
pgaidentify	api.c	/^static void pgaidentify(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
pgaset	api.c	/^static void pgaset(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
pgastatus	api.c	/^static void pgastatus(struct io_data *io_data, int pga, bool isjson, bool precom)$/;"	f	file:
phase_currents	hf_protocol.h	/^	uint16_t phase_currents[4];                 \/\/ Phase currents (0 if unavailable)$/;"	m	struct:hf_g1_die_data
phase_currents	hf_protocol_be.h	/^	uint16_t phase_currents[4];                 \/\/ Phase currents (0 if unavailable)$/;"	m	struct:hf_g1_die_data
pipe_count	usbutils.h	/^	uint64_t pipe_count;$/;"	m	struct:cg_usb_info
pipefd	util.h	/^	int pipefd[2];$/;"	m	struct:cgsem
pll_bypass	hf_protocol.h	/^	uint8_t  pll_bypass:1;                  \/\/ Force PLL bypass, hash clock = ref clock$/;"	m	struct:hf_usb_init_header
pll_bypass	hf_protocol.h	/^	uint8_t  pll_bypass:1;$/;"	m	struct:hf_pll_config
pll_bypass	hf_protocol_be.h	/^	uint8_t  pll_bypass:1;                  \/\/ Force PLL bypass, hash clock = ref clock$/;"	m	struct:hf_usb_init_header
pll_bypass	hf_protocol_be.h	/^	uint8_t  pll_bypass:1;$/;"	m	struct:hf_pll_config
pll_divf	hf_protocol.h	/^	uint8_t  pll_divf;$/;"	m	struct:hf_pll_config
pll_divf	hf_protocol_be.h	/^	uint8_t  pll_divf;$/;"	m	struct:hf_pll_config
pll_divq	hf_protocol.h	/^	uint8_t  pll_divq:3;$/;"	m	struct:hf_pll_config
pll_divq	hf_protocol_be.h	/^	uint8_t  pll_divq:3;$/;"	m	struct:hf_pll_config
pll_divr	hf_protocol.h	/^	uint8_t  pll_divr:6;$/;"	m	struct:hf_pll_config
pll_divr	hf_protocol_be.h	/^	uint8_t  pll_divr:6;$/;"	m	struct:hf_pll_config
pll_fse	hf_protocol.h	/^	uint8_t  pll_fse:1;                     \/\/ Must always be 1$/;"	m	struct:hf_pll_config
pll_fse	hf_protocol_be.h	/^	uint8_t  pll_fse:1;                     \/\/ Must always be 1$/;"	m	struct:hf_pll_config
pll_range	hf_protocol.h	/^	uint8_t  pll_range:3;$/;"	m	struct:hf_pll_config
pll_range	hf_protocol_be.h	/^	uint8_t  pll_range:3;$/;"	m	struct:hf_pll_config
pll_reset	hf_protocol.h	/^	uint8_t  pll_reset:1;$/;"	m	struct:hf_pll_config
pll_reset	hf_protocol_be.h	/^	uint8_t  pll_reset:1;$/;"	m	struct:hf_pll_config
polling	miner.h	/^	bool polling;$/;"	m	struct:cgpu_info
pool	miner.h	/^	struct pool	*pool;$/;"	m	struct:work	typeref:struct:work::pool
pool	miner.h	/^struct pool {$/;"	s
pool_active	cgminer.c	/^static bool pool_active(struct pool *pool, bool pinging)$/;"	f	file:
pool_died	cgminer.c	/^static void pool_died(struct pool *pool)$/;"	f	file:
pool_enable	miner.h	/^enum pool_enable {$/;"	g
pool_localgen	cgminer.c	/^static bool pool_localgen(struct pool *pool)$/;"	f	file:
pool_localgen	cgminer.c	1972;"	d	file:
pool_lock	miner.h	/^	pthread_mutex_t pool_lock;$/;"	m	struct:pool
pool_no	miner.h	/^	int pool_no;$/;"	m	struct:pool
pool_resus	cgminer.c	/^static void pool_resus(struct pool *pool)$/;"	f	file:
pool_strategy	cgminer.c	/^enum pool_strategy pool_strategy = POOL_FAILOVER;$/;"	v	typeref:enum:pool_strategy
pool_strategy	miner.h	/^enum pool_strategy {$/;"	g
pool_tclear	cgminer.c	/^bool pool_tclear(struct pool *pool, bool *var)$/;"	f
pool_tset	cgminer.c	/^static bool pool_tset(struct pool *pool, bool *var)$/;"	f	file:
pool_unusable	cgminer.c	/^static bool pool_unusable(struct pool *pool)$/;"	f	file:
pool_unworkable	cgminer.c	/^static bool pool_unworkable(struct pool *pool)$/;"	f	file:
pooldetails	api.c	/^static bool pooldetails(char *param, char **url, char **user, char **pass)$/;"	f	file:
poolpriority	api.c	/^static void poolpriority(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
poolquota	api.c	/^static void poolquota(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
pools	cgminer.c	/^struct pool **pools;$/;"	v	typeref:struct:pool
pools_active	cgminer.c	/^static bool pools_active = false;$/;"	v	file:
poolstatus	api.c	/^static void poolstatus(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
pop_curl_entry	cgminer.c	/^static struct curl_ent *pop_curl_entry(struct pool *pool)$/;"	f	file:
preamble	hf_protocol.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_header
preamble	hf_protocol.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_usb_init_header
preamble	hf_protocol.h	/^	uint8_t  preamble;$/;"	m	struct:hf_pll_config
preamble	hf_protocol_be.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_header
preamble	hf_protocol_be.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_usb_init_header
preamble	hf_protocol_be.h	/^	uint8_t  preamble;$/;"	m	struct:hf_pll_config
prefix	driver-icarus.c	/^	uint8_t prefix;$/;"	m	struct:ICARUS_WORK	file:
prepare_work	miner.h	/^	bool (*prepare_work)(struct thr_info *, struct work *);$/;"	m	struct:device_drv
prev	api.c	/^	struct io_list *prev;$/;"	m	struct:io_list	typeref:struct:io_list::io_list	file:
prev	api.c	/^	struct lockline *prev;$/;"	m	struct:lockline	typeref:struct:lockline::lockline	file:
prev	driver-bab.c	/^	struct blist *prev;$/;"	m	struct:blist	typeref:struct:blist::blist	file:
prev	driver-bab.c	/^	struct rlist *prev;$/;"	m	struct:rlist	typeref:struct:rlist::rlist	file:
prev	driver-klondike.c	/^	struct klist *prev;$/;"	m	struct:klist	typeref:struct:klist::klist	file:
prev	elist.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prev	miner.h	/^	struct api_data *prev;$/;"	m	struct:api_data	typeref:struct:api_data::api_data
prev	usbutils.c	/^	struct usb_in_use_list *prev;$/;"	m	struct:usb_in_use_list	typeref:struct:usb_in_use_list::usb_in_use_list	file:
prev	uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle
prev_block	cgminer.c	/^static char prev_block[12];$/;"	v	file:
prev_block	miner.h	/^	char prev_block[32];$/;"	m	struct:pool
prev_hash	miner.h	/^	char *prev_hash;$/;"	m	struct:stratum_work
previousblockhash	miner.h	/^	unsigned char previousblockhash[32];$/;"	m	struct:pool
primary_thread	miner.h	/^	bool		primary_thread;$/;"	m	struct:thr_info
print_data	api.c	/^static struct api_data *print_data(struct api_data *root, char *buf, bool isjson, bool precom)$/;"	f	file:
print_status	cgminer.c	/^static void print_status(int thr_id)$/;"	f	file:
print_summary	cgminer.c	/^void print_summary(void)$/;"	f
prio	miner.h	/^	int prio;$/;"	m	struct:pool
priority_pool	cgminer.c	/^static struct pool *priority_pool(int choice)$/;"	f	file:
privileged	api.c	/^void privileged(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f
probe_pools	cgminer.c	/^static void probe_pools(void)$/;"	f	file:
probed	miner.h	/^	bool probed;$/;"	m	struct:pool
process_nonces	driver-bflsc.c	/^static void process_nonces(struct cgpu_info *bflsc, int dev, char *xlink, char *data, int count, char **fields, int *nonces)$/;"	f	file:
process_results	driver-bflsc.c	/^static int process_results(struct cgpu_info *bflsc, int dev, char *pbuf, int *nonces)$/;"	f	file:
processtime	driver-modminer.c	/^static const double processtime = 17.0;$/;"	v	file:
prod_string	usbutils.h	/^	char *prod_string;$/;"	m	struct:cg_usb_device
product	driver-bitfury.h	/^	char product[8];$/;"	m	struct:bitfury_info
product	driver-klondike.c	/^	uint8_t product[7];$/;"	m	struct:klondike_id	file:
protocol	hf_protocol.h	/^	uint8_t  protocol:3;                    \/\/ Which protocol to use$/;"	m	struct:hf_usb_init_header
protocol	hf_protocol_be.h	/^	uint8_t  protocol:3;                    \/\/ Which protocol to use$/;"	m	struct:hf_usb_init_header
proxynames	util.c	/^} proxynames[] = {$/;"	v	typeref:struct:__anon4	file:
proxytype	util.c	/^	proxytypes_t proxytype;$/;"	m	struct:__anon4	file:
proxytype	util.c	/^const char *proxytype(proxytypes_t proxytype)$/;"	f
proxytypes_t	util.h	/^typedef curl_proxytype proxytypes_t;$/;"	t
proxytypes_t	util.h	/^typedef int proxytypes_t;$/;"	t
pth	miner.h	/^	pthread_t	pth;$/;"	m	struct:thr_info
ptr	api.c	/^	char *ptr;$/;"	m	struct:io_data	file:
push_curl_entry	cgminer.c	/^static void push_curl_entry(struct curl_ent *ce, struct pool *pool)$/;"	f	file:
pwm_active_level	hf_protocol.h	/^	uint16_t pwm_active_level:1;                \/\/ Active level of PWM outputs, if used$/;"	m	struct:hf_config_data
pwm_active_level	hf_protocol_be.h	/^	uint16_t pwm_active_level:1;                \/\/ Active level of PWM outputs, if used$/;"	m	struct:hf_config_data
pwm_data	driver-avalon.h	/^	uint8_t pwm_data;$/;"	m	struct:avalon_result
pwm_period	hf_protocol.h	/^	uint16_t pwm_period;                        \/\/ Period of PWM outputs, in reference clock cycles$/;"	m	struct:hf_config_data
pwm_period	hf_protocol_be.h	/^	uint16_t pwm_period;                        \/\/ Period of PWM outputs, in reference clock cycles$/;"	m	struct:hf_config_data
pwm_phases	hf_protocol.h	/^	uint32_t pwm_phases:2;                      \/\/ phases - 1$/;"	m	struct:hf_config_data
pwm_phases	hf_protocol_be.h	/^	uint32_t pwm_phases:2;                      \/\/ phases - 1$/;"	m	struct:hf_config_data
pwm_pulse_period	hf_protocol.h	/^	uint16_t pwm_pulse_period;                  \/\/ Initial count, phase 0$/;"	m	struct:hf_config_data
pwm_pulse_period	hf_protocol_be.h	/^	uint16_t pwm_pulse_period;                  \/\/ Initial count, phase 0$/;"	m	struct:hf_config_data
q	miner.h	/^	struct list_head	q;$/;"	m	struct:thread_q	typeref:struct:thread_q::list_head
q	miner.h	/^	struct thread_q	*q;$/;"	m	struct:thr_info	typeref:struct:thr_info::thread_q
q_node	util.c	/^	struct list_head	q_node;$/;"	m	struct:tq_ent	typeref:struct:tq_ent::list_head	file:
qlock	driver-avalon.h	/^	pthread_mutex_t qlock;$/;"	m	struct:avalon_info
qlock	driver-gridseed.c	/^	pthread_mutex_t	qlock;$/;"	m	struct:s_gridseed_info	file:
qlock	miner.h	/^	pthread_rwlock_t qlock;$/;"	m	struct:cgpu_info
qsem	driver-avalon.h	/^	cgsem_t qsem;$/;"	m	struct:avalon_info
que_fld_max	driver-bflsc.h	/^	int que_fld_max;$/;"	m	struct:bflsc_info
que_fld_min	driver-bflsc.h	/^	int que_fld_min;$/;"	m	struct:bflsc_info
que_full_enough	driver-bflsc.h	/^	int que_full_enough;$/;"	m	struct:bflsc_info
que_low	driver-bflsc.h	/^	int que_low;$/;"	m	struct:bflsc_info
que_noncecount	driver-bflsc.h	/^	int que_noncecount;$/;"	m	struct:bflsc_info
que_size	driver-bflsc.h	/^	int que_size;$/;"	m	struct:bflsc_info
que_watermark	driver-bflsc.h	/^	int que_watermark;$/;"	m	struct:bflsc_info
query_qlen	driver-gridseed.c	/^	bool			query_qlen; \/* true when query device queue length and waiting response *\/$/;"	m	struct:s_gridseed_info	file:
query_ts	driver-gridseed.c	/^	cgtimer_t		query_ts;$/;"	m	struct:s_gridseed_info	file:
queue_full	miner.h	/^	bool (*queue_full)(struct cgpu_info *);$/;"	m	struct:device_drv
queue_id	driver-knc-spi-fpga.c	/^	uint32_t queue_id	:12;$/;"	m	struct:spi_request	file:
queue_id	driver-knc-spi-fpga.c	/^	uint32_t queue_id	:12;$/;"	m	struct:spi_response	file:
queued	driver-gridseed.c	/^	int				queued;$/;"	m	struct:s_gridseed_info	file:
queued	miner.h	/^	int queued;$/;"	m	struct:cgpu_info
queued_count	miner.h	/^	unsigned int queued_count;$/;"	m	struct:cgpu_info
queued_fifo	driver-knc-spi-fpga.c	/^	struct active_work queued_fifo[KNC_QUEUED_BUFFER_SIZE];$/;"	m	struct:knc_state	typeref:struct:knc_state::active_work	file:
queued_work	miner.h	/^	struct work *queued_work;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::work
quit	logging.h	65;"	d
quit_restart_lock	api.c	/^static pthread_mutex_t quit_restart_lock;$/;"	v	file:
quit_thread	api.c	/^static void *quit_thread(__maybe_unused void *userdata)$/;"	f	file:
quitfrom	logging.h	84;"	d
quithere	logging.h	74;"	d
quota	miner.h	/^	int quota;$/;"	m	struct:pool
quota_gcd	miner.h	/^	int quota_gcd;$/;"	m	struct:pool
quota_used	miner.h	/^	int quota_used;$/;"	m	struct:pool
r_port	driver-gridseed.c	/^	short			r_port; \/* local port to recv request *\/$/;"	m	struct:s_gridseed_info	file:
rangesize	driver-klondike.c	/^	uint32_t rangesize;$/;"	m	struct:device_info	file:
rd_lock	miner.h	717;"	d
rd_unlock	miner.h	721;"	d
rd_unlock_noyield	miner.h	719;"	d
read_a	driver-knc-spi-fpga.c	/^	int read_a, write_a;$/;"	m	struct:knc_state	file:
read_d	driver-knc-spi-fpga.c	/^	int read_d, write_d;$/;"	m	struct:knc_state	file:
read_delay_count	usbutils.h	/^	uint64_t read_delay_count;$/;"	m	struct:cg_usb_info
read_q	driver-knc-spi-fpga.c	/^	int read_q, write_q;$/;"	m	struct:knc_state	file:
read_thr	driver-avalon.h	/^	pthread_t read_thr;$/;"	m	struct:avalon_info
read_thr	driver-bitfury.h	/^	pthread_t read_thr;$/;"	m	struct:bitfury_info
read_thr	driver-hashfast.h	/^	pthread_t read_thr;$/;"	m	struct:hashfast_info
read_time	driver-icarus.c	/^	int read_time;$/;"	m	struct:ICARUS_INFO	file:
read_time_limit	driver-icarus.c	/^	int read_time_limit;$/;"	m	struct:ICARUS_INFO	file:
ready	driver-klondike.c	/^	bool ready;$/;"	m	struct:klist	file:
realloc_strcat	util.c	/^void *realloc_strcat(char *ptr, char *s)$/;"	f
reap_curl	cgminer.c	/^static void reap_curl(struct pool *pool)$/;"	f	file:
reason	util.c	/^	char		*reason;$/;"	m	struct:header_info	file:
rebuild_nonce	cgminer.c	/^static void rebuild_nonce(struct work *work, uint32_t nonce)$/;"	f	file:
recalloc_sock	util.c	/^static void recalloc_sock(struct pool *pool, size_t len)$/;"	f	file:
record_temp_fan	driver-avalon.c	/^static inline void record_temp_fan(struct avalon_info *info, struct avalon_result *ar, float *temp_avg)$/;"	f	file:
recruit_curl	cgminer.c	/^static void recruit_curl(struct pool *pool)$/;"	f	file:
recv_byte	util.c	/^static int recv_byte(int sockd)$/;"	f	file:
recv_line	util.c	/^char *recv_line(struct pool *pool)$/;"	f
ref_frequency	driver-hashfast.h	/^	int ref_frequency;                          \/\/ Reference clock rate$/;"	m	struct:hashfast_info
regen_hash	cgminer.c	/^static void regen_hash(struct work *work)$/;"	f	file:
reinit_device	cgminer.c	/^void reinit_device(struct cgpu_info *cgpu)$/;"	f
reinit_device	miner.h	/^	void (*reinit_device)(struct cgpu_info *);$/;"	m	struct:device_drv
reject_pool	cgminer.c	/^static void reject_pool(struct pool *pool)$/;"	f	file:
rejected	miner.h	/^	int accepted, rejected;$/;"	m	struct:pool
rejected	miner.h	/^	int rejected;$/;"	m	struct:cgpu_info
rejected_inc	usbutils.c	/^static void rejected_inc(struct cgpu_info *cgpu, uint32_t mode)$/;"	f	file:
release_cgpu	usbutils.c	/^static void release_cgpu(struct cgpu_info *cgpu)$/;"	f	file:
release_kitem	driver-klondike.c	/^static KLIST *release_kitem(struct cgpu_info *klncgpu, KLIST *kitem)$/;"	f	file:
remotefail_occasions	miner.h	/^	unsigned int remotefail_occasions;$/;"	m	struct:pool
remove_in_use	usbutils.c	/^static void remove_in_use(uint8_t bus_number, uint8_t device_address)$/;"	f	file:
remove_pool	cgminer.c	/^void remove_pool(struct pool *pool)$/;"	f
removed	miner.h	/^	bool removed;$/;"	m	struct:pool
removepool	api.c	/^static void removepool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
replies_thr	driver-klondike.c	/^	struct thr_info replies_thr;$/;"	m	struct:klondike_info	typeref:struct:klondike_info::thr_info	file:
request	driver-bab.c	/^	int request;$/;"	m	struct:__anon2	file:
res_count	driver-bab.c	/^	int res_count;$/;"	m	struct:bab_info	file:
res_list_head	driver-bab.c	/^	RLIST *res_list_head;$/;"	m	struct:bab_info	file:
res_list_tail	driver-bab.c	/^	RLIST *res_list_tail;$/;"	m	struct:bab_info	file:
res_lock	driver-bab.c	/^	pthread_mutex_t res_lock;$/;"	m	struct:bab_info	file:
res_reply_head	usbutils.c	/^struct resource_reply *res_reply_head = NULL;$/;"	v	typeref:struct:resource_reply
res_thr	driver-bab.c	/^	struct thr_info res_thr;$/;"	m	struct:bab_info	typeref:struct:bab_info::thr_info	file:
res_work_head	usbutils.c	/^struct resource_work *res_work_head = NULL;$/;"	v	typeref:struct:resource_work
reset	driver-avalon.h	/^	bool reset;$/;"	m	struct:avalon_info
reset	driver-avalon.h	/^	uint8_t reset		:1;$/;"	m	struct:avalon_task
resource1	usbutils.c	/^	void *resource1;$/;"	m	struct:usb_busdev	file:
resource2	usbutils.c	/^	void *resource2;$/;"	m	struct:usb_busdev	file:
resource_lock	usbutils.c	/^static bool resource_lock(const char *dname, uint8_t bus_number, uint8_t device_address)$/;"	f	file:
resource_process	usbutils.c	/^static void resource_process()$/;"	f	file:
resource_reply	usbutils.c	/^struct resource_reply {$/;"	s	file:
resource_unlock	usbutils.c	/^static void resource_unlock(const char *dname, uint8_t bus_number, uint8_t device_address)$/;"	f	file:
resource_work	usbutils.c	/^struct resource_work {$/;"	s	file:
resp_hdr_cb	util.c	/^static size_t resp_hdr_cb(void *ptr, size_t size, size_t nmemb, void *user_data)$/;"	f	file:
response_queue_full	driver-knc-spi-fpga.c	/^	uint32_t response_queue_full	:1;$/;"	m	struct:spi_rx_t	file:
responses	driver-knc-spi-fpga.c	/^	struct spi_response responses[MAX_RESPONSES_IN_BATCH];$/;"	m	struct:spi_rx_t	typeref:struct:spi_rx_t::spi_response	file:
restart_cond	cgminer.c	/^pthread_cond_t restart_cond;$/;"	v
restart_lock	cgminer.c	/^pthread_mutex_t restart_lock;$/;"	v
restart_stratum	util.c	/^bool restart_stratum(struct pool *pool)$/;"	f
restart_thread	api.c	/^static void *restart_thread(__maybe_unused void *userdata)$/;"	f	file:
restart_thread	cgminer.c	/^static void *restart_thread(void __maybe_unused *arg)$/;"	f	file:
restart_threads	cgminer.c	/^static void restart_threads(void)$/;"	f	file:
restart_wait	cgminer.c	/^int restart_wait(struct thr_info *thr, unsigned int mstime)$/;"	f
restrict	config.h	443;"	d
result_id	driver-bflsc.h	/^	uint64_t result_id; \/\/ counter when results were last checked$/;"	m	struct:bflsc_dev
result_size	driver-bflsc.h	/^	uint64_t result_size[QUE_MAX_RESULTS+2];$/;"	m	struct:bflsc_info
results	miner.h	/^	int results;$/;"	m	struct:cgpu_info
results_sleep_time	driver-bflsc.h	/^	unsigned int results_sleep_time;$/;"	m	struct:bflsc_info
results_thr	driver-bflsc.h	/^	struct thr_info results_thr;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::thr_info
retry_err_count	usbutils.h	/^	uint64_t retry_err_count;$/;"	m	struct:cg_usb_info
rev	driver-icarus.c	/^static void rev(unsigned char *s, size_t l)$/;"	f	file:
rfree_count	driver-bab.c	/^	int rfree_count;$/;"	m	struct:bab_info	file:
rfree_list	driver-bab.c	/^	RLIST *rfree_list;$/;"	m	struct:bab_info	file:
rlist	driver-bab.c	/^typedef struct rlist {$/;"	s	file:
rlist_count	driver-bab.c	/^	int rlist_count;$/;"	m	struct:bab_info	file:
roll_work	cgminer.c	/^static void roll_work(struct work *work)$/;"	f	file:
rolling	miner.h	/^	double	rolling;$/;"	m	struct:thr_info
rolling	miner.h	/^	double rolling;$/;"	m	struct:cgpu_info
rolls	miner.h	/^	int		rolls;$/;"	m	struct:work
rolltime	miner.h	/^	int		rolltime;$/;"	m	struct:work
rolltime	miner.h	/^	uint32_t rolltime;$/;"	m	struct:cgminer_pool_stats
rolltime	util.c	/^	int		rolltime;$/;"	m	struct:header_info	file:
rotate_tv	cgminer.c	/^static struct timeval rotate_tv;$/;"	v	typeref:struct:timeval	file:
roundl	miner.h	209;"	d
rpc_pass	miner.h	/^	char *rpc_user, *rpc_pass;$/;"	m	struct:pool
rpc_proxy	miner.h	/^	char *rpc_proxy;$/;"	m	struct:pool
rpc_proxytype	miner.h	/^	proxytypes_t rpc_proxytype;$/;"	m	struct:pool
rpc_req	miner.h	/^	char *rpc_req;$/;"	m	struct:pool
rpc_url	miner.h	/^	char *rpc_url;$/;"	m	struct:pool
rpc_user	miner.h	/^	char *rpc_user, *rpc_pass;$/;"	m	struct:pool
rpc_userpass	miner.h	/^	char *rpc_userpass;$/;"	m	struct:pool
rsvd	driver-knc-spi-fpga.c	/^	uint32_t rsvd		:1; \/* set to zero *\/$/;"	m	struct:spi_request	file:
rsvd_1	driver-knc-spi-fpga.c	/^	uint32_t rsvd_1			:31;$/;"	m	struct:spi_rx_t	file:
rsvd_2	driver-knc-spi-fpga.c	/^	uint32_t rsvd_2			:16;$/;"	m	struct:spi_rx_t	file:
rsvd_3	driver-knc-spi-fpga.c	/^	uint32_t rsvd_3;$/;"	m	struct:spi_rx_t	file:
running_work	miner.h	/^	struct work running_work;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::work
rw_unlock	miner.h	718;"	d
rwlock	util.h	/^	pthread_rwlock_t rwlock;$/;"	m	struct:cglock
rwlock_destroy	miner.h	/^static inline void rwlock_destroy(pthread_rwlock_t *lock)$/;"	f
rwlock_init	miner.h	724;"	d
rx_body_crc	driver-hashfast.h	/^	uint64_t rx_body_crc;                       \/\/ Data CRCs$/;"	m	struct:hf_long_statistics
rx_body_crc	hf_protocol.h	/^	uint8_t rx_body_crc;                        \/\/ Data CRC error's$/;"	m	struct:hf_statistics
rx_body_crc	hf_protocol_be.h	/^	uint8_t rx_body_crc;                        \/\/ Data CRC error's$/;"	m	struct:hf_statistics
rx_body_timeouts	driver-hashfast.h	/^	uint64_t rx_body_timeouts;                  \/\/ Data timeouts$/;"	m	struct:hf_long_statistics
rx_body_timeouts	hf_protocol.h	/^	uint8_t rx_body_timeouts;                   \/\/ Data timeouts$/;"	m	struct:hf_statistics
rx_body_timeouts	hf_protocol_be.h	/^	uint8_t rx_body_timeouts;                   \/\/ Data timeouts$/;"	m	struct:hf_statistics
rx_data_timeout	hf_protocol.h	/^	uint8_t  rx_data_timeout:7;                 \/\/ Data timeout in char times \/ 16$/;"	m	struct:hf_config_data
rx_data_timeout	hf_protocol_be.h	/^	uint8_t  rx_data_timeout:7;                 \/\/ Data timeout in char times \/ 16$/;"	m	struct:hf_config_data
rx_header_crc	driver-hashfast.h	/^	uint64_t rx_header_crc;                     \/\/ Header CRCs$/;"	m	struct:hf_long_statistics
rx_header_crc	hf_protocol.h	/^	uint8_t rx_header_crc;                      \/\/ Header CRC error's$/;"	m	struct:hf_statistics
rx_header_crc	hf_protocol_be.h	/^	uint8_t rx_header_crc;                      \/\/ Header CRC error's$/;"	m	struct:hf_statistics
rx_header_timeout	hf_protocol.h	/^	uint8_t  rx_header_timeout:7;               \/\/ Header timeout in char times$/;"	m	struct:hf_config_data
rx_header_timeout	hf_protocol_be.h	/^	uint8_t  rx_header_timeout:7;               \/\/ Header timeout in char times$/;"	m	struct:hf_config_data
rx_header_timeouts	driver-hashfast.h	/^	uint64_t rx_header_timeouts;                \/\/ Header timeouts$/;"	m	struct:hf_long_statistics
rx_header_timeouts	hf_protocol.h	/^	uint8_t rx_header_timeouts;                 \/\/ Header timeouts$/;"	m	struct:hf_statistics
rx_header_timeouts	hf_protocol_be.h	/^	uint8_t rx_header_timeouts;                 \/\/ Header timeouts$/;"	m	struct:hf_statistics
rx_ignore_data_crc	hf_protocol.h	/^	uint8_t  rx_ignore_data_crc:1;              \/\/ Ignore rx data crc's (diagnostic)$/;"	m	struct:hf_config_data
rx_ignore_data_crc	hf_protocol_be.h	/^	uint8_t  rx_ignore_data_crc:1;              \/\/ Ignore rx data crc's (diagnostic)$/;"	m	struct:hf_config_data
rx_ignore_header_crc	hf_protocol.h	/^	uint8_t  rx_ignore_header_crc:1;            \/\/ Ignore rx header crc's (diagnostic)$/;"	m	struct:hf_config_data
rx_ignore_header_crc	hf_protocol_be.h	/^	uint8_t  rx_ignore_header_crc:1;            \/\/ Ignore rx header crc's (diagnostic)$/;"	m	struct:hf_config_data
s	miner.h	/^	const char *s;$/;"	m	struct:strategies
s_gridseed_info	driver-gridseed.c	/^typedef struct s_gridseed_info {$/;"	s	file:
s_port	driver-gridseed.c	/^	short			s_port; \/* remote port to send response *\/$/;"	m	struct:s_gridseed_info	file:
salt	driver-knc-spi-fpga.c	/^	uint32_t salt;$/;"	m	struct:knc_state	file:
saved_nonces	driver-bitfury.h	/^	double saved_nonces;$/;"	m	struct:bitfury_info
sc_count	driver-bflsc.h	/^	int sc_count;$/;"	m	struct:bflsc_info
sc_devs	driver-bflsc.h	/^	struct bflsc_dev *sc_devs;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::bflsc_dev
scan_devices	cgminer.c	/^struct list_head scan_devices;$/;"	v	typeref:struct:list_head
scan_sleep_time	driver-bflsc.h	/^	unsigned int scan_sleep_time;$/;"	m	struct:bflsc_info
scanhash	miner.h	/^	int64_t (*scanhash)(struct thr_info *, struct work *, int64_t);$/;"	m	struct:device_drv
scanwork	miner.h	/^	int64_t (*scanwork)(struct thr_info *);$/;"	m	struct:device_drv
sched_paused	cgminer.c	/^bool sched_paused;$/;"	v
schedstart	cgminer.c	/^struct schedtime schedstart;$/;"	v	typeref:struct:schedtime
schedstop	cgminer.c	/^struct schedtime schedstop;$/;"	v	typeref:struct:schedtime
schedtime	cgminer.c	/^struct schedtime {$/;"	s	file:
sdiff	miner.h	/^	double		sdiff;$/;"	m	struct:work
search_difficulty	hf_protocol.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_serial
search_difficulty	hf_protocol.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_usb
search_difficulty	hf_protocol_be.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_serial
search_difficulty	hf_protocol_be.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_usb
search_for_extra_nonce	driver-hashfast.c	/^static void search_for_extra_nonce(struct thr_info *thr, struct work *work,$/;"	f	file:
select_balanced	cgminer.c	/^static struct pool *select_balanced(struct pool *cp)$/;"	f	file:
select_close	fpgautils.h	80;"	d
select_longpoll_pool	cgminer.c	/^static struct pool *select_longpoll_pool(struct pool *cp)$/;"	f	file:
select_open	fpgautils.h	48;"	d
select_open_purge	fpgautils.h	51;"	d
select_pool	cgminer.c	/^static inline struct pool *select_pool(bool lagging)$/;"	f	file:
select_read	fpgautils.h	59;"	d
select_read_full	fpgautils.h	78;"	d
select_read_til	fpgautils.h	63;"	d
select_read_wait	fpgautils.h	67;"	d
select_read_wait_both	fpgautils.h	75;"	d
select_read_wait_til	fpgautils.h	71;"	d
select_write	fpgautils.h	54;"	d
select_write_full	fpgautils.h	57;"	d
sem	miner.h	/^	cgsem_t		sem;$/;"	m	struct:thr_info
semtimedop	miner.h	215;"	d
semun	usbutils.c	/^union semun {$/;"	u	file:
send_recv_ds	driver-bflsc.c	/^static int send_recv_ds(struct cgpu_info *bflsc, int dev, int *stage, bool *sent, int *amount, char *send1, int send1_len, enum usb_cmds send1_cmd,  enum usb_cmds recv1_cmd, char *send2, int send2_len, enum usb_cmds send2_cmd, enum usb_cmds recv2_cmd, char *recv, int recv_siz)$/;"	f	file:
send_recv_ss	driver-bflsc.c	/^static int send_recv_ss(struct cgpu_info *bflsc, int dev, bool *sent, int *amount, char *send, int send_len, enum usb_cmds send_cmd, char *recv, int recv_siz, enum usb_cmds recv_cmd, bool read_ok)$/;"	f	file:
send_result	api.c	/^static void send_result(struct io_data *io_data, SOCKETTYPE c, bool isjson)$/;"	f	file:
send_ret	util.c	/^enum send_ret {$/;"	g	file:
send_status_on_core_idle	hf_protocol.h	/^	uint16_t send_status_on_core_idle:1;        \/\/ Schedule status whenever core goes idle$/;"	m	struct:hf_config_data
send_status_on_core_idle	hf_protocol_be.h	/^	uint16_t send_status_on_core_idle:1;        \/\/ Schedule status whenever core goes idle$/;"	m	struct:hf_config_data
send_status_on_pending_empty	hf_protocol.h	/^	uint16_t send_status_on_pending_empty:1;    \/\/ Schedule status whenever core pending goes idle$/;"	m	struct:hf_config_data
send_status_on_pending_empty	hf_protocol_be.h	/^	uint16_t send_status_on_pending_empty:1;    \/\/ Schedule status whenever core pending goes idle$/;"	m	struct:hf_config_data
send_version	util.c	/^static bool send_version(struct pool *pool, json_t *val)$/;"	f	file:
seq	usbutils.c	/^	int seq;$/;"	m	struct:cg_usb_stats_details	file:
seq_getfails	miner.h	/^	int seq_getfails;$/;"	m	struct:pool
seq_rejects	miner.h	/^	int seq_rejects;$/;"	m	struct:pool
sequence	hf_protocol.h	/^	uint16_t sequence;                      \/\/ Sequence number from corresponding OP_HASH$/;"	m	struct:hf_candidate_nonce
sequence	hf_protocol_be.h	/^	uint16_t sequence;                      \/\/ Sequence number from corresponding OP_HASH$/;"	m	struct:hf_candidate_nonce
sequence_head	hf_protocol.h	/^	uint16_t sequence_head;                     \/\/ The latest, internal, active sequence #$/;"	m	struct:hf_gwq_data
sequence_head	hf_protocol_be.h	/^	uint16_t sequence_head;                     \/\/ The latest, internal, active sequence #$/;"	m	struct:hf_gwq_data
sequence_modulus	hf_protocol.h	/^	uint16_t sequence_modulus;                  \/\/ Sequence numbers are to be modulo this$/;"	m	struct:hf_usb_init_base
sequence_modulus	hf_protocol_be.h	/^	uint16_t sequence_modulus;                  \/\/ Sequence numbers are to be modulo this$/;"	m	struct:hf_usb_init_base
sequence_tail	hf_protocol.h	/^	uint16_t sequence_tail;                     \/\/ The latest, internal, inactive sequence #$/;"	m	struct:hf_gwq_data
sequence_tail	hf_protocol_be.h	/^	uint16_t sequence_tail;                     \/\/ The latest, internal, inactive sequence #$/;"	m	struct:hf_gwq_data
serial	driver-bitfury.h	/^	uint32_t serial;$/;"	m	struct:bitfury_info
serial	driver-klondike.c	/^	uint8_t serial[4];$/;"	m	struct:klondike_id	file:
serial_autodetect_devserial	fpgautils.c	/^int serial_autodetect_devserial(__maybe_unused detectone_func_t detectone, __maybe_unused const char*prodname)$/;"	f
serial_autodetect_udev	fpgautils.c	/^int serial_autodetect_udev(__maybe_unused detectone_func_t detectone, __maybe_unused const char*prodname)$/;"	f
serial_autodetect_udev	fpgautils.c	/^int serial_autodetect_udev(detectone_func_t detectone, const char*prodname)$/;"	f
serial_close	fpgautils.h	35;"	d
serial_detect	fpgautils.h	24;"	d
serial_detect_auto	fpgautils.h	22;"	d
serial_detect_fauto	fpgautils.h	20;"	d
serial_number	hf_protocol.h	/^	uint32_t serial_number;                     \/\/ Board serial number$/;"	m	struct:hf_usb_init_base
serial_number	hf_protocol_be.h	/^	uint32_t serial_number;                     \/\/ Board serial number$/;"	m	struct:hf_usb_init_base
serial_open	fpgautils.c	/^int serial_open(const char *devpath, unsigned long baud, signed short timeout, bool purge)$/;"	f
serial_read	fpgautils.h	31;"	d
serial_read_line	fpgautils.h	33;"	d
serial_string	usbutils.h	/^	char *serial_string;$/;"	m	struct:cg_usb_device
sessionid	miner.h	/^	char *sessionid;$/;"	m	struct:pool
set_api_allow	cgminer.c	/^static char *set_api_allow(const char *arg)$/;"	f	file:
set_api_description	cgminer.c	/^static char *set_api_description(const char *arg)$/;"	f	file:
set_api_groups	cgminer.c	/^static char *set_api_groups(const char *arg)$/;"	f	file:
set_api_mcast_addr	cgminer.c	/^static char *set_api_mcast_addr(const char *arg)$/;"	f	file:
set_api_mcast_code	cgminer.c	/^static char *set_api_mcast_code(const char *arg)$/;"	f	file:
set_api_mcast_des	cgminer.c	/^static char *set_api_mcast_des(const char *arg)$/;"	f	file:
set_avalon_fan	driver-avalon.c	/^char *set_avalon_fan(char *arg)$/;"	f
set_avalon_freq	driver-avalon.c	/^char *set_avalon_freq(char *arg)$/;"	f
set_avalon_options	cgminer.c	/^static char *set_avalon_options(const char *arg)$/;"	f	file:
set_balance	cgminer.c	/^static char *set_balance(enum pool_strategy *strategy)$/;"	f	file:
set_bitburner_fury_options	cgminer.c	/^static char *set_bitburner_fury_options(const char *arg)$/;"	f	file:
set_blockdiff	cgminer.c	/^static void set_blockdiff(const struct work *work)$/;"	f	file:
set_curblock	cgminer.c	/^static void set_curblock(char *hexstr, unsigned char *bedata)$/;"	f	file:
set_default_config	cgminer.c	/^static char *set_default_config(const char *arg)$/;"	f	file:
set_device	miner.h	/^	char *(*set_device)(struct cgpu_info *, char *option, char *setting, char *replybuf);$/;"	m	struct:device_drv
set_devices	cgminer.c	/^static char *set_devices(char *arg)$/;"	f	file:
set_gridseed_options	cgminer.c	/^static char *set_gridseed_options(const char *arg)$/;"	f	file:
set_highprio	cgminer.c	/^static void set_highprio(void)$/;"	f	file:
set_icarus_options	cgminer.c	/^static char *set_icarus_options(const char *arg)$/;"	f	file:
set_icarus_timing	cgminer.c	/^static char *set_icarus_timing(const char *arg)$/;"	f	file:
set_int_0_to_10	cgminer.c	/^static char *set_int_0_to_10(const char *arg, int *i)$/;"	f	file:
set_int_0_to_100	cgminer.c	/^static char *set_int_0_to_100(const char *arg, int *i)$/;"	f	file:
set_int_0_to_200	cgminer.c	/^static char *set_int_0_to_200(const char *arg, int *i)$/;"	f	file:
set_int_0_to_9999	cgminer.c	/^static char *set_int_0_to_9999(const char *arg, int *i)$/;"	f	file:
set_int_1_to_10	cgminer.c	/^static char *set_int_1_to_10(const char *arg, int *i)$/;"	f	file:
set_int_1_to_65535	cgminer.c	/^static char *set_int_1_to_65535(const char *arg, int *i)$/;"	f	file:
set_int_range	cgminer.c	/^char *set_int_range(const char *arg, int *i, int min, int max)$/;"	f
set_klondike_options	cgminer.c	/^static char *set_klondike_options(const char *arg)$/;"	f	file:
set_loadbalance	cgminer.c	/^static char *set_loadbalance(enum pool_strategy *strategy)$/;"	f	file:
set_lowprio	cgminer.c	/^static void set_lowprio(void)$/;"	f	file:
set_nettime	util.c	/^static void set_nettime(void)$/;"	f	file:
set_null	cgminer.c	/^static char *set_null(const char __maybe_unused *arg)$/;"	f	file:
set_options	cgminer.c	/^static void set_options(void)$/;"	f	file:
set_pass	cgminer.c	/^static char *set_pass(const char *arg)$/;"	f	file:
set_quota	cgminer.c	/^static char *set_quota(char *arg)$/;"	f	file:
set_rotate	cgminer.c	/^static char *set_rotate(const char *arg, int *i)$/;"	f	file:
set_rr	cgminer.c	/^static char *set_rr(enum pool_strategy *strategy)$/;"	f	file:
set_schedtime	cgminer.c	/^static char *set_schedtime(const char *arg, struct schedtime *st)$/;"	f	file:
set_sharelog	cgminer.c	/^static char* set_sharelog(char *arg)$/;"	f	file:
set_target	cgminer.c	/^void set_target(unsigned char *dest_target, double diff)$/;"	f
set_temp_cutoff	cgminer.c	/^char *set_temp_cutoff(char *arg)$/;"	f
set_text_color	driver-gridseed.c	/^static void set_text_color(WORD color)$/;"	f	file:
set_timing_mode	driver-icarus.c	/^static void set_timing_mode(int this_option_offset, struct cgpu_info *icarus)$/;"	f	file:
set_url	cgminer.c	/^static char *set_url(char *arg)$/;"	f	file:
set_usb_select	cgminer.c	/^static char *set_usb_select(const char *arg)$/;"	f	file:
set_user	cgminer.c	/^static char *set_user(const char *arg)$/;"	f	file:
set_userpass	cgminer.c	/^static char *set_userpass(const char *arg)$/;"	f	file:
set_work_ntime	cgminer.c	/^void set_work_ntime(struct work *work, int ntime)$/;"	f
setconfig	api.c	/^static void setconfig(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
setgetdes	usbutils.c	/^static bool setgetdes(ssize_t count, libusb_device *dev, struct libusb_device_handle *handle, struct libusb_config_descriptor **config, int cd, char **buf, size_t *off, size_t *len)$/;"	f	file:
setpriority	compat.h	/^static inline int setpriority(__maybe_unused int which, __maybe_unused int who, __maybe_unused int prio)$/;"	f
setup_groups	api.c	/^static void setup_groups()$/;"	f	file:
setup_ipaccess	api.c	/^static void setup_ipaccess()$/;"	f	file:
setup_stratum_socket	util.c	/^static bool setup_stratum_socket(struct pool *pool)$/;"	f	file:
setup_url	cgminer.c	/^static void setup_url(struct pool *pool, char *arg)$/;"	f	file:
severity	api.c	/^	const enum code_severity severity;$/;"	m	struct:CODES	typeref:enum:CODES::code_severity	file:
sha256	sha2.c	/^void sha256(const unsigned char *message, unsigned int len, unsigned char *digest)$/;"	f
sha256_ctx	sha2.h	/^} sha256_ctx;$/;"	t	typeref:struct:__anon7
sha256_final	sha2.c	/^void sha256_final(sha256_ctx *ctx, unsigned char *digest)$/;"	f
sha256_func	miner.h	/^typedef bool (*sha256_func)(struct thr_info*, const unsigned char *pmidstate,$/;"	t
sha256_h0	sha2.c	/^uint32_t sha256_h0[8] =$/;"	v
sha256_init	sha2.c	/^void sha256_init(sha256_ctx *ctx)$/;"	f
sha256_k	sha2.c	/^uint32_t sha256_k[64] =$/;"	v
sha256_transf	sha2.c	/^void sha256_transf(sha256_ctx *ctx, const unsigned char *message,$/;"	f
sha256_update	sha2.c	/^void sha256_update(sha256_ctx *ctx, const unsigned char *message,$/;"	f
share_diff	cgminer.c	/^static uint64_t share_diff(const struct work *work)$/;"	f	file:
share_diff	miner.h	/^	uint64_t	share_diff;$/;"	m	struct:work
share_result	cgminer.c	/^share_result(json_t *val, json_t *res, json_t *err, const struct work *work,$/;"	f	file:
shared_strategy	cgminer.c	/^static bool shared_strategy(void)$/;"	f	file:
sharelog	cgminer.c	/^static void sharelog(const char*disposition, const struct work*work)$/;"	f	file:
sharelog_file	cgminer.c	/^static FILE *sharelog_file = NULL;$/;"	v	file:
sharelog_lock	cgminer.c	/^static pthread_mutex_t sharelog_lock;$/;"	v	file:
shares	miner.h	/^	int last_shares, shares;$/;"	m	struct:pool
shares	miner.h	/^	uint32_t shares;$/;"	m	struct:modminer_fpga_state
shares_last_hw	miner.h	/^	uint32_t shares_last_hw;$/;"	m	struct:modminer_fpga_state
shares_to_good	miner.h	/^	uint32_t shares_to_good;$/;"	m	struct:modminer_fpga_state
shed_count	driver-hashfast.h	/^	uint16_t shed_count;                        \/\/ Dynamic copy of #cores device has shed for thermal control$/;"	m	struct:hashfast_info
shed_count	hf_protocol.h	/^	uint16_t shed_count;                        \/\/ # of cores have been shedded for thermal control$/;"	m	struct:hf_gwq_data
shed_count	hf_protocol_be.h	/^	uint16_t shed_count;                        \/\/ # of cores have been shedded for thermal control$/;"	m	struct:hf_gwq_data
should_roll	cgminer.c	/^static inline bool should_roll(struct work *work)$/;"	f	file:
should_run	cgminer.c	/^static bool should_run(void)$/;"	f	file:
show_hash	cgminer.c	/^static void show_hash(struct work *work, char *hashshow)$/;"	f	file:
show_locks	api.c	/^void show_locks()$/;"	f
show_message	util.c	/^static bool show_message(struct pool *pool, json_t *val)$/;"	f	file:
shutdown	driver-bflsc.h	/^	bool shutdown;$/;"	m	struct:bflsc_info
shutdown	miner.h	/^	bool shutdown;$/;"	m	struct:cgpu_info
sick	miner.h	/^	struct timeval sick;$/;"	m	struct:thr_info	typeref:struct:thr_info::timeval
sighandler	cgminer.c	/^static void sighandler(int __maybe_unused sig)$/;"	f	file:
signal_work_update	cgminer.c	/^static void signal_work_update(void)$/;"	f	file:
signature	driver-bflsc.h	/^	uint8_t signature;$/;"	m	struct:QueueJobPackStructure
signature	uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table
siz	api.c	/^	size_t siz;$/;"	m	struct:io_data	file:
size	usbutils.h	/^	uint16_t size;$/;"	m	struct:usb_epinfo
slavecount	driver-klondike.c	/^	uint8_t slavecount;$/;"	m	struct:klondike_status	file:
sleep	compat.h	/^static inline int sleep(unsigned int secs)$/;"	f
sleep_ms	miner.h	/^	unsigned int sleep_ms;$/;"	m	struct:cgpu_info
sock	api.c	/^	bool sock;$/;"	m	struct:io_data	file:
sock	miner.h	/^	SOCKETTYPE sock;$/;"	m	struct:pool
sock_blocks	util.h	/^	static inline bool sock_blocks(void)$/;"	f
sock_connecting	util.c	/^static bool sock_connecting(void)$/;"	f	file:
sock_full	util.c	/^bool sock_full(struct pool *pool)$/;"	f
sock_io_new	api.c	624;"	d	file:
sock_timeout	util.h	/^	static inline bool sock_timeout(void)$/;"	f
sockaddr_proxy_port	miner.h	/^	char *sockaddr_proxy_port;$/;"	m	struct:pool
sockaddr_proxy_url	miner.h	/^	char *sockaddr_proxy_url;$/;"	m	struct:pool
sockaddr_url	miner.h	/^	char *sockaddr_url; \/* stripped url used for sockaddr *\/$/;"	m	struct:pool
sockbuf	miner.h	/^	char *sockbuf;$/;"	m	struct:pool
sockbuf_size	miner.h	/^	size_t sockbuf_size;$/;"	m	struct:pool
socket_full	util.c	/^static bool socket_full(struct pool *pool, int wait)$/;"	f	file:
sockltc	driver-gridseed.c	/^	int				sockltc;$/;"	m	struct:s_gridseed_info	file:
socks4_negotiate	util.c	/^static bool socks4_negotiate(struct pool *pool, int sockd, bool socks4a)$/;"	f	file:
socks5_negotiate	util.c	/^static bool socks5_negotiate(struct pool *pool, int sockd)$/;"	f	file:
soft_queue_len	driver-gridseed.c	/^	int				soft_queue_len;$/;"	m	struct:s_gridseed_info	file:
solved	miner.h	/^	int solved;$/;"	m	struct:pool
space	usbutils.c	/^static const char *space = " ";$/;"	v	file:
spare	hf_protocol.h	/^	uint16_t spare;$/;"	m	struct:hf_g1_die_data
spare	hf_protocol.h	/^	uint16_t spare;$/;"	m	struct:hf_gwq_data
spare	hf_protocol.h	/^	uint16_t spare;$/;"	m	struct:hf_usb_init_options
spare	hf_protocol.h	/^	uint8_t spare;$/;"	m	struct:hf_statistics
spare	hf_protocol_be.h	/^	uint16_t spare;$/;"	m	struct:hf_g1_die_data
spare	hf_protocol_be.h	/^	uint16_t spare;$/;"	m	struct:hf_gwq_data
spare	hf_protocol_be.h	/^	uint16_t spare;$/;"	m	struct:hf_usb_init_options
spare	hf_protocol_be.h	/^	uint8_t spare;$/;"	m	struct:hf_statistics
spare1	hf_protocol.h	/^	uint8_t  spare1:1;                      \/\/ Must always be 0$/;"	m	struct:hf_pll_config
spare1	hf_protocol.h	/^	uint8_t  spare1;$/;"	m	struct:hf_usb_init_header
spare1	hf_protocol_be.h	/^	uint8_t  spare1:1;                      \/\/ Must always be 0$/;"	m	struct:hf_pll_config
spare1	hf_protocol_be.h	/^	uint8_t  spare1;$/;"	m	struct:hf_usb_init_header
spare3	hf_protocol.h	/^	uint8_t  spare3[3];$/;"	m	struct:hf_hash_serial
spare3	hf_protocol_be.h	/^	uint8_t  spare3[3];$/;"	m	struct:hf_hash_serial
speed	driver-knc-spi-fpga.c	/^	uint32_t speed;$/;"	m	struct:spidev_context	file:
speed_next_work	driver-icarus.c	/^	bool speed_next_work;$/;"	m	struct:ICARUS_INFO	file:
spi_free	driver-knc-spi-fpga.c	/^static void spi_free(struct spidev_context *ctx)$/;"	f	file:
spi_lock	driver-bab.c	/^	pthread_mutex_t spi_lock;$/;"	m	struct:bab_info	file:
spi_new	driver-knc-spi-fpga.c	/^static struct spidev_context *spi_new(int idx)$/;"	f	file:
spi_request	driver-knc-spi-fpga.c	/^struct spi_request {$/;"	s	file:
spi_response	driver-knc-spi-fpga.c	/^struct spi_response {$/;"	s	file:
spi_rx_t	driver-knc-spi-fpga.c	/^struct spi_rx_t {$/;"	s	file:
spi_rxbuf	driver-knc-spi-fpga.c	/^static struct spi_rx_t spi_rxbuf;$/;"	v	typeref:struct:spi_rx_t	file:
spi_thr	driver-bab.c	/^	struct thr_info spi_thr;$/;"	m	struct:bab_info	typeref:struct:bab_info::thr_info	file:
spi_transfer	driver-knc-spi-fpga.c	/^static int spi_transfer(struct spidev_context *ctx, uint8_t *txbuf,$/;"	f	file:
spi_txbuf	driver-knc-spi-fpga.c	/^static struct spi_request spi_txbuf[MAX_REQUESTS_IN_BATCH];$/;"	v	typeref:struct:spi_request	file:
spidev_context	driver-knc-spi-fpga.c	/^struct spidev_context {$/;"	s	file:
spifd	driver-bab.c	/^	int spifd;$/;"	m	struct:bab_info	file:
src_p	api.c	2477;"	d	file:
sshare_lock	cgminer.c	/^static pthread_mutex_t sshare_lock;$/;"	v	file:
sshare_time	cgminer.c	/^	time_t sshare_time;$/;"	m	struct:stratum_share	file:
sshares	miner.h	/^	int sshares; \/* stratum shares submitted waiting on response *\/$/;"	m	struct:pool
stage_work	cgminer.c	/^static void stage_work(struct work *work)$/;"	f	file:
staged_rollable	cgminer.c	/^static int staged_rollable;$/;"	v	file:
staged_work	cgminer.c	/^struct work *staged_work = NULL;$/;"	v	typeref:struct:work
stale	miner.h	/^	bool		stale;$/;"	m	struct:work
stale_shares	miner.h	/^	unsigned int stale_shares;$/;"	m	struct:pool
stale_work	cgminer.c	/^static bool stale_work(struct work *work, bool share)$/;"	f	file:
starting_nonce	hf_protocol.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_serial
starting_nonce	hf_protocol.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_usb
starting_nonce	hf_protocol_be.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_serial
starting_nonce	hf_protocol_be.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_usb
stat	api.c	/^	struct lockstat *stat;$/;"	m	struct:lockline	typeref:struct:lockline::lockstat	file:
stat_diagnostic	hf_protocol.h	/^	uint8_t  stat_diagnostic:1;                 \/\/ Never set this$/;"	m	struct:hf_config_data
stat_diagnostic	hf_protocol_be.h	/^	uint8_t  stat_diagnostic:1;                 \/\/ Never set this$/;"	m	struct:hf_config_data
stat_lock	driver-bflsc.h	/^	pthread_rwlock_t stat_lock;$/;"	m	struct:bflsc_info
stat_lock	driver-klondike.c	/^	pthread_rwlock_t stat_lock;$/;"	m	struct:klondike_info	file:
state	driver-klondike.c	/^	uint8_t state;$/;"	m	struct:klondike_status	file:
stats	usbutils.c	/^static void stats(struct cgpu_info *cgpu, struct timeval *tv_start, struct timeval *tv_finish, int err, int mode, enum usb_cmds cmd, int seq, int timeout)$/;"	f	file:
stats1	driver-hashfast.h	/^	struct hf_long_usb_stats1 stats1;$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_long_usb_stats1
stats_initialised	usbutils.c	/^static bool stats_initialised = false;$/;"	v	file:
stats_interval	hf_protocol.h	/^	uint8_t  stats_interval:7;                  \/\/ Minimum interval to report statistics (seconds)$/;"	m	struct:hf_config_data
stats_interval	hf_protocol_be.h	/^	uint8_t  stats_interval:7;                  \/\/ Minimum interval to report statistics (seconds)$/;"	m	struct:hf_config_data
stats_lock	cgminer.c	/^pthread_mutex_t stats_lock;$/;"	v
stats_overrun	driver-hashfast.h	/^	uint64_t stats_overrun;                     \/\/ Overrun in statistics reporting$/;"	m	struct:hf_long_statistics
stats_overrun	hf_protocol.h	/^	uint8_t stats_overrun;                      \/\/ Overrun in statistics reporting$/;"	m	struct:hf_statistics
stats_overrun	hf_protocol_be.h	/^	uint8_t stats_overrun;                      \/\/ Overrun in statistics reporting$/;"	m	struct:hf_statistics
status	driver-klondike.c	/^	KLIST *status;$/;"	m	struct:klondike_info	file:
status	miner.h	/^	enum alive status;$/;"	m	struct:cgpu_info	typeref:enum:cgpu_info::alive
status2str	api.c	/^static const char *status2str(enum alive status)$/;"	f	file:
status_batch_delay	hf_protocol.h	/^	uint8_t  status_batch_delay;                \/\/ Batching delay, time to wait before sending status$/;"	m	struct:hf_config_data
status_batch_delay	hf_protocol_be.h	/^	uint8_t  status_batch_delay;                \/\/ Batching delay, time to wait before sending status$/;"	m	struct:hf_config_data
status_period	hf_protocol.h	/^	uint16_t status_period:11;                  \/\/ Periodic status time, msec$/;"	m	struct:hf_config_data
status_period	hf_protocol_be.h	/^	uint16_t status_period:11;                  \/\/ Periodic status time, msec$/;"	m	struct:hf_config_data
statusline	cgminer.c	/^static char statusline[256];$/;"	v	file:
statuswin	cgminer.c	/^WINDOW *mainwin, *statuswin, *logwin;$/;"	v
statusy	cgminer.c	/^static int statusy;$/;"	v	file:
stgd_lock	cgminer.c	/^static pthread_mutex_t *stgd_lock;$/;"	v	file:
store_nonce	driver-bab.c	/^static RLIST *store_nonce(struct cgpu_info *babcgpu, int chip, uint32_t nonce, bool first_second)$/;"	f	file:
store_work	driver-bab.c	/^static BLIST *store_work(struct cgpu_info *babcgpu, struct work *work)$/;"	f	file:
str_baud	driver-gridseed.c	/^static const char *str_baud[] = {$/;"	v	file:
str_enable_btc_cores	driver-gridseed.c	/^static const char *str_enable_btc_cores[] = {$/;"	v	file:
str_frequency	driver-gridseed.c	/^static const char *str_frequency[] = {$/;"	v	file:
str_init	driver-gridseed.c	/^static const char *str_init[] = {$/;"	v	file:
str_ltc_reset	driver-gridseed.c	/^static const char *str_ltc_reset[] = {$/;"	v	file:
str_nofifo	driver-gridseed.c	/^static const char *str_nofifo[] = {$/;"	v	file:
str_reset	driver-gridseed.c	/^static const char *str_reset[] = {$/;"	v	file:
str_text	util.c	/^void *str_text(char *ptr)$/;"	f
strategies	cgminer.c	/^struct strategies strategies[] = {$/;"	v	typeref:struct:strategies
strategies	miner.h	/^struct strategies {$/;"	s
stratum	miner.h	/^	bool		stratum;$/;"	m	struct:work
stratum_active	miner.h	/^	bool stratum_active;$/;"	m	struct:pool
stratum_hints	miner.h	/^	struct addrinfo stratum_hints;$/;"	m	struct:pool	typeref:struct:pool::addrinfo
stratum_init	miner.h	/^	bool stratum_init;$/;"	m	struct:pool
stratum_lock	miner.h	/^	pthread_mutex_t stratum_lock;$/;"	m	struct:pool
stratum_notify	miner.h	/^	bool stratum_notify;$/;"	m	struct:pool
stratum_port	miner.h	/^	char *stratum_port;$/;"	m	struct:pool
stratum_q	miner.h	/^	struct thread_q *stratum_q;$/;"	m	struct:pool	typeref:struct:pool::thread_q
stratum_resumed	cgminer.c	/^static void stratum_resumed(struct pool *pool)$/;"	f	file:
stratum_rthread	cgminer.c	/^static void *stratum_rthread(void *userdata)$/;"	f	file:
stratum_rthread	miner.h	/^	pthread_t stratum_rthread;$/;"	m	struct:pool
stratum_send	util.c	/^bool stratum_send(struct pool *pool, char *s, ssize_t len)$/;"	f
stratum_share	cgminer.c	/^struct stratum_share {$/;"	s	file:
stratum_share_result	cgminer.c	/^static void stratum_share_result(json_t *val, json_t *res_val, json_t *err_val,$/;"	f	file:
stratum_shares	cgminer.c	/^static struct stratum_share *stratum_shares = NULL;$/;"	v	typeref:struct:stratum_share	file:
stratum_sthread	cgminer.c	/^static void *stratum_sthread(void *userdata)$/;"	f	file:
stratum_sthread	miner.h	/^	pthread_t stratum_sthread;$/;"	m	struct:pool
stratum_url	miner.h	/^	char *stratum_url;$/;"	m	struct:pool
stratum_url	util.c	/^	char		*stratum_url;$/;"	m	struct:header_info	file:
stratum_work	miner.h	/^struct stratum_work {$/;"	s
stratum_works	cgminer.c	/^static bool stratum_works(struct pool *pool)$/;"	f	file:
string	miner.h	/^	char *string;$/;"	m	struct:string_elist
string_elist	miner.h	/^struct string_elist {$/;"	s
string_elist_add	miner.h	/^static inline void string_elist_add(const char *s, struct list_head *head)$/;"	f
string_elist_del	miner.h	/^static inline void string_elist_del(struct string_elist *item)$/;"	f
sub_ident	usbutils.h	/^enum sub_ident {$/;"	g
subid	miner.h	/^	int		subid;$/;"	m	struct:work
submit_fail	miner.h	/^	bool submit_fail;$/;"	m	struct:pool
submit_noffset_nonce	cgminer.c	/^bool submit_noffset_nonce(struct thr_info *thr, struct work *work_in, uint32_t nonce,$/;"	f
submit_nonce	cgminer.c	/^bool submit_nonce(struct thr_info *thr, struct work *work, uint32_t nonce)$/;"	f
submit_old	miner.h	/^	bool submit_old;$/;"	m	struct:pool
submit_q	miner.h	/^	struct thread_q *submit_q;$/;"	m	struct:pool	typeref:struct:pool::thread_q
submit_tested_work	cgminer.c	/^void submit_tested_work(struct thr_info *thr, struct work *work)$/;"	f
submit_upstream_work	cgminer.c	/^static bool submit_upstream_work(struct work *work, CURL *curl, bool resubmit)$/;"	f	file:
submit_work_async	cgminer.c	/^static void submit_work_async(struct work *work)$/;"	f	file:
submit_work_thread	cgminer.c	/^static void *submit_work_thread(void *userdata)$/;"	f	file:
submit_work_thread	cgminer.c	/^static void *submit_work_thread(void __maybe_unused *userdata)$/;"	f	file:
subtime	util.c	/^void subtime(struct timeval *a, struct timeval *b)$/;"	f
success_more	miner.h	/^	uint32_t success_more;$/;"	m	struct:modminer_fpga_state
successful_connect	util.c	/^bool successful_connect = false;$/;"	v
suffix_string	cgminer.c	/^static void suffix_string(uint64_t val, char *buf, size_t bufsiz, int sigdigits)$/;"	f	file:
sumTi	driver-icarus.c	/^	double sumTi;$/;"	m	struct:ICARUS_HISTORY	file:
sumXi	driver-icarus.c	/^	double sumXi;$/;"	m	struct:ICARUS_HISTORY	file:
sumXi2	driver-icarus.c	/^	double sumXi2;$/;"	m	struct:ICARUS_HISTORY	file:
sumXiTi	driver-icarus.c	/^	double sumXiTi;$/;"	m	struct:ICARUS_HISTORY	file:
summary	api.c	/^static void summary(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
supports_resume	cgminer.c	/^static bool supports_resume(struct pool *pool)$/;"	f	file:
suseconds_t	compat.h	/^typedef long suseconds_t;$/;"	t
suspend_stratum	util.c	/^void suspend_stratum(struct pool *pool)$/;"	f
swab256	miner.h	/^static inline void swab256(void *dest_p, const void *src_p)$/;"	f
swab32	miner.h	/^static inline uint32_t swab32(uint32_t v)$/;"	f
swap256	miner.h	/^static inline void swap256(void *dest_p, const void *src_p)$/;"	f
switch_logsize	cgminer.c	/^static void switch_logsize(bool __maybe_unused newdevs)$/;"	f	file:
switch_pools	cgminer.c	/^void switch_pools(struct pool *selected)$/;"	f
switchpool	api.c	/^static void switchpool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
swork	miner.h	/^	struct stratum_work swork;$/;"	m	struct:pool	typeref:struct:pool::stratum_work
swork_id	cgminer.c	/^int swork_id;$/;"	v
tacho	hf_protocol.h	/^	uint16_t tacho;                             \/\/ See documentation$/;"	m	struct:hf_g1_die_data
tacho	hf_protocol_be.h	/^	uint16_t tacho;                             \/\/ See documentation$/;"	m	struct:hf_g1_die_data
tail	uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle
tailsprintf	miner.h	1333;"	d
take_queued_work_bymidstate	cgminer.c	/^struct work *take_queued_work_bymidstate(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)$/;"	f
target	miner.h	/^	unsigned char	target[32];$/;"	m	struct:work
tbl	uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table
tdiff	util.c	/^double tdiff(struct timeval *end, struct timeval *start)$/;"	f
temp	driver-klondike.c	/^	uint8_t temp;$/;"	m	struct:klondike_status	file:
temp	miner.h	/^	float temp;$/;"	m	struct:cgpu_info
temp0	driver-avalon.h	/^	int temp0;$/;"	m	struct:avalon_info
temp0	driver-avalon.h	/^	uint8_t temp0;$/;"	m	struct:avalon_result
temp1	driver-avalon.h	/^	int temp1;$/;"	m	struct:avalon_info
temp1	driver-avalon.h	/^	uint8_t temp1;$/;"	m	struct:avalon_result
temp1	driver-bflsc.h	/^	float temp1;$/;"	m	struct:bflsc_dev
temp1_5min_av	driver-bflsc.h	/^	float temp1_5min_av; \/\/ TODO:$/;"	m	struct:bflsc_dev
temp1_max	driver-bflsc.h	/^	float temp1_max;$/;"	m	struct:bflsc_dev
temp1_max_time	driver-bflsc.h	/^	time_t temp1_max_time;$/;"	m	struct:bflsc_dev
temp2	driver-avalon.h	/^	int temp2;$/;"	m	struct:avalon_info
temp2	driver-avalon.h	/^	uint8_t temp2;$/;"	m	struct:avalon_result
temp2	driver-bflsc.h	/^	float temp2;$/;"	m	struct:bflsc_dev
temp2_5min_av	driver-bflsc.h	/^	float temp2_5min_av; \/\/ TODO:$/;"	m	struct:bflsc_dev
temp2_max	driver-bflsc.h	/^	float temp2_max;$/;"	m	struct:bflsc_dev
temp2_max_time	driver-bflsc.h	/^	time_t temp2_max_time;$/;"	m	struct:bflsc_dev
temp_cutoff_str	cgminer.c	/^static char *temp_cutoff_str = NULL;$/;"	v	file:
temp_drop	driver-avalon.c	/^static void temp_drop(struct avalon_info *info, int temp)$/;"	f	file:
temp_history_count	driver-avalon.h	/^	int temp_history_count;$/;"	m	struct:avalon_info
temp_history_index	driver-avalon.h	/^	int temp_history_index;$/;"	m	struct:avalon_info
temp_max	driver-avalon.h	/^	int temp_max;$/;"	m	struct:avalon_info
temp_old	driver-avalon.h	/^	int temp_old;$/;"	m	struct:avalon_info
temp_rise	driver-avalon.c	/^static void temp_rise(struct avalon_info *info, int temp)$/;"	f	file:
temp_sum	driver-avalon.h	/^	int temp_sum;$/;"	m	struct:avalon_info
tempcritical	driver-klondike.c	/^	uint8_t tempcritical;$/;"	m	struct:klondike_cfg	file:
temperature	driver-bitfury.h	/^	double temperature;$/;"	m	struct:bitfury_info
temperature	hf_protocol.h	/^	uint16_t temperature;                       \/\/ Regulator temp sensor$/;"	m	struct:hf_g1_die_data
temperature	hf_protocol_be.h	/^	uint16_t temperature;                       \/\/ Regulator temp sensor$/;"	m	struct:hf_g1_die_data
temptarget	driver-klondike.c	/^	uint8_t temptarget;$/;"	m	struct:klondike_cfg	file:
termhandler	cgminer.c	/^struct sigaction termhandler, inthandler;$/;"	v	typeref:struct:sigaction
termios_debug	fpgautils.c	/^void termios_debug(const char *devpath, struct termios *my_termios, const char *msg)$/;"	f
test_nonce	cgminer.c	/^bool test_nonce(struct work *work, uint32_t nonce)$/;"	f
test_nonce_diff	cgminer.c	/^bool test_nonce_diff(struct work *work, uint32_t nonce, double diff)$/;"	f
test_pool_thread	cgminer.c	/^static void *test_pool_thread(void *arg)$/;"	f	file:
test_thread	miner.h	/^	pthread_t test_thread;$/;"	m	struct:pool
test_work_current	cgminer.c	/^static bool test_work_current(struct work *work)$/;"	f	file:
tested_nonces	driver-bab.c	/^	uint64_t tested_nonces;$/;"	m	struct:bab_info	file:
testing	miner.h	/^	bool testing;$/;"	m	struct:pool
text_print_status	cgminer.c	/^static void text_print_status(int thr_id)$/;"	f	file:
th_read	driver-gridseed.c	/^	pthread_t		th_read;$/;"	m	struct:s_gridseed_info	file:
th_send	driver-gridseed.c	/^	pthread_t		th_send;$/;"	m	struct:s_gridseed_info	file:
thr	driver-avalon.h	/^	struct thr_info *thr;$/;"	m	struct:avalon_info	typeref:struct:avalon_info::thr_info
thr	driver-bitfury.h	/^	struct thr_info *thr;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::thr_info
thr	driver-gridseed.c	/^	struct thr_info	*thr;$/;"	m	struct:s_gridseed_info	typeref:struct:s_gridseed_info::thr_info	file:
thr	miner.h	/^	struct thr_info	*thr;$/;"	m	struct:work	typeref:struct:work::thr_info
thr	miner.h	/^	struct thr_info **thr;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::thr_info
thr_id	miner.h	/^	int		thr_id;$/;"	m	struct:work
thr_info	miner.h	/^struct thr_info {$/;"	s
thr_info_cancel	util.c	/^void thr_info_cancel(struct thr_info *thr)$/;"	f
thr_info_create	util.c	/^int thr_info_create(struct thr_info *thr, pthread_attr_t *attr, void *(*start) (void *), void *arg)$/;"	f
thread_enable	miner.h	/^	void (*thread_enable)(struct thr_info *);$/;"	m	struct:device_drv
thread_fail_init_count	miner.h	/^	int thread_fail_init_count;$/;"	m	struct:cgpu_info
thread_fail_queue_count	miner.h	/^	int thread_fail_queue_count;$/;"	m	struct:cgpu_info
thread_init	miner.h	/^	bool (*thread_init)(struct thr_info *);$/;"	m	struct:device_drv
thread_prepare	miner.h	/^	bool (*thread_prepare)(struct thr_info *);$/;"	m	struct:device_drv
thread_q	miner.h	/^struct thread_q {$/;"	s
thread_reportin	cgminer.c	/^static void thread_reportin(struct thr_info *thr)$/;"	f	file:
thread_reportout	cgminer.c	/^static void thread_reportout(struct thr_info *thr)$/;"	f	file:
thread_shutdown	miner.h	/^	void (*thread_shutdown)(struct thr_info *);$/;"	m	struct:device_drv
thread_zero_hash_count	miner.h	/^	int thread_zero_hash_count;$/;"	m	struct:cgpu_info
threads	miner.h	/^	int threads;$/;"	m	struct:cgpu_info
tidyup	api.c	/^static void tidyup(__maybe_unused void *arg)$/;"	f	file:
time_before	cgminer.c	/^static bool time_before(struct tm *tm1, struct tm *tm2)$/;"	f	file:
time_less	util.c	/^bool time_less(struct timeval *a, struct timeval *b)$/;"	f
time_more	util.c	/^bool time_more(struct timeval *a, struct timeval *b)$/;"	f
timediff	driver-knc-spi-fpga.c	/^static int64_t timediff(const struct timeval *a, const struct timeval *b)$/;"	f	file:
timeout	driver-avalon.h	/^	int timeout;$/;"	m	struct:avalon_info
timeout	driver-avalon.h	/^	uint8_t timeout;$/;"	m	struct:avalon_result
timeout	driver-icarus.c	/^	int timeout;$/;"	m	struct:ICARUS_INFO	file:
timeout	usbutils.h	/^	unsigned int timeout;$/;"	m	struct:usb_find_devices
timeout_data	driver-avalon.h	/^	uint8_t timeout_data;$/;"	m	struct:avalon_task
timeout_fail	miner.h	/^	uint32_t timeout_fail;$/;"	m	struct:modminer_fpga_state
timer_eft	driver-avalon.h	/^	uint8_t timer_eft	:1;$/;"	m	struct:avalon_task
timeradd	miner.h	104;"	d
timeraddspec	util.c	/^void timeraddspec(struct timespec *a, const struct timespec *b)$/;"	f
timersub	miner.h	93;"	d
timersubspec	util.c	/^static void __maybe_unused timersubspec(struct timespec *a, const struct timespec *b)$/;"	f	file:
times_received	miner.h	/^	uint64_t times_received;$/;"	m	struct:cgminer_pool_stats
times_sent	miner.h	/^	uint64_t times_sent;$/;"	m	struct:cgminer_pool_stats
timespec_to_ms	util.c	/^static int __maybe_unused timespec_to_ms(struct timespec *ts)$/;"	f	file:
timespec_to_val	util.c	/^void timespec_to_val(struct timeval *val, const struct timespec *spec)$/;"	f
timestamp	hf_protocol.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_serial
timestamp	hf_protocol.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_usb
timestamp	hf_protocol_be.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_serial
timestamp	hf_protocol_be.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_usb
timeval_to_spec	util.c	/^void timeval_to_spec(struct timespec *spec, const struct timeval *val)$/;"	f
timing_mode	driver-icarus.c	/^	enum timing_mode timing_mode;$/;"	m	struct:ICARUS_INFO	typeref:enum:ICARUS_INFO::timing_mode	file:
timing_mode	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	g	file:
timing_mode_str	driver-icarus.c	/^static const char *timing_mode_str(enum timing_mode timing_mode)$/;"	f	file:
tiospeed	fpgautils.c	/^int tiospeed(speed_t speed)$/;"	f
tm	cgminer.c	/^	struct tm tm;$/;"	m	struct:schedtime	typeref:struct:schedtime::tm	file:
tmo_count	usbutils.h	/^	uint64_t tmo_count;$/;"	m	struct:cg_usb_info
toaddr	driver-gridseed.c	/^	struct sockaddr_in toaddr; \/* remote address to send response *\/$/;"	m	struct:s_gridseed_info	typeref:struct:s_gridseed_info::sockaddr_in	file:
tolines	driver-bflsc.c	/^static bool tolines(struct cgpu_info *bflsc, int dev, char *buf, int *lines, char ***items, enum usb_cmds cmd)$/;"	f	file:
tot_len	sha2.h	/^    unsigned int tot_len;$/;"	m	struct:__anon7
total_accepted	cgminer.c	/^int total_accepted, total_rejected, total_diff1;$/;"	v
total_control_threads	cgminer.c	/^static int total_control_threads;$/;"	v	file:
total_count	usbutils.c	/^static int total_count = 0;$/;"	v	file:
total_delay	usbutils.c	/^	double total_delay;$/;"	m	struct:cg_usb_stats_item	file:
total_devices	cgminer.c	/^int total_devices;$/;"	v
total_diff1	cgminer.c	/^int total_accepted, total_rejected, total_diff1;$/;"	v
total_diff_accepted	cgminer.c	/^double total_diff_accepted, total_diff_rejected, total_diff_stale;$/;"	v
total_diff_rejected	cgminer.c	/^double total_diff_accepted, total_diff_rejected, total_diff_stale;$/;"	v
total_diff_stale	cgminer.c	/^double total_diff_accepted, total_diff_rejected, total_diff_stale;$/;"	v
total_discarded	cgminer.c	/^int total_getworks, total_stale, total_discarded;$/;"	v
total_getworks	cgminer.c	/^int total_getworks, total_stale, total_discarded;$/;"	v
total_go	cgminer.c	/^unsigned int total_go, total_ro;$/;"	v
total_limit	usbutils.c	/^static int total_limit = 999999;$/;"	v	file:
total_links	driver-bab.c	/^	uint64_t total_links;$/;"	m	struct:bab_info	file:
total_mhashes	miner.h	/^	double total_mhashes;$/;"	m	struct:cgpu_info
total_mhashes_done	cgminer.c	/^double total_mhashes_done;$/;"	v
total_nonces	driver-bitfury.h	/^	int total_nonces;$/;"	m	struct:bitfury_info
total_over	usbutils.h	/^	uint64_t total_over;$/;"	m	struct:cg_usb_tmo
total_passes	cgminer.c	/^static int total_urls, total_users, total_passes, total_userpasses;$/;"	v	file:
total_pools	cgminer.c	/^int total_pools, enabled_pools;$/;"	v
total_read_delay	usbutils.h	/^	double total_read_delay;$/;"	m	struct:cg_usb_info
total_rejected	cgminer.c	/^int total_accepted, total_rejected, total_diff1;$/;"	v
total_ro	cgminer.c	/^unsigned int total_go, total_ro;$/;"	v
total_rolling	cgminer.c	/^double total_rolling;$/;"	v
total_secs	cgminer.c	/^double total_secs = 1.0;$/;"	v
total_staged	cgminer.c	/^static int total_staged(void)$/;"	f	file:
total_stale	cgminer.c	/^int total_getworks, total_stale, total_discarded;$/;"	v
total_tests	driver-bab.c	/^	uint64_t total_tests;$/;"	m	struct:bab_info	file:
total_tmo	usbutils.h	/^	uint64_t total_tmo;$/;"	m	struct:cg_usb_tmo
total_tv_end	cgminer.c	/^static struct timeval total_tv_start, total_tv_end;$/;"	v	typeref:struct:	file:
total_tv_start	cgminer.c	/^static struct timeval total_tv_start, total_tv_end;$/;"	v	typeref:struct:timeval	file:
total_urls	cgminer.c	/^static int total_urls, total_users, total_passes, total_userpasses;$/;"	v	file:
total_userpasses	cgminer.c	/^static int total_urls, total_users, total_passes, total_userpasses;$/;"	v	file:
total_users	cgminer.c	/^static int total_urls, total_users, total_passes, total_userpasses;$/;"	v	file:
total_work	cgminer.c	/^static int total_work;$/;"	v	file:
total_write_delay	usbutils.h	/^	double total_write_delay;$/;"	m	struct:cg_usb_info
totalhashcount	driver-klondike.c	/^	uint64_t totalhashcount;$/;"	m	struct:device_info	file:
tq_ent	util.c	/^struct tq_ent {$/;"	s	file:
tq_free	util.c	/^void tq_free(struct thread_q *tq)$/;"	f
tq_freeze	util.c	/^void tq_freeze(struct thread_q *tq)$/;"	f
tq_freezethaw	util.c	/^static void tq_freezethaw(struct thread_q *tq, bool frozen)$/;"	f	file:
tq_new	util.c	/^struct thread_q *tq_new(void)$/;"	f
tq_pop	util.c	/^void *tq_pop(struct thread_q *tq, const struct timespec *abstime)$/;"	f
tq_push	util.c	/^bool tq_push(struct thread_q *tq, void *data)$/;"	f
tq_thaw	util.c	/^void tq_thaw(struct thread_q *tq)$/;"	f
transfer	driver-gridseed.h	25;"	d
transfer	driver-icarus.c	304;"	d	file:
transfer	usbutils.c	/^	struct libusb_transfer *transfer;$/;"	m	struct:usb_transfer	typeref:struct:usb_transfer::libusb_transfer	file:
transfer_callback	usbutils.c	/^static void LIBUSB_CALL transfer_callback(struct libusb_transfer *transfer)$/;"	f	file:
tried_two_byte_temp	miner.h	/^	bool tried_two_byte_temp;$/;"	m	struct:modminer_fpga_state
tries	api.c	/^	uint64_t tries;$/;"	m	struct:lockinfo	file:
trim	api-example.c	/^static char *trim(char *str)$/;"	f	file:
trim	hf_protocol.h	/^	uint32_t trim:4;                            \/\/ Trim value for temperature measurements$/;"	m	struct:hf_config_data
trim	hf_protocol_be.h	/^	uint32_t trim:4;                            \/\/ Trim value for temperature measurements$/;"	m	struct:hf_config_data
truediffone	cgminer.c	/^static const double truediffone = 26959535291011309493156476344723991336010898738574164086137773096960.0;$/;"	v	file:
tv	api.c	/^	struct timeval tv;$/;"	m	struct:lockstat	typeref:struct:lockstat::timeval	file:
tv	miner.h	/^	struct timeval tv;$/;"	m	struct:curl_ent	typeref:struct:curl_ent::timeval
tv_cloned	miner.h	/^	struct timeval	tv_cloned;$/;"	m	struct:work	typeref:struct:work::timeval
tv_getwork	miner.h	/^	struct timeval	tv_getwork;$/;"	m	struct:work	typeref:struct:work::timeval
tv_getwork_reply	miner.h	/^	struct timeval	tv_getwork_reply;$/;"	m	struct:work	typeref:struct:work::timeval
tv_idle	miner.h	/^	struct timeval tv_idle;$/;"	m	struct:pool	typeref:struct:pool::timeval
tv_inter_char_default	fpgautils.c	/^const struct timeval tv_inter_char_default = { 0, 1000 };$/;"	v	typeref:struct:timeval
tv_last_nonce_received	driver-klondike.c	/^	struct timeval tv_last_nonce_received;$/;"	m	struct:klondike_info	typeref:struct:klondike_info::timeval	file:
tv_lastwork	miner.h	/^	struct timeval tv_lastwork;$/;"	m	struct:pool	typeref:struct:pool::timeval
tv_sort	cgminer.c	/^static int tv_sort(struct work *worka, struct work *workb)$/;"	f	file:
tv_staged	miner.h	/^	struct timeval	tv_staged;$/;"	m	struct:work	typeref:struct:work::timeval
tv_stamp	miner.h	/^	struct timeval	tv_stamp;$/;"	m	struct:work	typeref:struct:work::timeval
tv_start	driver-bitfury.h	/^	struct timeval tv_start;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::timeval
tv_timeout_default	fpgautils.c	/^const struct timeval tv_timeout_default = { 0, 100000 };$/;"	v	typeref:struct:timeval
tv_to_ms	driver-bitforce.c	62;"	d	file:
tv_when	driver-klondike.c	/^	struct timeval tv_when;$/;"	m	struct:klist	typeref:struct:klist::timeval	file:
tv_work_found	miner.h	/^	struct timeval	tv_work_found;$/;"	m	struct:work	typeref:struct:work::timeval
tv_work_start	miner.h	/^	struct timeval	tv_work_start;$/;"	m	struct:work	typeref:struct:work::timeval
tv_workstart	miner.h	/^	struct timeval tv_workstart;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval
txn_hashes	miner.h	/^	unsigned char *txn_hashes;$/;"	m	struct:pool
typ	api.c	/^	enum cglock_typ typ;$/;"	m	struct:lockinfo	typeref:enum:lockinfo::cglock_typ	file:
type	driver-knc-spi-fpga.c	/^	uint32_t type		:2;$/;"	m	struct:spi_response	file:
type	miner.h	/^	enum api_data_type type;$/;"	m	struct:api_data	typeref:enum:api_data::api_data_type
uart_rx_bad_dma	hf_protocol.h	/^	uint16_t uart_rx_bad_dma;$/;"	m	struct:hf_usb_stats1
uart_rx_bad_dma	hf_protocol_be.h	/^	uint16_t uart_rx_bad_dma;$/;"	m	struct:hf_usb_stats1
uart_rx_bad_hcrc	hf_protocol.h	/^	uint16_t uart_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1
uart_rx_bad_hcrc	hf_protocol_be.h	/^	uint16_t uart_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1
uart_rx_buffers_full	hf_protocol.h	/^	uint16_t uart_rx_buffers_full;$/;"	m	struct:hf_usb_stats1
uart_rx_buffers_full	hf_protocol_be.h	/^	uint16_t uart_rx_buffers_full;$/;"	m	struct:hf_usb_stats1
uart_rx_data_done	hf_protocol.h	/^	uint16_t uart_rx_data_done;$/;"	m	struct:hf_usb_stats1
uart_rx_data_done	hf_protocol_be.h	/^	uint16_t uart_rx_data_done;$/;"	m	struct:hf_usb_stats1
uart_rx_header_done	hf_protocol.h	/^	uint16_t uart_rx_header_done;$/;"	m	struct:hf_usb_stats1
uart_rx_header_done	hf_protocol_be.h	/^	uint16_t uart_rx_header_done;$/;"	m	struct:hf_usb_stats1
uart_rx_missed_preamble_ints	hf_protocol.h	/^	uint16_t uart_rx_missed_preamble_ints;$/;"	m	struct:hf_usb_stats1
uart_rx_missed_preamble_ints	hf_protocol_be.h	/^	uint16_t uart_rx_missed_preamble_ints;$/;"	m	struct:hf_usb_stats1
uart_rx_preamble_ints	hf_protocol.h	/^	uint16_t uart_rx_preamble_ints;$/;"	m	struct:hf_usb_stats1
uart_rx_preamble_ints	hf_protocol_be.h	/^	uint16_t uart_rx_preamble_ints;$/;"	m	struct:hf_usb_stats1
uart_rx_short_dma	hf_protocol.h	/^	uint16_t uart_rx_short_dma;$/;"	m	struct:hf_usb_stats1
uart_rx_short_dma	hf_protocol_be.h	/^	uint16_t uart_rx_short_dma;$/;"	m	struct:hf_usb_stats1
uart_tx_interrupts	hf_protocol.h	/^	uint16_t uart_tx_interrupts;$/;"	m	struct:hf_usb_stats1
uart_tx_interrupts	hf_protocol_be.h	/^	uint16_t uart_tx_interrupts;$/;"	m	struct:hf_usb_stats1
uart_tx_queue_dma	hf_protocol.h	/^	uint16_t uart_tx_queue_dma;$/;"	m	struct:hf_usb_stats1
uart_tx_queue_dma	hf_protocol_be.h	/^	uint16_t uart_tx_queue_dma;$/;"	m	struct:hf_usb_stats1
uint	compat.h	/^typedef unsigned int uint;$/;"	t
uint32_t	uthash.h	/^typedef unsigned int uint32_t;$/;"	t
uint8_t	uthash.h	/^typedef unsigned char uint8_t;$/;"	t
ulong	compat.h	/^typedef unsigned long int ulong;$/;"	t
uninitialised_var	miner.h	197;"	d
unlikely	miner.h	186;"	d
unlikely	miner.h	189;"	d
unlikely	miner.h	192;"	d
unlock_curses	cgminer.c	/^static inline void unlock_curses(void)$/;"	f	file:
unlocks	api.c	/^	uint64_t unlocks;$/;"	m	struct:lockinfo	file:
unqueued_work	miner.h	/^	struct work *unqueued_work;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::work
unsec	usbutils.c	/^static LPSECURITY_ATTRIBUTES unsec(LPSECURITY_ATTRIBUTES sec)$/;"	f	file:
untested_nonces	driver-bab.c	/^	uint64_t untested_nonces;$/;"	m	struct:bab_info	file:
unused	driver-icarus.c	/^	uint8_t unused[ICARUS_UNUSED_SIZE];$/;"	m	struct:ICARUS_WORK	file:
update_count	driver-bflsc.h	/^	uint32_t update_count;$/;"	m	struct:bflsc_info
update_gbt	cgminer.c	/^static void update_gbt(struct pool *pool)$/;"	f	file:
update_usb_stats	usbutils.c	/^void update_usb_stats(__maybe_unused struct cgpu_info *cgpu)$/;"	f
update_work	miner.h	/^	void (*update_work)(struct cgpu_info *);$/;"	m	struct:device_drv
update_work_stats	cgminer.c	/^static void update_work_stats(struct thr_info *thr, struct work *work)$/;"	f	file:
upload_buffer	util.c	/^struct upload_buffer {$/;"	s	file:
upload_data_cb	util.c	/^static size_t upload_data_cb(void *ptr, size_t size, size_t nmemb,$/;"	f	file:
us_tdiff	util.c	/^double us_tdiff(struct timeval *end, struct timeval *start)$/;"	f
us_to_timespec	util.c	/^void us_to_timespec(struct timespec *spec, int64_t us)$/;"	f
us_to_timeval	util.c	/^void us_to_timeval(struct timeval *val, int64_t us)$/;"	f
usb11_cgt	usbutils.c	/^static cgtimer_t usb11_cgt;$/;"	v	file:
usb_all	usbutils.c	/^void usb_all(int level)$/;"	f
usb_alloc_cgpu	usbutils.c	/^struct cgpu_info *usb_alloc_cgpu(struct device_drv *drv, int threads)$/;"	f
usb_applog	usbutils.c	/^void usb_applog(struct cgpu_info *cgpu, enum usb_cmds cmd, char *msg, int amount, int err)$/;"	f
usb_buffer_clear	usbutils.c	/^void usb_buffer_clear(struct cgpu_info *cgpu)$/;"	f
usb_buffer_size	usbutils.c	/^uint32_t usb_buffer_size(struct cgpu_info *cgpu)$/;"	f
usb_bulk_transfer	usbutils.c	/^usb_bulk_transfer(struct cgpu_info *cgpu, struct cg_usb_device *usbdev, int intinfo,$/;"	f	file:
usb_busdev	usbutils.c	/^static struct usb_busdev {$/;"	s	file:
usb_check	usbutils.c	/^static struct usb_find_devices *usb_check(__maybe_unused struct device_drv *drv, __maybe_unused struct libusb_device *dev)$/;"	f	file:
usb_check_device	usbutils.c	/^static bool usb_check_device(struct device_drv *drv, struct libusb_device *dev, struct usb_find_devices *look)$/;"	f	file:
usb_check_each	usbutils.c	/^static struct usb_find_devices *usb_check_each(int drvnum, struct device_drv *drv, struct libusb_device *dev)$/;"	f	file:
usb_cleanup	usbutils.c	/^void usb_cleanup(void)$/;"	f
usb_cmd	driver-hashfast.c	/^	enum usb_cmds usb_cmd;$/;"	m	struct:hfa_cmd	typeref:enum:hfa_cmd::usb_cmds	file:
usb_cmdname	usbutils.c	/^const char *usb_cmdname(enum usb_cmds cmd)$/;"	f
usb_cmds	usbutils.h	/^enum usb_cmds {$/;"	g
usb_commands	usbutils.c	/^char *usb_commands[] = {$/;"	v
usb_control_transfer	usbutils.c	/^static int usb_control_transfer(struct cgpu_info *cgpu, libusb_device_handle *dev_handle, uint8_t bmRequestType,$/;"	f	file:
usb_copy_cgpu	usbutils.c	/^struct cgpu_info *usb_copy_cgpu(struct cgpu_info *orig)$/;"	f
usb_detect	usbutils.c	/^void usb_detect(struct device_drv *drv, struct cgpu_info *(*device_detect)(struct libusb_device *, struct usb_find_devices *))$/;"	f
usb_epinfo	usbutils.h	/^struct usb_epinfo {$/;"	s
usb_find_devices	usbutils.h	/^struct usb_find_devices {$/;"	s
usb_free_cgpu	usbutils.c	/^struct cgpu_info *usb_free_cgpu(struct cgpu_info *cgpu)$/;"	f
usb_ftdi_cts	usbutils.c	/^int usb_ftdi_cts(struct cgpu_info *cgpu)$/;"	f
usb_ftdi_set_latency	usbutils.h	404;"	d
usb_full	usbutils.c	/^static void usb_full(ssize_t *count, libusb_device *dev, char **buf, size_t *off, size_t *len, int level)$/;"	f	file:
usb_ident	usbutils.c	/^enum sub_ident usb_ident(struct cgpu_info *cgpu)$/;"	f
usb_in_use_list	usbutils.c	/^struct usb_in_use_list {$/;"	s	file:
usb_init	usbutils.c	/^bool usb_init(struct cgpu_info *cgpu, struct libusb_device *dev, struct usb_find_devices *found_match)$/;"	f
usb_init_base	driver-hashfast.h	/^	struct hf_usb_init_base usb_init_base;      \/\/ USB Base information from USB_INIT$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_usb_init_base
usb_initialise	usbutils.c	/^void usb_initialise(void)$/;"	f
usb_interface	usbutils.h	408;"	d
usb_intinfo	usbutils.h	/^struct usb_intinfo {$/;"	s
usb_nodev	usbutils.c	/^void usb_nodev(struct cgpu_info *cgpu)$/;"	f
usb_poll_thread	cgminer.c	/^static pthread_t usb_poll_thread;$/;"	v	file:
usb_polling	cgminer.c	/^static bool usb_polling;$/;"	v	file:
usb_read	usbutils.h	416;"	d
usb_read_cancellable	usbutils.h	419;"	d
usb_read_ep	usbutils.h	452;"	d
usb_read_ep_timeout	usbutils.h	467;"	d
usb_read_ii	usbutils.h	422;"	d
usb_read_ii_once	usbutils.h	428;"	d
usb_read_ii_once_timeout	usbutils.h	437;"	d
usb_read_ii_timeout	usbutils.h	461;"	d
usb_read_ii_timeout_cancellable	usbutils.h	464;"	d
usb_read_nl	usbutils.h	440;"	d
usb_read_nl_timeout	usbutils.h	443;"	d
usb_read_ok	usbutils.h	446;"	d
usb_read_ok_timeout	usbutils.h	449;"	d
usb_read_once	usbutils.h	425;"	d
usb_read_once_timeout	usbutils.h	431;"	d
usb_read_once_timeout_cancellable	usbutils.h	434;"	d
usb_read_timeout	usbutils.h	455;"	d
usb_read_timeout_cancellable	usbutils.h	458;"	d
usb_resource_sem	cgminer.c	/^cgsem_t usb_resource_sem;$/;"	v
usb_resource_thread	usbutils.c	/^void *usb_resource_thread(void __maybe_unused *userdata)$/;"	f
usb_rx_bad_hcrc	driver-hashfast.h	/^	uint64_t usb_rx_bad_hcrc;$/;"	m	struct:hf_long_usb_stats1
usb_rx_bad_hcrc	hf_protocol.h	/^	uint16_t usb_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1
usb_rx_bad_hcrc	hf_protocol_be.h	/^	uint16_t usb_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1
usb_rx_preambles	driver-hashfast.h	/^	uint64_t usb_rx_preambles;$/;"	m	struct:hf_long_usb_stats1
usb_rx_preambles	hf_protocol.h	/^	uint16_t usb_rx_preambles;$/;"	m	struct:hf_usb_stats1
usb_rx_preambles	hf_protocol_be.h	/^	uint16_t usb_rx_preambles;$/;"	m	struct:hf_usb_stats1
usb_rx_receive_byte_errors	driver-hashfast.h	/^	uint64_t usb_rx_receive_byte_errors;$/;"	m	struct:hf_long_usb_stats1
usb_rx_receive_byte_errors	hf_protocol.h	/^	uint16_t usb_rx_receive_byte_errors;$/;"	m	struct:hf_usb_stats1
usb_rx_receive_byte_errors	hf_protocol_be.h	/^	uint16_t usb_rx_receive_byte_errors;$/;"	m	struct:hf_usb_stats1
usb_set_dev_start	usbutils.c	/^void usb_set_dev_start(struct cgpu_info *cgpu)$/;"	f
usb_stats	usbutils.c	/^static struct cg_usb_stats *usb_stats = NULL;$/;"	v	typeref:struct:cg_usb_stats	file:
usb_submit_transfer	usbutils.c	/^static int usb_submit_transfer(struct usb_transfer *ut, struct libusb_transfer *transfer,$/;"	f	file:
usb_tmo	usbutils.h	/^	struct cg_usb_tmo usb_tmo[USB_TMOS];$/;"	m	struct:cg_usb_info	typeref:struct:cg_usb_info::cg_usb_tmo
usb_transfer	usbutils.c	/^struct usb_transfer {$/;"	s	file:
usb_transfer	usbutils.h	485;"	d
usb_transfer_data	usbutils.h	488;"	d
usb_transfer_read	usbutils.h	491;"	d
usb_transfer_toerr	usbutils.c	/^static int usb_transfer_toerr(int ret)$/;"	f	file:
usb_tx_attempts	driver-hashfast.h	/^	uint64_t usb_tx_attempts;$/;"	m	struct:hf_long_usb_stats1
usb_tx_attempts	hf_protocol.h	/^	uint16_t usb_tx_attempts;$/;"	m	struct:hf_usb_stats1
usb_tx_attempts	hf_protocol_be.h	/^	uint16_t usb_tx_attempts;$/;"	m	struct:hf_usb_stats1
usb_tx_disconnected	driver-hashfast.h	/^	uint64_t usb_tx_disconnected;$/;"	m	struct:hf_long_usb_stats1
usb_tx_disconnected	hf_protocol.h	/^	uint16_t usb_tx_disconnected;$/;"	m	struct:hf_usb_stats1
usb_tx_disconnected	hf_protocol_be.h	/^	uint16_t usb_tx_disconnected;$/;"	m	struct:hf_usb_stats1
usb_tx_endpointstalled	driver-hashfast.h	/^	uint64_t usb_tx_endpointstalled;$/;"	m	struct:hf_long_usb_stats1
usb_tx_endpointstalled	hf_protocol.h	/^	uint16_t usb_tx_endpointstalled;$/;"	m	struct:hf_usb_stats1
usb_tx_endpointstalled	hf_protocol_be.h	/^	uint16_t usb_tx_endpointstalled;$/;"	m	struct:hf_usb_stats1
usb_tx_incompletes	driver-hashfast.h	/^	uint64_t usb_tx_incompletes;$/;"	m	struct:hf_long_usb_stats1
usb_tx_incompletes	hf_protocol.h	/^	uint16_t usb_tx_incompletes;$/;"	m	struct:hf_usb_stats1
usb_tx_incompletes	hf_protocol_be.h	/^	uint16_t usb_tx_incompletes;$/;"	m	struct:hf_usb_stats1
usb_tx_packets	driver-hashfast.h	/^	uint64_t usb_tx_packets;$/;"	m	struct:hf_long_usb_stats1
usb_tx_packets	hf_protocol.h	/^	uint16_t usb_tx_packets;$/;"	m	struct:hf_usb_stats1
usb_tx_packets	hf_protocol_be.h	/^	uint16_t usb_tx_packets;$/;"	m	struct:hf_usb_stats1
usb_tx_suspended	driver-hashfast.h	/^	uint64_t usb_tx_suspended;$/;"	m	struct:hf_long_usb_stats1
usb_tx_suspended	hf_protocol.h	/^	uint16_t usb_tx_suspended;$/;"	m	struct:hf_usb_stats1
usb_tx_suspended	hf_protocol_be.h	/^	uint16_t usb_tx_suspended;$/;"	m	struct:hf_usb_stats1
usb_tx_timeouts	driver-hashfast.h	/^	uint64_t usb_tx_timeouts;$/;"	m	struct:hf_long_usb_stats1
usb_tx_timeouts	hf_protocol.h	/^	uint16_t usb_tx_timeouts;$/;"	m	struct:hf_usb_stats1
usb_tx_timeouts	hf_protocol_be.h	/^	uint16_t usb_tx_timeouts;$/;"	m	struct:hf_usb_stats1
usb_type	usbutils.h	/^	enum usb_types usb_type;$/;"	m	struct:cg_usb_device	typeref:enum:cg_usb_device::usb_types
usb_types	usbutils.h	/^enum usb_types {$/;"	g
usb_uninit	usbutils.c	/^void usb_uninit(struct cgpu_info *cgpu)$/;"	f
usb_write	usbutils.h	470;"	d
usb_write_ep	usbutils.h	476;"	d
usb_write_ep_timeout	usbutils.h	482;"	d
usb_write_ii	usbutils.h	473;"	d
usb_write_timeout	usbutils.h	479;"	d
usbdev	miner.h	/^	struct cg_usb_device *usbdev;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::cg_usb_device
usbinfo	miner.h	/^	struct cg_usb_info usbinfo;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::cg_usb_info
usbres_thr_id	cgminer.c	/^static int usbres_thr_id;$/;"	v	file:
usbstat	usbutils.h	/^	int usbstat;$/;"	m	struct:cg_usb_info
usbstats	api.c	/^static void usbstats(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:
usbver	usbutils.h	/^	uint16_t usbver;$/;"	m	struct:cg_usb_device
use_curses	cgminer.c	/^bool use_curses = true;$/;"	v
use_curses	cgminer.c	/^bool use_curses;$/;"	v
use_syslog	cgminer.c	/^bool use_syslog;$/;"	v
used	driver-klondike.c	/^	KLIST *used;$/;"	m	struct:klondike_info	file:
used_count	driver-klondike.c	/^	int used_count;$/;"	m	struct:klondike_info	file:
usefifo	driver-gridseed.c	/^	int				usefifo;$/;"	m	struct:s_gridseed_info	file:
user_configuration	hf_protocol.h	/^	uint8_t  user_configuration:1;          \/\/ Use the following configuration data$/;"	m	struct:hf_usb_init_header
user_configuration	hf_protocol_be.h	/^	uint8_t  user_configuration:1;          \/\/ Use the following configuration data$/;"	m	struct:hf_usb_init_header
ushort	compat.h	/^typedef unsigned short int ushort;$/;"	t
ut_list	usbutils.c	/^static struct list_head ut_list;$/;"	v	typeref:struct:list_head	file:
uthash_expand_fyi	uthash.h	83;"	d
uthash_fatal	uthash.h	70;"	d
uthash_free	uthash.h	76;"	d
uthash_malloc	uthash.h	73;"	d
uthash_noexpand_fyi	uthash.h	80;"	d
utility	miner.h	/^	double utility;$/;"	m	struct:cgpu_info
utility	miner.h	/^	double utility;$/;"	m	struct:pool
val	usbutils.c	/^	int val;$/;"	m	union:semun	file:
valid	driver-bitfury.h	/^	bool valid; \/* Set on first valid data being found *\/$/;"	m	struct:bitfury_info
value	driver-bab.c	/^	int value;$/;"	m	struct:__anon2	file:
values	driver-icarus.c	/^	uint32_t values;$/;"	m	struct:ICARUS_HISTORY	file:
values	driver-icarus.c	/^	uint32_t values;$/;"	m	struct:ICARUS_INFO	file:
vcc1	driver-bflsc.h	/^	float vcc1;$/;"	m	struct:bflsc_dev
vcc2	driver-bflsc.h	/^	float vcc2;$/;"	m	struct:bflsc_dev
ver_major	driver-bitfury.h	/^	int ver_major;$/;"	m	struct:bitfury_info
ver_minor	driver-bitfury.h	/^	int ver_minor;$/;"	m	struct:bitfury_info
version	driver-bitfury.h	/^	uint8_t version;$/;"	m	struct:bitfury_info
version	driver-klondike.c	/^	uint8_t version;$/;"	m	struct:klondike_id	file:
version1	driver-avalon.h	/^	uint8_t version1;$/;"	m	struct:avalon_info
version2	driver-avalon.h	/^	uint8_t version2;$/;"	m	struct:avalon_info
version3	driver-avalon.h	/^	uint8_t version3;$/;"	m	struct:avalon_info
vmain	driver-bflsc.h	/^	float vmain;$/;"	m	struct:bflsc_dev
voltage	hf_protocol.h	/^	uint16_t voltage;                           \/\/ Voltage at device boundary (0 if unavailable)$/;"	m	struct:hf_g1_die_data
voltage	hf_protocol_be.h	/^	uint16_t voltage;                           \/\/ Voltage at device boundary (0 if unavailable)$/;"	m	struct:hf_g1_die_data
voltage_sample_points	hf_protocol.h	/^	uint32_t voltage_sample_points:8;           \/\/ Bit mask for sample points (up to 5 bits set)$/;"	m	struct:hf_config_data
voltage_sample_points	hf_protocol_be.h	/^	uint32_t voltage_sample_points:8;           \/\/ Bit mask for sample points (up to 5 bits set)$/;"	m	struct:hf_config_data
wMaxPacketSize	usbutils.h	/^	uint16_t wMaxPacketSize;$/;"	m	struct:usb_epinfo
wait_avalon_ready	driver-avalon.c	/^static void wait_avalon_ready(struct cgpu_info *avalon)$/;"	f	file:
wait_lpcurrent	cgminer.c	/^static void wait_lpcurrent(struct pool *pool)$/;"	f	file:
wait_ms	miner.h	/^	unsigned int wait_ms;$/;"	m	struct:cgpu_info
wake_gws	cgminer.c	/^static void wake_gws(void)$/;"	f	file:
want_per_device_stats	cgminer.c	/^bool want_per_device_stats;$/;"	v
watchdog	hf_protocol.h	/^	uint8_t  watchdog:7;                        \/\/ Watchdog timeout, seconds$/;"	m	struct:hf_config_data
watchdog	hf_protocol_be.h	/^	uint8_t  watchdog:7;                        \/\/ Watchdog timeout, seconds$/;"	m	struct:hf_config_data
watchdog_thr_id	cgminer.c	/^static int watchdog_thr_id;$/;"	v	file:
watchdog_thread	cgminer.c	/^static void *watchdog_thread(void __maybe_unused *userdata)$/;"	f	file:
watchpool_thr_id	cgminer.c	/^static int watchpool_thr_id;$/;"	v	file:
watchpool_thread	cgminer.c	/^static void *watchpool_thread(void __maybe_unused *userdata)$/;"	f	file:
when	api.c	/^static time_t when = 0;	\/\/ when the request occurred$/;"	v	file:
wlog	logging.h	96;"	d
wlogprint	logging.h	102;"	d
work	cgminer.c	/^	struct work *work;$/;"	m	struct:stratum_share	typeref:struct:stratum_share::work	file:
work	driver-bab.c	/^	struct work *work;$/;"	m	struct:blist	typeref:struct:blist::work	file:
work	driver-icarus.c	/^	uint8_t work[ICARUS_WORK_SIZE];$/;"	m	struct:ICARUS_WORK	file:
work	driver-knc-spi-fpga.c	/^	struct work *work;$/;"	m	struct:active_work	typeref:struct:active_work::work	file:
work	miner.h	/^struct work {$/;"	s
work_array	miner.h	/^	int work_array;$/;"	m	struct:cgpu_info
work_block	cgminer.c	/^static unsigned int work_block;$/;"	v	file:
work_block	miner.h	/^	unsigned int	work_block;$/;"	m	struct:work
work_complete	driver-bflsc.h	/^	int work_complete;$/;"	m	struct:bflsc_dev
work_completed	cgminer.c	/^void work_completed(struct cgpu_info *cgpu, struct work *work)$/;"	f
work_count	driver-bab.c	/^	int work_count;$/;"	m	struct:bab_info	file:
work_decode	cgminer.c	/^static bool work_decode(struct pool *pool, struct work *work, json_t *val)$/;"	f	file:
work_decode	cgminer.c	1974;"	d	file:
work_difficulty	miner.h	/^	double		work_difficulty;$/;"	m	struct:work
work_division	driver-icarus.c	/^	int work_division;$/;"	m	struct:ICARUS_INFO	file:
work_id	driver-bitfury.h	/^	int work_id; \/\/ Current work->subid$/;"	m	struct:bitfury_info
work_id	driver-knc-spi-fpga.c	/^	uint32_t work_id	:15;$/;"	m	struct:spi_request	file:
work_id	driver-knc-spi-fpga.c	/^	uint32_t work_id	:15;$/;"	m	struct:spi_response	file:
work_id	driver-knc-spi-fpga.c	/^	uint32_t work_id;$/;"	m	struct:active_work	file:
work_list	driver-bab.c	/^	BLIST *work_list;$/;"	m	struct:bab_info	file:
work_queued	driver-bflsc.h	/^	int work_queued;$/;"	m	struct:bflsc_dev
work_restart	driver-modminer.c	860;"	d	file:
work_restart	miner.h	/^	bool	work_restart;$/;"	m	struct:thr_info
work_rollable	cgminer.c	/^static bool work_rollable(struct work *work)$/;"	f	file:
work_running	miner.h	/^	bool work_running;$/;"	m	struct:modminer_fpga_state
work_start_tv	miner.h	/^	struct timeval work_start_tv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::timeval
work_update	miner.h	/^	bool	work_update;$/;"	m	struct:thr_info
workdone	driver-gridseed.c	/^	int				workdone;$/;"	m	struct:s_gridseed_info	file:
workid	driver-klondike.c	/^	uint8_t workid;$/;"	m	struct:_workresult	file:
workid	driver-klondike.c	/^	uint8_t workid;$/;"	m	struct:_worktask	file:
workid	driver-klondike.c	/^	uint8_t workid;$/;"	m	struct:klondike_status	file:
working	driver-klondike.c	/^	bool working;$/;"	m	struct:klist	file:
working_diff	miner.h	/^	double working_diff;$/;"	m	struct:device_drv
workpadding	cgminer.c	/^char *workpadding = "000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000";$/;"	v
workqc	driver-klondike.c	/^	int workqc;$/;"	m	struct:jobque	file:
workqc	driver-klondike.c	/^	uint8_t workqc;$/;"	m	struct:klondike_status	file:
workqueue	driver-gridseed.c	/^	struct work		*workqueue[GRIDSEED_SOFT_QUEUE_LEN];$/;"	m	struct:s_gridseed_info	typeref:struct:s_gridseed_info::work	file:
works	driver-hashfast.h	/^	struct work **works;$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::work
works	miner.h	/^	int works;$/;"	m	struct:pool
works	miner.h	/^	struct work **works;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::work
works_accepted	driver-knc-spi-fpga.c	/^	uint32_t works_accepted		:16;$/;"	m	struct:spi_rx_t	file:
wque_cleared	driver-klondike.c	/^	int wque_cleared;$/;"	m	struct:klondike_info	file:
wque_size	driver-klondike.c	/^	int wque_size;$/;"	m	struct:klondike_info	file:
wr	driver-klondike.c	/^		WORKRESULT wr;$/;"	m	union:kline::__anon3	file:
wr_lock	miner.h	715;"	d
wr_trylock	miner.h	716;"	d
wr_unlock	miner.h	722;"	d
wr_unlock_noyield	miner.h	720;"	d
write_a	driver-knc-spi-fpga.c	/^	int read_a, write_a;$/;"	m	struct:knc_state	file:
write_config	cgminer.c	/^void write_config(FILE *fcfg)$/;"	f
write_d	driver-knc-spi-fpga.c	/^	int read_d, write_d;$/;"	m	struct:knc_state	file:
write_delay_count	usbutils.h	/^	uint64_t write_delay_count;$/;"	m	struct:cg_usb_info
write_q	driver-knc-spi-fpga.c	/^	int read_q, write_q;$/;"	m	struct:knc_state	file:
write_thr	driver-avalon.h	/^	pthread_t write_thr;$/;"	m	struct:avalon_info
write_to_dev	driver-bflsc.c	/^static int write_to_dev(struct cgpu_info *bflsc, int dev, char *buf, int buflen, int *amount, enum usb_cmds cmd)$/;"	f	file:
ws	driver-klondike.c	/^		WORKSTATUS ws;$/;"	m	union:kline::__anon3	file:
wt	driver-klondike.c	/^		WORKTASK wt;$/;"	m	union:kline::__anon3	file:
xlink_mode	driver-bflsc.h	/^	char *xlink_mode;$/;"	m	struct:bflsc_dev
xlink_present	driver-bflsc.h	/^	char *xlink_present;$/;"	m	struct:bflsc_dev
xlinkstr	driver-bflsc.c	/^static void xlinkstr(char *xlink, size_t siz, int dev, struct bflsc_info *sc_info)$/;"	f	file:
zero_bestshare	cgminer.c	/^void zero_bestshare(void)$/;"	f
zero_kline	driver-klondike.c	186;"	d	file:
zero_stats	cgminer.c	/^void zero_stats(void)$/;"	f
zombie_devs	cgminer.c	/^int zombie_devs;$/;"	v
